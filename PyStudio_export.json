{
  "project": {
    "name": "PyStudio",
    "description": "Python Script Hub and CLI tool Builder",
    "status": "completed",
    "uploadedAt": "2025-09-14T15:00:24.219Z",
    "totalFiles": 80,
    "processedFiles": 80
  },
  "stats": {
    "byComplexity": {
      "high": 9,
      "low": 533,
      "medium": 17,
      "unknown": 0
    },
    "byType": {
      "component": 33,
      "function": 84,
      "hook": 13,
      "variable": 429
    },
    "total": 559
  },
  "projectIndex": null,
  "files": [
    {
      "name": "tailwind.config.js",
      "path": "tailwind.config.js",
      "extension": "js",
      "language": "javascript",
      "size": 2429,
      "content": "/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n    darkMode: [\"class\"],\n    content: [\"./index.html\", \"./src/**/*.{ts,tsx,js,jsx}\"],\n  theme: {\n  \textend: {\n  \t\tborderRadius: {\n  \t\t\tlg: 'var(--radius)',\n  \t\t\tmd: 'calc(var(--radius) - 2px)',\n  \t\t\tsm: 'calc(var(--radius) - 4px)'\n  \t\t},\n  \t\tcolors: {\n  \t\t\tbackground: 'hsl(var(--background))',\n  \t\t\tforeground: 'hsl(var(--foreground))',\n  \t\t\tcard: {\n  \t\t\t\tDEFAULT: 'hsl(var(--card))',\n  \t\t\t\tforeground: 'hsl(var(--card-foreground))'\n  \t\t\t},\n  \t\t\tpopover: {\n  \t\t\t\tDEFAULT: 'hsl(var(--popover))',\n  \t\t\t\tforeground: 'hsl(var(--popover-foreground))'\n  \t\t\t},\n  \t\t\tprimary: {\n  \t\t\t\tDEFAULT: 'hsl(var(--primary))',\n  \t\t\t\tforeground: 'hsl(var(--primary-foreground))'\n  \t\t\t},\n  \t\t\tsecondary: {\n  \t\t\t\tDEFAULT: 'hsl(var(--secondary))',\n  \t\t\t\tforeground: 'hsl(var(--secondary-foreground))'\n  \t\t\t},\n  \t\t\tmuted: {\n  \t\t\t\tDEFAULT: 'hsl(var(--muted))',\n  \t\t\t\tforeground: 'hsl(var(--muted-foreground))'\n  \t\t\t},\n  \t\t\taccent: {\n  \t\t\t\tDEFAULT: 'hsl(var(--accent))',\n  \t\t\t\tforeground: 'hsl(var(--accent-foreground))'\n  \t\t\t},\n  \t\t\tdestructive: {\n  \t\t\t\tDEFAULT: 'hsl(var(--destructive))',\n  \t\t\t\tforeground: 'hsl(var(--destructive-foreground))'\n  \t\t\t},\n  \t\t\tborder: 'hsl(var(--border))',\n  \t\t\tinput: 'hsl(var(--input))',\n  \t\t\tring: 'hsl(var(--ring))',\n  \t\t\tchart: {\n  \t\t\t\t'1': 'hsl(var(--chart-1))',\n  \t\t\t\t'2': 'hsl(var(--chart-2))',\n  \t\t\t\t'3': 'hsl(var(--chart-3))',\n  \t\t\t\t'4': 'hsl(var(--chart-4))',\n  \t\t\t\t'5': 'hsl(var(--chart-5))'\n  \t\t\t},\n  \t\t\tsidebar: {\n  \t\t\t\tDEFAULT: 'hsl(var(--sidebar-background))',\n  \t\t\t\tforeground: 'hsl(var(--sidebar-foreground))',\n  \t\t\t\tprimary: 'hsl(var(--sidebar-primary))',\n  \t\t\t\t'primary-foreground': 'hsl(var(--sidebar-primary-foreground))',\n  \t\t\t\taccent: 'hsl(var(--sidebar-accent))',\n  \t\t\t\t'accent-foreground': 'hsl(var(--sidebar-accent-foreground))',\n  \t\t\t\tborder: 'hsl(var(--sidebar-border))',\n  \t\t\t\tring: 'hsl(var(--sidebar-ring))'\n  \t\t\t}\n  \t\t},\n  \t\tkeyframes: {\n  \t\t\t'accordion-down': {\n  \t\t\t\tfrom: {\n  \t\t\t\t\theight: '0'\n  \t\t\t\t},\n  \t\t\t\tto: {\n  \t\t\t\t\theight: 'var(--radix-accordion-content-height)'\n  \t\t\t\t}\n  \t\t\t},\n  \t\t\t'accordion-up': {\n  \t\t\t\tfrom: {\n  \t\t\t\t\theight: 'var(--radix-accordion-content-height)'\n  \t\t\t\t},\n  \t\t\t\tto: {\n  \t\t\t\t\theight: '0'\n  \t\t\t\t}\n  \t\t\t}\n  \t\t},\n  \t\tanimation: {\n  \t\t\t'accordion-down': 'accordion-down 0.2s ease-out',\n  \t\t\t'accordion-up': 'accordion-up 0.2s ease-out'\n  \t\t}\n  \t}\n  },\n  plugins: [require(\"tailwindcss-animate\")],\n}"
    },
    {
      "name": "vite.config.js",
      "path": "vite.config.js",
      "extension": "js",
      "language": "javascript",
      "size": 471,
      "content": "import { defineConfig } from 'vite'\nimport react from '@vitejs/plugin-react'\nimport path from 'path'\n\n// https://vite.dev/config/\nexport default defineConfig({\n  plugins: [react()],\n  server: {\n    allowedHosts: true\n  },\n  resolve: {\n    alias: {\n      '@': path.resolve(__dirname, './src'),\n    },\n    extensions: ['.mjs', '.js', '.jsx', '.ts', '.tsx', '.json']\n  },\n  optimizeDeps: {\n    esbuildOptions: {\n      loader: {\n        '.js': 'jsx',\n      },\n    },\n  },\n}) "
    },
    {
      "name": "eslint.config.js",
      "path": "eslint.config.js",
      "extension": "js",
      "language": "javascript",
      "size": 1003,
      "content": "import js from '@eslint/js'\nimport globals from 'globals'\nimport react from 'eslint-plugin-react'\nimport reactHooks from 'eslint-plugin-react-hooks'\nimport reactRefresh from 'eslint-plugin-react-refresh'\n\nexport default [\n  { ignores: ['dist'] },\n  {\n    files: ['**/*.{js,jsx}'],\n    languageOptions: {\n      ecmaVersion: 2020,\n      globals: globals.browser,\n      parserOptions: {\n        ecmaVersion: 'latest',\n        ecmaFeatures: { jsx: true },\n        sourceType: 'module',\n      },\n    },\n    settings: { react: { version: '18.3' } },\n    plugins: {\n      react,\n      'react-hooks': reactHooks,\n      'react-refresh': reactRefresh,\n    },\n    rules: {\n      ...js.configs.recommended.rules,\n      ...react.configs.recommended.rules,\n      ...react.configs['jsx-runtime'].rules,\n      ...reactHooks.configs.recommended.rules,\n      'react/jsx-no-target-blank': 'off',\n      'react-refresh/only-export-components': [\n        'warn',\n        { allowConstantExport: true },\n      ],\n    },\n  },\n]\n"
    },
    {
      "name": "postcss.config.js",
      "path": "postcss.config.js",
      "extension": "js",
      "language": "javascript",
      "size": 80,
      "content": "export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n"
    },
    {
      "name": "App.jsx",
      "path": "src/App.jsx",
      "extension": "jsx",
      "language": "javascript",
      "size": 211,
      "content": "import './App.css'\nimport Pages from \"@/pages/index.jsx\"\nimport { Toaster } from \"@/components/ui/toaster\"\n\nfunction App() {\n  return (\n    <>\n      <Pages />\n      <Toaster />\n    </>\n  )\n}\n\nexport default App "
    },
    {
      "name": "main.jsx",
      "path": "src/main.jsx",
      "extension": "jsx",
      "language": "javascript",
      "size": 191,
      "content": "import React from 'react'\nimport ReactDOM from 'react-dom/client'\nimport App from '@/App.jsx'\nimport '@/index.css'\n\nReactDOM.createRoot(document.getElementById('root')).render(\n    <App />\n) "
    },
    {
      "name": "utils.js",
      "path": "src/lib/utils.js",
      "extension": "js",
      "language": "javascript",
      "size": 135,
      "content": "import { clsx } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs) {\n  return twMerge(clsx(inputs))\n} "
    },
    {
      "name": "integrations.js",
      "path": "src/api/integrations.js",
      "extension": "js",
      "language": "javascript",
      "size": 453,
      "content": "import { base44 } from './base44Client';\n\n\n\n\nexport const Core = base44.integrations.Core;\n\nexport const InvokeLLM = base44.integrations.Core.InvokeLLM;\n\nexport const SendEmail = base44.integrations.Core.SendEmail;\n\nexport const UploadFile = base44.integrations.Core.UploadFile;\n\nexport const GenerateImage = base44.integrations.Core.GenerateImage;\n\nexport const ExtractDataFromUploadedFile = base44.integrations.Core.ExtractDataFromUploadedFile;\n\n\n\n\n\n\n"
    },
    {
      "name": "base44Client.js",
      "path": "src/api/base44Client.js",
      "extension": "js",
      "language": "javascript",
      "size": 315,
      "content": "import { createClient } from '@base44/sdk';\n// import { getAccessToken } from '@base44/sdk/utils/auth-utils';\n\n// Create a client with authentication required\nexport const base44 = createClient({\n  appId: \"68b2d9dd295ddae8d2a8eac8\", \n  requiresAuth: true // Ensure authentication is required for all operations\n});\n"
    },
    {
      "name": "entities.js",
      "path": "src/api/entities.js",
      "extension": "js",
      "language": "javascript",
      "size": 308,
      "content": "import { base44 } from './base44Client';\n\n\nexport const Document = base44.entities.Document;\n\nexport const SearchQuery = base44.entities.SearchQuery;\n\nexport const ScrapedContent = base44.entities.ScrapedContent;\n\nexport const Report = base44.entities.Report;\n\n\n\n// auth sdk:\nexport const User = base44.auth;"
    },
    {
      "name": "use-mobile.jsx",
      "path": "src/hooks/use-mobile.jsx",
      "extension": "jsx",
      "language": "javascript",
      "size": 545,
      "content": "import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange);\n  }, [])\n\n  return !!isMobile\n}\n"
    },
    {
      "name": "index.ts",
      "path": "src/utils/index.ts",
      "extension": "ts",
      "language": "typescript",
      "size": 114,
      "content": "\n\n\nexport function createPageUrl(pageName: string) {\n    return '/' + pageName.toLowerCase().replace(/ /g, '-');\n}"
    },
    {
      "name": "KnowledgeBase.jsx",
      "path": "src/pages/KnowledgeBase.jsx",
      "extension": "jsx",
      "language": "javascript",
      "size": 11209,
      "content": "\nimport React, { useState, useEffect } from \"react\";\nimport { Document } from \"@/api/entities\";\nimport { Search, FileText, Tag, Calendar, Eye, Download } from \"lucide-react\";\nimport BrutalistCard from \"../components/BrutalistCard\";\nimport BrutalistButton from \"../components/BrutalistButton\";\n\nexport default function KnowledgeBase() {\n  const [documents, setDocuments] = useState([]);\n  const [filteredDocuments, setFilteredDocuments] = useState([]);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [selectedCategory, setSelectedCategory] = useState(\"all\");\n  const [selectedTag, setSelectedTag] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(true);\n  const [selectedDocument, setSelectedDocument] = useState(null);\n\n  const categories = [\"all\", \"documentation\", \"tutorial\", \"code\", \"reference\", \"article\", \"book\", \"other\"];\n\n  useEffect(() => {\n    loadDocuments();\n  }, []);\n\n  useEffect(() => {\n    let filtered = documents;\n\n    if (searchTerm) {\n      filtered = filtered.filter(doc => \n        doc.title.toLowerCase().includes(searchTerm.toLowerCase()) ||\n        doc.content.toLowerCase().includes(searchTerm.toLowerCase()) ||\n        doc.summary?.toLowerCase().includes(searchTerm.toLowerCase())\n      );\n    }\n\n    if (selectedCategory !== \"all\") {\n      filtered = filtered.filter(doc => doc.category === selectedCategory);\n    }\n\n    if (selectedTag) {\n      filtered = filtered.filter(doc => \n        doc.tags && doc.tags.some(tag => \n          tag.toLowerCase().includes(selectedTag.toLowerCase())\n        )\n      );\n    }\n\n    setFilteredDocuments(filtered);\n  }, [documents, searchTerm, selectedCategory, selectedTag]);\n\n  const loadDocuments = async () => {\n    try {\n      const docs = await Document.list(\"-created_date\");\n      setDocuments(docs);\n    } catch (error) {\n      console.error(\"Error loading documents:\", error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const getAllTags = () => {\n    const allTags = documents.flatMap(doc => doc.tags || []);\n    return [...new Set(allTags)].sort();\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"text-center py-16\">\n        <div className=\"bg-blue-500 border-4 border-black brutalist-shadow p-8 inline-block\">\n          <p className=\"font-black text-xl text-white uppercase\">\n            LOADING KNOWLEDGE BASE...\n          </p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-8\">\n      {/* Header */}\n      <div className=\"text-center mb-12\">\n        <h1 className=\"text-5xl font-black text-black uppercase tracking-tight mb-4\">\n          KNOWLEDGE BASE\n        </h1>\n        <div className=\"bg-green-500 border-4 border-black brutalist-shadow p-4 inline-block\">\n          <p className=\"font-black text-xl text-white uppercase tracking-wider\">\n            {documents.length} DOCUMENTS INDEXED\n          </p>\n        </div>\n      </div>\n\n      {/* Filters */}\n      <BrutalistCard>\n        <div className=\"space-y-6\">\n          <h3 className=\"text-xl font-black uppercase tracking-wider mb-4\">\n            SEARCH & FILTER\n          </h3>\n\n          {/* Search Bar */}\n          <div className=\"relative\">\n            <Search className=\"absolute left-4 top-1/2 transform -translate-y-1/2 w-5 h-5 text-black\" />\n            <input\n              type=\"text\"\n              placeholder=\"SEARCH DOCUMENTS...\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              className=\"brutalist-input w-full pl-12 pr-4 py-3 text-black font-black uppercase placeholder-gray-500\"\n            />\n          </div>\n\n          {/* Category Filter */}\n          <div>\n            <label className=\"block font-black text-sm uppercase mb-2\">CATEGORY</label>\n            <select\n              value={selectedCategory}\n              onChange={(e) => setSelectedCategory(e.target.value)}\n              className=\"brutalist-input w-full py-3 text-black font-black uppercase\"\n            >\n              {categories.map(category => (\n                <option key={category} value={category}>\n                  {category.toUpperCase().replace('_', ' ')}\n                </option>\n              ))}\n            </select>\n          </div>\n\n          {/* Tag Filter */}\n          <div>\n            <label className=\"block font-black text-sm uppercase mb-2\">TAG</label>\n            <input\n              type=\"text\"\n              placeholder=\"FILTER BY TAG...\"\n              value={selectedTag}\n              onChange={(e) => setSelectedTag(e.target.value)}\n              className=\"brutalist-input w-full py-3 text-black font-black uppercase placeholder-gray-500\"\n            />\n          </div>\n\n          {/* Clear Filters */}\n          {(searchTerm || selectedCategory !== \"all\" || selectedTag) && (\n            <BrutalistButton\n              onClick={() => {\n                setSearchTerm(\"\");\n                setSelectedCategory(\"all\");\n                setSelectedTag(\"\");\n              }}\n              variant=\"outline\"\n            >\n              CLEAR ALL FILTERS\n            </BrutalistButton>\n          )}\n        </div>\n      </BrutalistCard>\n\n      {/* Results Count */}\n      <div className=\"text-center\">\n        <div className=\"bg-yellow-400 border-4 border-black brutalist-shadow p-3 inline-block\">\n          <p className=\"font-black text-lg text-black uppercase\">\n            SHOWING {filteredDocuments.length} OF {documents.length} DOCUMENTS\n          </p>\n        </div>\n      </div>\n\n      {/* Document Grid */}\n      <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-6\">\n        {filteredDocuments.map((doc) => (\n          <BrutalistCard key={doc.id} hover>\n            <div className=\"space-y-4\">\n              {/* Document Header */}\n              <div className=\"flex items-start justify-between\">\n                <div className=\"flex items-center space-x-3\">\n                  <FileText className=\"w-6 h-6 text-black\" />\n                  <div>\n                    <p className=\"font-black text-sm uppercase line-clamp-2\">\n                      {doc.title}\n                    </p>\n                    <p className=\"font-bold text-xs text-gray-600 mt-1\">\n                      {doc.file_type.toUpperCase()} • {doc.word_count} WORDS\n                    </p>\n                  </div>\n                </div>\n              </div>\n\n              {/* Summary */}\n              {doc.summary && (\n                <div className=\"bg-gray-100 border-2 border-black p-3\">\n                  <p className=\"font-bold text-xs text-gray-800 line-clamp-3\">\n                    {doc.summary}\n                  </p>\n                </div>\n              )}\n\n              {/* Tags */}\n              {doc.tags && doc.tags.length > 0 && (\n                <div className=\"flex flex-wrap gap-2\">\n                  {doc.tags.slice(0, 3).map((tag, index) => (\n                    <span\n                      key={index}\n                      className=\"bg-pink-500 text-white px-2 py-1 border-2 border-black font-black text-xs uppercase\"\n                    >\n                      {tag}\n                    </span>\n                  ))}\n                  {doc.tags.length > 3 && (\n                    <span className=\"bg-gray-500 text-white px-2 py-1 border-2 border-black font-black text-xs uppercase\">\n                      +{doc.tags.length - 3}\n                    </span>\n                  )}\n                </div>\n              )}\n\n              {/* Category Badge */}\n              <div className=\"flex items-center justify-between\">\n                <span className=\"bg-blue-500 text-white px-3 py-1 border-2 border-black font-black text-xs uppercase\">\n                  {doc.category}\n                </span>\n                <div className=\"flex space-x-2\">\n                  <button\n                    onClick={() => setSelectedDocument(doc)}\n                    className=\"bg-green-500 text-white p-2 border-2 border-black hover:bg-green-400\"\n                  >\n                    <Eye className=\"w-4 h-4\" />\n                  </button>\n                  {doc.file_url && (\n                    <a\n                      href={doc.file_url}\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                      className=\"bg-orange-500 text-white p-2 border-2 border-black hover:bg-orange-400\"\n                    >\n                      <Download className=\"w-4 h-4\" />\n                    </a>\n                  )}\n                </div>\n              </div>\n\n              {/* Date */}\n              <div className=\"flex items-center text-xs text-gray-500\">\n                <Calendar className=\"w-3 h-3 mr-1\" />\n                <span className=\"font-bold\">\n                  {new Date(doc.created_date).toLocaleDateString()}\n                </span>\n              </div>\n            </div>\n          </BrutalistCard>\n        ))}\n      </div>\n\n      {/* No Results */}\n      {filteredDocuments.length === 0 && !isLoading && (\n        <div className=\"text-center py-16\">\n          <div className=\"bg-red-500 border-4 border-black brutalist-shadow p-8 inline-block\">\n            <p className=\"font-black text-xl text-white uppercase mb-2\">\n              NO DOCUMENTS FOUND\n            </p>\n            <p className=\"font-bold text-sm text-white\">\n              TRY ADJUSTING YOUR FILTERS OR UPLOAD NEW CONTENT\n            </p>\n          </div>\n        </div>\n      )}\n\n      {/* Document Modal */}\n      {selectedDocument && (\n        <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50\">\n          <div className=\"bg-white border-4 border-black brutalist-shadow max-w-4xl w-full max-h-[90vh] overflow-y-auto\">\n            <div className=\"p-6\">\n              <div className=\"flex justify-between items-start mb-6\">\n                <div>\n                  <h2 className=\"text-2xl font-black uppercase mb-2\">\n                    {selectedDocument.title}\n                  </h2>\n                  <p className=\"font-bold text-gray-600\">\n                    {selectedDocument.file_type.toUpperCase()} • {selectedDocument.word_count} WORDS\n                  </p>\n                </div>\n                <BrutalistButton\n                  onClick={() => setSelectedDocument(null)}\n                  variant=\"danger\"\n                >\n                  CLOSE\n                </BrutalistButton>\n              </div>\n\n              {selectedDocument.summary && (\n                <div className=\"bg-yellow-100 border-4 border-black p-4 mb-6\">\n                  <h3 className=\"font-black text-sm uppercase mb-2\">AI SUMMARY</h3>\n                  <p className=\"font-bold text-sm\">{selectedDocument.summary}</p>\n                </div>\n              )}\n\n              <div className=\"bg-gray-100 border-4 border-black p-4\">\n                <h3 className=\"font-black text-sm uppercase mb-4\">CONTENT</h3>\n                <div className=\"whitespace-pre-wrap font-mono text-sm max-h-96 overflow-y-auto\">\n                  {selectedDocument.content.substring(0, 2000)}\n                  {selectedDocument.content.length > 2000 && \"...\"}\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n"
    },
    {
      "name": "Reports.jsx",
      "path": "src/pages/Reports.jsx",
      "extension": "jsx",
      "language": "javascript",
      "size": 16013,
      "content": "\nimport React, { useState, useEffect } from \"react\";\nimport { Report, Document, SearchQuery, ScrapedContent } from \"@/api/entities\";\nimport { InvokeLLM } from \"@/api/integrations\";\nimport { BarChart3, Download, Calendar, TrendingUp, FileText, Loader2, CheckCircle } from \"lucide-react\";\nimport BrutalistCard from \"../components/BrutalistCard\";\nimport BrutalistButton from \"../components/BrutalistButton\";\n\nexport default function Reports() {\n  const [reports, setReports] = useState([]);\n  const [generating, setGenerating] = useState(null);\n  const [analytics, setAnalytics] = useState({});\n  const [dateRange, setDateRange] = useState({\n    start_date: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],\n    end_date: new Date().toISOString().split('T')[0]\n  });\n\n  const reportTypes = [\n    {\n      type: \"usage_analytics\",\n      title: \"Usage Analytics Report\",\n      description: \"Detailed analysis of system usage, search patterns, and user activity\",\n      color: \"blue\"\n    },\n    {\n      type: \"content_summary\",\n      title: \"Content Summary Report\", \n      description: \"Overview of all indexed content, categorization, and growth metrics\",\n      color: \"green\"\n    },\n    {\n      type: \"search_insights\",\n      title: \"Search Insights Report\",\n      description: \"Analysis of search queries, popular topics, and result effectiveness\",\n      color: \"pink\"\n    },\n    {\n      type: \"processing_stats\",\n      title: \"Processing Statistics Report\",\n      description: \"System performance metrics, processing times, and efficiency analysis\",\n      color: \"orange\"\n    }\n  ];\n\n  useEffect(() => {\n    const loadReports = async () => {\n      try {\n        const reportsList = await Report.list(\"-created_date\");\n        setReports(reportsList);\n      } catch (error) {\n        console.error(\"Error loading reports:\", error);\n      }\n    };\n\n    const loadAnalytics = async () => {\n      try {\n        const [documents, searches, scrapedContent] = await Promise.all([\n          Document.list(),\n          SearchQuery.list(),\n          ScrapedContent.list()\n        ]);\n\n        const now = new Date();\n        const thirtyDaysAgo = new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000);\n\n        const recentDocuments = documents.filter(doc => \n          new Date(doc.created_date) >= thirtyDaysAgo\n        );\n\n        const recentSearches = searches.filter(search => \n          new Date(search.created_date) >= thirtyDaysAgo\n        );\n\n        const getTopCategories = (documents) => {\n          const categories = {};\n          documents.forEach(doc => {\n            categories[doc.category] = (categories[doc.category] || 0) + 1;\n          });\n          return Object.entries(categories)\n            .sort(([,a], [,b]) => b - a)\n            .slice(0, 5);\n        };\n\n        const getSearchTrends = (searches) => {\n          const trends = {};\n          searches.forEach(search => {\n            const words = search.query_text.toLowerCase().split(' ');\n            words.forEach(word => {\n              if (word.length > 3) { // Filter out very short words\n                trends[word] = (trends[word] || 0) + 1;\n              }\n            });\n          });\n          return Object.entries(trends)\n            .sort(([,a], [,b]) => b - a)\n            .slice(0, 10);\n        };\n\n        setAnalytics({\n          totalDocuments: documents.length,\n          totalSearches: searches.length,\n          totalScraped: scrapedContent.length,\n          recentDocuments: recentDocuments.length,\n          recentSearches: recentSearches.length,\n          avgSearchTime: searches.reduce((sum, s) => sum + (s.execution_time || 0), 0) / searches.length || 0,\n          topCategories: getTopCategories(documents),\n          searchTrends: getSearchTrends(recentSearches)\n        });\n\n      } catch (error) {\n        console.error(\"Error loading analytics:\", error);\n      }\n    };\n\n    loadReports();\n    loadAnalytics();\n  }, []);\n\n  const generateReport = async (reportType) => {\n    setGenerating(reportType);\n\n    try {\n      // Generate report data using AI\n      const reportData = await InvokeLLM({\n        prompt: `Generate a comprehensive ${reportType.replace('_', ' ')} report for a Python knowledge base platform.\n\nCurrent system statistics:\n- Total Documents: ${analytics.totalDocuments}\n- Total Searches: ${analytics.totalSearches}\n- Total Scraped Content: ${analytics.totalScraped}\n- Recent Documents (30 days): ${analytics.recentDocuments}\n- Recent Searches (30 days): ${analytics.recentSearches}\n- Average Search Time: ${analytics.avgSearchTime?.toFixed(2)}ms\n\nDate Range: ${dateRange.start_date} to ${dateRange.end_date}\n\nPlease provide:\n1. Executive Summary (2-3 paragraphs)\n2. Key Metrics and KPIs\n3. Detailed Analysis (5-7 sections)\n4. Recommendations (3-5 actionable items)\n5. Trends and Insights\n6. Performance Analysis\n\nMake it professional and data-driven with specific insights for a Python developer knowledge base.`,\n        response_json_schema: {\n          type: \"object\",\n          properties: {\n            executive_summary: { type: \"string\" },\n            key_metrics: {\n              type: \"object\",\n              properties: {\n                growth_rate: { type: \"string\" },\n                engagement_score: { type: \"string\" },\n                efficiency_rating: { type: \"string\" },\n                user_satisfaction: { type: \"string\" }\n              }\n            },\n            detailed_analysis: {\n              type: \"array\",\n              items: {\n                type: \"object\",\n                properties: {\n                  section: { type: \"string\" },\n                  content: { type: \"string\" }\n                }\n              }\n            },\n            recommendations: {\n              type: \"array\",\n              items: { type: \"string\" }\n            },\n            trends: {\n              type: \"array\",\n              items: { type: \"string\" }\n            }\n          }\n        }\n      });\n\n      // Create report record\n      const report = await Report.create({\n        report_type: reportType,\n        title: reportTypes.find(rt => rt.type === reportType)?.title || reportType,\n        data: reportData,\n        generation_status: \"completed\",\n        date_range: dateRange,\n        generated_by: \"System\"\n      });\n\n      // Reload reports\n      const reportsList = await Report.list(\"-created_date\");\n      setReports(reportsList);\n      \n    } catch (error) {\n      console.error(\"Error generating report:\", error);\n    } finally {\n      setGenerating(null);\n    }\n  };\n\n  const downloadReport = (report) => {\n    const reportContent = `\n# ${report.title}\nGenerated: ${new Date(report.created_date).toLocaleString()}\nDate Range: ${report.date_range?.start_date} to ${report.date_range?.end_date}\n\n## Executive Summary\n${report.data?.executive_summary || 'No summary available'}\n\n## Key Metrics\n${Object.entries(report.data?.key_metrics || {}).map(([key, value]) => `- ${key.replace('_', ' ').toUpperCase()}: ${value}`).join('\\n')}\n\n## Detailed Analysis\n${report.data?.detailed_analysis?.map(section => `### ${section.section}\\n${section.content}`).join('\\n\\n') || 'No detailed analysis available'}\n\n## Recommendations\n${report.data?.recommendations?.map((rec, i) => `${i + 1}. ${rec}`).join('\\n') || 'No recommendations available'}\n\n## Trends & Insights\n${report.data?.trends?.map((trend, i) => `${i + 1}. ${trend}`).join('\\n') || 'No trends available'}\n    `;\n\n    const blob = new Blob([reportContent], { type: 'text/markdown' });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = `${report.title.replace(/\\s+/g, '_')}_${new Date().toISOString().split('T')[0]}.md`;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n  };\n\n  return (\n    <div className=\"space-y-8\">\n      {/* Header */}\n      <div className=\"text-center mb-12\">\n        <h1 className=\"text-5xl font-black text-black uppercase tracking-tight mb-4\">\n          ANALYTICS & REPORTS\n        </h1>\n        <div className=\"bg-orange-500 border-4 border-black brutalist-shadow p-4 inline-block\">\n          <p className=\"font-black text-xl text-white uppercase tracking-wider\">\n            DATA-DRIVEN INSIGHTS\n          </p>\n        </div>\n      </div>\n\n      {/* Quick Stats */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n        <BrutalistCard color=\"blue\" hover>\n          <div className=\"text-center\">\n            <FileText className=\"w-8 h-8 text-black mx-auto mb-3\" />\n            <p className=\"font-black text-2xl text-black\">{analytics.totalDocuments || 0}</p>\n            <p className=\"font-bold text-sm text-black uppercase\">TOTAL DOCS</p>\n          </div>\n        </BrutalistCard>\n\n        <BrutalistCard color=\"green\" hover>\n          <div className=\"text-center\">\n            <BarChart3 className=\"w-8 h-8 text-black mx-auto mb-3\" />\n            <p className=\"font-black text-2xl text-black\">{analytics.totalSearches || 0}</p>\n            <p className=\"font-bold text-sm text-black uppercase\">SEARCHES</p>\n          </div>\n        </BrutalistCard>\n\n        <BrutalistCard color=\"pink\" hover>\n          <div className=\"text-center\">\n            <TrendingUp className=\"w-8 h-8 text-black mx-auto mb-3\" />\n            <p className=\"font-black text-2xl text-black\">{analytics.recentDocuments || 0}</p>\n            <p className=\"font-bold text-sm text-black uppercase\">THIS MONTH</p>\n          </div>\n        </BrutalistCard>\n\n        <BrutalistCard color=\"yellow\" hover>\n          <div className=\"text-center\">\n            <Calendar className=\"w-8 h-8 text-black mx-auto mb-3\" />\n            <p className=\"font-black text-2xl text-black\">{analytics.avgSearchTime?.toFixed(0) || 0}MS</p>\n            <p className=\"font-bold text-sm text-black uppercase\">AVG SEARCH</p>\n          </div>\n        </BrutalistCard>\n      </div>\n\n      {/* Report Generation */}\n      <BrutalistCard>\n        <h3 className=\"text-xl font-black uppercase tracking-wider mb-6\">\n          GENERATE NEW REPORT\n        </h3>\n\n        {/* Date Range */}\n        <div className=\"grid md:grid-cols-2 gap-4 mb-6\">\n          <div>\n            <label className=\"block font-black text-sm uppercase mb-2\">START DATE</label>\n            <input\n              type=\"date\"\n              value={dateRange.start_date}\n              onChange={(e) => setDateRange(prev => ({ ...prev, start_date: e.target.value }))}\n              className=\"brutalist-input w-full py-3 text-black font-black\"\n            />\n          </div>\n          <div>\n            <label className=\"block font-black text-sm uppercase mb-2\">END DATE</label>\n            <input\n              type=\"date\"\n              value={dateRange.end_date}\n              onChange={(e) => setDateRange(prev => ({ ...prev, end_date: e.target.value }))}\n              className=\"brutalist-input w-full py-3 text-black font-black\"\n            />\n          </div>\n        </div>\n\n        {/* Report Types */}\n        <div className=\"grid md:grid-cols-2 gap-6\">\n          {reportTypes.map((reportType) => (\n            <BrutalistCard key={reportType.type} color={reportType.color}>\n              <div className=\"space-y-4\">\n                <div>\n                  <h4 className=\"font-black text-lg text-black uppercase mb-2\">\n                    {reportType.title}\n                  </h4>\n                  <p className=\"font-bold text-sm text-black\">\n                    {reportType.description}\n                  </p>\n                </div>\n                \n                <BrutalistButton\n                  onClick={() => generateReport(reportType.type)}\n                  disabled={generating === reportType.type}\n                  variant=\"outline\"\n                  className=\"w-full\"\n                >\n                  {generating === reportType.type ? (\n                    <>\n                      <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                      GENERATING...\n                    </>\n                  ) : (\n                    <>\n                      <BarChart3 className=\"w-4 h-4 mr-2\" />\n                      GENERATE\n                    </>\n                  )}\n                </BrutalistButton>\n              </div>\n            </BrutalistCard>\n          ))}\n        </div>\n      </BrutalistCard>\n\n      {/* Generated Reports */}\n      <BrutalistCard>\n        <h3 className=\"text-xl font-black uppercase tracking-wider mb-6\">\n          GENERATED REPORTS ({reports.length})\n        </h3>\n\n        {reports.length === 0 ? (\n          <div className=\"text-center py-8\">\n            <div className=\"bg-gray-200 border-4 border-black p-6\">\n              <p className=\"font-black text-lg text-gray-600 uppercase\">\n                NO REPORTS GENERATED YET\n              </p>\n              <p className=\"font-bold text-sm text-gray-500 mt-2\">\n                Generate your first report using the options above\n              </p>\n            </div>\n          </div>\n        ) : (\n          <div className=\"space-y-4\">\n            {reports.map((report) => (\n              <div\n                key={report.id}\n                className=\"bg-gray-100 border-4 border-black p-6 flex items-center justify-between\"\n              >\n                <div className=\"flex items-center space-x-4\">\n                  <CheckCircle className=\"w-6 h-6 text-green-500\" />\n                  <div>\n                    <p className=\"font-black text-lg uppercase\">{report.title}</p>\n                    <div className=\"flex items-center space-x-4 mt-1\">\n                      <span className=\"font-bold text-sm text-gray-600\">\n                        Generated: {new Date(report.created_date).toLocaleDateString()}\n                      </span>\n                      {report.date_range && (\n                        <span className=\"font-bold text-sm text-gray-600\">\n                          Range: {report.date_range.start_date} to {report.date_range.end_date}\n                        </span>\n                      )}\n                    </div>\n                  </div>\n                </div>\n                \n                <div className=\"flex space-x-3\">\n                  <BrutalistButton\n                    onClick={() => downloadReport(report)}\n                    variant=\"success\"\n                    size=\"small\"\n                  >\n                    <Download className=\"w-4 h-4 mr-2\" />\n                    DOWNLOAD\n                  </BrutalistButton>\n                </div>\n              </div>\n            ))}\n          </div>\n        )}\n      </BrutalistCard>\n\n      {/* Quick Insights */}\n      <div className=\"grid md:grid-cols-2 gap-6\">\n        {/* Top Categories */}\n        <BrutalistCard>\n          <h4 className=\"font-black text-lg uppercase mb-4\">TOP CATEGORIES</h4>\n          <div className=\"space-y-3\">\n            {analytics.topCategories?.map(([category, count], index) => (\n              <div key={category} className=\"flex justify-between items-center\">\n                <span className=\"font-bold text-sm uppercase\">{category}</span>\n                <div className=\"bg-blue-500 text-white px-3 py-1 border-2 border-black font-black text-xs\">\n                  {count}\n                </div>\n              </div>\n            ))}\n          </div>\n        </BrutalistCard>\n\n        {/* Search Trends */}\n        <BrutalistCard>\n          <h4 className=\"font-black text-lg uppercase mb-4\">SEARCH TRENDS</h4>\n          <div className=\"space-y-3\">\n            {analytics.searchTrends?.slice(0, 5).map(([term, count], index) => (\n              <div key={term} className=\"flex justify-between items-center\">\n                <span className=\"font-bold text-sm uppercase\">\"{term}\"</span>\n                <div className=\"bg-pink-500 text-white px-3 py-1 border-2 border-black font-black text-xs\">\n                  {count}\n                </div>\n              </div>\n            ))}\n          </div>\n        </BrutalistCard>\n      </div>\n    </div>\n  );\n}\n"
    },
    {
      "name": "Layout.jsx",
      "path": "src/pages/Layout.jsx",
      "extension": "jsx",
      "language": "javascript",
      "size": 5736,
      "content": "\nimport React from \"react\";\nimport { Link, useLocation } from \"react-router-dom\";\nimport { createPageUrl } from \"@/utils\";\nimport { \n  Database, \n  Upload, \n  Search, \n  Globe, \n  BarChart3, \n  FileText, \n  Settings,\n  Zap,\n  Brain\n} from \"lucide-react\";\n\nexport default function Layout({ children, currentPageName }) {\n  const location = useLocation();\n\n  const navigationItems = [\n    { name: \"Dashboard\", url: createPageUrl(\"Dashboard\"), icon: BarChart3 },\n    { name: \"Upload\", url: createPageUrl(\"Upload\"), icon: Upload },\n    { name: \"Knowledge Base\", url: createPageUrl(\"KnowledgeBase\"), icon: Database },\n    { name: \"Web Scraper\", url: createPageUrl(\"WebScraper\"), icon: Globe },\n    { name: \"Search\", url: createPageUrl(\"Search\"), icon: Search },\n    { name: \"Reports\", url: createPageUrl(\"Reports\"), icon: FileText },\n    { name: \"Settings\", url: createPageUrl(\"Settings\"), icon: Settings },\n  ];\n\n  const isActive = (url) => location.pathname === url;\n\n  return (\n    <div className=\"min-h-screen bg-white\">\n      <style>{`\n        @import url('https://fonts.googleapis.com/css2?family=JetBrains+Mono:wght@400;700;800&display=swap');\n        \n        * {\n          font-family: 'JetBrains Mono', monospace !important;\n        }\n        \n        .brutalist-shadow {\n          box-shadow: 6px 6px 0px #000000;\n        }\n        \n        .brutalist-shadow-small {\n          box-shadow: 3px 3px 0px #000000;\n        }\n        \n        .brutalist-button {\n          background: #0066FF;\n          color: white;\n          border: 4px solid #000000;\n          font-weight: 800;\n          text-transform: uppercase;\n          letter-spacing: 1px;\n          transition: all 0.1s ease;\n        }\n        \n        .brutalist-button:hover {\n          transform: translate(-2px, -2px);\n          box-shadow: 8px 8px 0px #000000;\n          background: #0052CC;\n        }\n        \n        .brutalist-card {\n          border: 4px solid #000000;\n          background: white;\n        }\n        \n        .brutalist-input {\n          border: 4px solid #000000;\n          background: white;\n          font-weight: 700;\n        }\n        \n        .brutalist-input:focus {\n          outline: none;\n          border-color: #0066FF;\n          box-shadow: 4px 4px 0px #000000;\n        }\n      `}</style>\n\n      {/* Header */}\n      <header className=\"bg-white border-b-4 border-black\">\n        <div className=\"max-w-7xl mx-auto px-6 py-6\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"bg-black p-3 brutalist-shadow-small\">\n                <Brain className=\"w-8 h-8 text-white\" />\n              </div>\n              <div>\n                <h1 className=\"text-3xl font-black text-black uppercase tracking-tight\">\n                  PyKnowledge\n                </h1>\n                <p className=\"text-lg font-bold text-black mt-1 uppercase tracking-wide\">\n                  AI-POWERED KNOWLEDGE BASE\n                </p>\n              </div>\n            </div>\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"bg-yellow-400 px-4 py-2 border-4 border-black brutalist-shadow-small\">\n                <div className=\"flex items-center space-x-2\">\n                  <Zap className=\"w-5 h-5 text-black\" />\n                  <span className=\"text-black font-black uppercase text-sm\">\n                    PROCESSING\n                  </span>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      {/* Navigation */}\n      <nav className=\"bg-black border-b-4 border-black\">\n        <div className=\"max-w-7xl mx-auto px-6\">\n          <div className=\"flex space-x-0 overflow-x-auto\">\n            {navigationItems.map((item) => {\n              const Icon = item.icon;\n              const active = isActive(item.url);\n              \n              return (\n                <Link\n                  key={item.name}\n                  to={item.url}\n                  className={`\n                    flex items-center space-x-3 px-6 py-4 font-black uppercase text-sm\n                    border-r-4 border-black transition-all duration-100 whitespace-nowrap\n                    ${active \n                      ? 'bg-blue-500 text-white hover:bg-blue-400' \n                      : 'bg-white text-black hover:bg-gray-200'\n                    }\n                  `}\n                >\n                  <Icon className=\"w-5 h-5\" />\n                  <span className=\"tracking-wider\">{item.name}</span>\n                </Link>\n              );\n            })}\n          </div>\n        </div>\n      </nav>\n\n      {/* Main Content */}\n      <main className=\"max-w-7xl mx-auto px-6 py-8\">\n        {children}\n      </main>\n\n      {/* Footer */}\n      <footer className=\"bg-black border-t-4 border-black mt-16\">\n        <div className=\"max-w-7xl mx-auto px-6 py-8\">\n          <div className=\"text-center\">\n            <p className=\"text-white font-black uppercase text-lg tracking-wider\">\n              POWERED BY AI • BUILT FOR PYTHON DEVELOPERS\n            </p>\n            <div className=\"mt-4 flex justify-center space-x-8\">\n              <div className=\"bg-pink-500 px-4 py-2 border-4 border-white\">\n                <span className=\"text-white font-black uppercase text-sm\">\n                  ALWAYS LEARNING\n                </span>\n              </div>\n              <div className=\"bg-green-500 px-4 py-2 border-4 border-white\">\n                <span className=\"text-white font-black uppercase text-sm\">\n                  ALWAYS SEARCHING\n                </span>\n              </div>\n            </div>\n          </div>\n        </div>\n      </footer>\n    </div>\n  );\n}\n"
    },
    {
      "name": "Settings.jsx",
      "path": "src/pages/Settings.jsx",
      "extension": "jsx",
      "language": "javascript",
      "size": 13392,
      "content": "import React, { useState, useEffect } from \"react\";\nimport { User } from \"@/api/entities\";\nimport { Settings as SettingsIcon, Save, RefreshCw, Trash2, AlertTriangle, CheckCircle } from \"lucide-react\";\nimport BrutalistCard from \"../components/BrutalistCard\";\nimport BrutalistButton from \"../components/BrutalistButton\";\n\nexport default function Settings() {\n  const [settings, setSettings] = useState({\n    ai_model: \"gpt-4\",\n    processing_batch_size: 10,\n    search_results_limit: 50,\n    auto_tag_generation: true,\n    semantic_search_enabled: true,\n    summary_generation: true,\n    content_filtering: true,\n    processing_timeout: 300,\n    max_file_size: 50,\n    notification_email: \"\",\n    backup_frequency: \"daily\",\n    data_retention_days: 365\n  });\n\n  const [saving, setSaving] = useState(false);\n  const [resetConfirm, setResetConfirm] = useState(false);\n  const [user, setUser] = useState(null);\n  const [systemStats, setSystemStats] = useState({\n    uptime: \"99.9%\",\n    storage_used: \"2.3 GB\",\n    total_storage: \"100 GB\",\n    api_calls_today: 1247,\n    processing_queue_size: 3\n  });\n\n  useEffect(() => {\n    loadUserSettings();\n  }, []);\n\n  const loadUserSettings = async () => {\n    try {\n      const currentUser = await User.me();\n      setUser(currentUser);\n      \n      // Load user-specific settings if they exist\n      if (currentUser.settings) {\n        setSettings(prev => ({ ...prev, ...currentUser.settings }));\n      }\n      \n      if (currentUser.email) {\n        setSettings(prev => ({ ...prev, notification_email: currentUser.email }));\n      }\n    } catch (error) {\n      console.error(\"Error loading user settings:\", error);\n    }\n  };\n\n  const saveSettings = async () => {\n    setSaving(true);\n    try {\n      await User.updateMyUserData({ settings });\n      \n      // Show success feedback\n      setTimeout(() => setSaving(false), 1000);\n    } catch (error) {\n      console.error(\"Error saving settings:\", error);\n      setSaving(false);\n    }\n  };\n\n  const resetToDefaults = () => {\n    setSettings({\n      ai_model: \"gpt-4\",\n      processing_batch_size: 10,\n      search_results_limit: 50,\n      auto_tag_generation: true,\n      semantic_search_enabled: true,\n      summary_generation: true,\n      content_filtering: true,\n      processing_timeout: 300,\n      max_file_size: 50,\n      notification_email: user?.email || \"\",\n      backup_frequency: \"daily\",\n      data_retention_days: 365\n    });\n    setResetConfirm(false);\n  };\n\n  const handleSettingChange = (key, value) => {\n    setSettings(prev => ({ ...prev, [key]: value }));\n  };\n\n  return (\n    <div className=\"space-y-8\">\n      {/* Header */}\n      <div className=\"text-center mb-12\">\n        <h1 className=\"text-5xl font-black text-black uppercase tracking-tight mb-4\">\n          SYSTEM SETTINGS\n        </h1>\n        <div className=\"bg-blue-500 border-4 border-black brutalist-shadow p-4 inline-block\">\n          <p className=\"font-black text-xl text-white uppercase tracking-wider\">\n            CONFIGURE YOUR PLATFORM\n          </p>\n        </div>\n      </div>\n\n      {/* System Status */}\n      <BrutalistCard color=\"green\">\n        <h3 className=\"text-xl font-black uppercase tracking-wider mb-6\">\n          SYSTEM STATUS\n        </h3>\n        \n        <div className=\"grid md:grid-cols-5 gap-4\">\n          <div className=\"text-center\">\n            <p className=\"font-black text-2xl text-black mb-1\">{systemStats.uptime}</p>\n            <p className=\"font-bold text-xs text-black uppercase\">UPTIME</p>\n          </div>\n          <div className=\"text-center\">\n            <p className=\"font-black text-2xl text-black mb-1\">{systemStats.storage_used}</p>\n            <p className=\"font-bold text-xs text-black uppercase\">STORAGE</p>\n          </div>\n          <div className=\"text-center\">\n            <p className=\"font-black text-2xl text-black mb-1\">{systemStats.api_calls_today}</p>\n            <p className=\"font-bold text-xs text-black uppercase\">API CALLS</p>\n          </div>\n          <div className=\"text-center\">\n            <p className=\"font-black text-2xl text-black mb-1\">{systemStats.processing_queue_size}</p>\n            <p className=\"font-bold text-xs text-black uppercase\">IN QUEUE</p>\n          </div>\n          <div className=\"text-center\">\n            <CheckCircle className=\"w-8 h-8 text-black mx-auto mb-1\" />\n            <p className=\"font-bold text-xs text-black uppercase\">HEALTHY</p>\n          </div>\n        </div>\n      </BrutalistCard>\n\n      {/* AI & Processing Settings */}\n      <BrutalistCard>\n        <h3 className=\"text-xl font-black uppercase tracking-wider mb-6\">\n          AI & PROCESSING CONFIGURATION\n        </h3>\n        \n        <div className=\"grid md:grid-cols-2 gap-6\">\n          <div>\n            <label className=\"block font-black text-sm uppercase mb-2\">AI MODEL</label>\n            <select\n              value={settings.ai_model}\n              onChange={(e) => handleSettingChange('ai_model', e.target.value)}\n              className=\"brutalist-input w-full py-3 text-black font-black uppercase\"\n            >\n              <option value=\"gpt-4\">GPT-4 (RECOMMENDED)</option>\n              <option value=\"gpt-3.5-turbo\">GPT-3.5 TURBO (FASTER)</option>\n              <option value=\"claude-3\">CLAUDE 3 (ALTERNATIVE)</option>\n            </select>\n          </div>\n\n          <div>\n            <label className=\"block font-black text-sm uppercase mb-2\">PROCESSING BATCH SIZE</label>\n            <input\n              type=\"number\"\n              min=\"1\"\n              max=\"50\"\n              value={settings.processing_batch_size}\n              onChange={(e) => handleSettingChange('processing_batch_size', parseInt(e.target.value))}\n              className=\"brutalist-input w-full py-3 text-black font-black\"\n            />\n          </div>\n\n          <div>\n            <label className=\"block font-black text-sm uppercase mb-2\">SEARCH RESULTS LIMIT</label>\n            <input\n              type=\"number\"\n              min=\"10\"\n              max=\"200\"\n              value={settings.search_results_limit}\n              onChange={(e) => handleSettingChange('search_results_limit', parseInt(e.target.value))}\n              className=\"brutalist-input w-full py-3 text-black font-black\"\n            />\n          </div>\n\n          <div>\n            <label className=\"block font-black text-sm uppercase mb-2\">PROCESSING TIMEOUT (SECONDS)</label>\n            <input\n              type=\"number\"\n              min=\"60\"\n              max=\"600\"\n              value={settings.processing_timeout}\n              onChange={(e) => handleSettingChange('processing_timeout', parseInt(e.target.value))}\n              className=\"brutalist-input w-full py-3 text-black font-black\"\n            />\n          </div>\n        </div>\n      </BrutalistCard>\n\n      {/* Feature Toggles */}\n      <BrutalistCard>\n        <h3 className=\"text-xl font-black uppercase tracking-wider mb-6\">\n          FEATURE SETTINGS\n        </h3>\n        \n        <div className=\"grid md:grid-cols-2 gap-6\">\n          {[\n            { key: 'auto_tag_generation', label: 'AUTO TAG GENERATION', description: 'Automatically generate tags for uploaded content' },\n            { key: 'semantic_search_enabled', label: 'SEMANTIC SEARCH', description: 'Enable AI-powered semantic search capabilities' },\n            { key: 'summary_generation', label: 'SUMMARY GENERATION', description: 'Generate AI summaries for all content' },\n            { key: 'content_filtering', label: 'CONTENT FILTERING', description: 'Filter inappropriate or irrelevant content' }\n          ].map((feature) => (\n            <div\n              key={feature.key}\n              className={`\n                border-4 border-black p-4 cursor-pointer transition-all duration-200\n                ${settings[feature.key] ? 'bg-green-100' : 'bg-gray-100'}\n              `}\n              onClick={() => handleSettingChange(feature.key, !settings[feature.key])}\n            >\n              <div className=\"flex items-center justify-between mb-2\">\n                <p className=\"font-black text-sm uppercase\">{feature.label}</p>\n                <div className={`\n                  w-12 h-6 border-2 border-black relative\n                  ${settings[feature.key] ? 'bg-green-500' : 'bg-gray-400'}\n                `}>\n                  <div className={`\n                    w-4 h-4 bg-white border-2 border-black absolute top-0 transition-all duration-200\n                    ${settings[feature.key] ? 'right-0' : 'left-0'}\n                  `} />\n                </div>\n              </div>\n              <p className=\"font-bold text-xs text-gray-600\">{feature.description}</p>\n            </div>\n          ))}\n        </div>\n      </BrutalistCard>\n\n      {/* Storage & Data Settings */}\n      <BrutalistCard>\n        <h3 className=\"text-xl font-black uppercase tracking-wider mb-6\">\n          STORAGE & DATA MANAGEMENT\n        </h3>\n        \n        <div className=\"grid md:grid-cols-3 gap-6\">\n          <div>\n            <label className=\"block font-black text-sm uppercase mb-2\">MAX FILE SIZE (MB)</label>\n            <input\n              type=\"number\"\n              min=\"1\"\n              max=\"500\"\n              value={settings.max_file_size}\n              onChange={(e) => handleSettingChange('max_file_size', parseInt(e.target.value))}\n              className=\"brutalist-input w-full py-3 text-black font-black\"\n            />\n          </div>\n\n          <div>\n            <label className=\"block font-black text-sm uppercase mb-2\">BACKUP FREQUENCY</label>\n            <select\n              value={settings.backup_frequency}\n              onChange={(e) => handleSettingChange('backup_frequency', e.target.value)}\n              className=\"brutalist-input w-full py-3 text-black font-black uppercase\"\n            >\n              <option value=\"hourly\">HOURLY</option>\n              <option value=\"daily\">DAILY</option>\n              <option value=\"weekly\">WEEKLY</option>\n              <option value=\"monthly\">MONTHLY</option>\n            </select>\n          </div>\n\n          <div>\n            <label className=\"block font-black text-sm uppercase mb-2\">DATA RETENTION (DAYS)</label>\n            <input\n              type=\"number\"\n              min=\"30\"\n              max=\"3650\"\n              value={settings.data_retention_days}\n              onChange={(e) => handleSettingChange('data_retention_days', parseInt(e.target.value))}\n              className=\"brutalist-input w-full py-3 text-black font-black\"\n            />\n          </div>\n        </div>\n      </BrutalistCard>\n\n      {/* Notifications */}\n      <BrutalistCard>\n        <h3 className=\"text-xl font-black uppercase tracking-wider mb-6\">\n          NOTIFICATIONS\n        </h3>\n        \n        <div>\n          <label className=\"block font-black text-sm uppercase mb-2\">NOTIFICATION EMAIL</label>\n          <input\n            type=\"email\"\n            value={settings.notification_email}\n            onChange={(e) => handleSettingChange('notification_email', e.target.value)}\n            className=\"brutalist-input w-full py-3 text-black font-black\"\n            placeholder=\"YOUR@EMAIL.COM\"\n          />\n        </div>\n      </BrutalistCard>\n\n      {/* Actions */}\n      <div className=\"flex justify-between items-center\">\n        <div className=\"flex gap-4\">\n          <BrutalistButton\n            onClick={saveSettings}\n            disabled={saving}\n            variant=\"success\"\n            size=\"large\"\n          >\n            {saving ? (\n              <>\n                <RefreshCw className=\"w-5 h-5 mr-2 animate-spin\" />\n                SAVING...\n              </>\n            ) : (\n              <>\n                <Save className=\"w-5 h-5 mr-2\" />\n                SAVE SETTINGS\n              </>\n            )}\n          </BrutalistButton>\n        </div>\n\n        <div className=\"flex gap-4\">\n          {resetConfirm ? (\n            <div className=\"flex gap-2\">\n              <BrutalistButton\n                onClick={resetToDefaults}\n                variant=\"danger\"\n                size=\"small\"\n              >\n                <Trash2 className=\"w-4 h-4 mr-2\" />\n                CONFIRM RESET\n              </BrutalistButton>\n              <BrutalistButton\n                onClick={() => setResetConfirm(false)}\n                variant=\"outline\"\n                size=\"small\"\n              >\n                CANCEL\n              </BrutalistButton>\n            </div>\n          ) : (\n            <BrutalistButton\n              onClick={() => setResetConfirm(true)}\n              variant=\"outline\"\n            >\n              <AlertTriangle className=\"w-4 h-4 mr-2\" />\n              RESET TO DEFAULTS\n            </BrutalistButton>\n          )}\n        </div>\n      </div>\n\n      {/* Warning */}\n      <BrutalistCard color=\"yellow\">\n        <div className=\"flex items-start space-x-4\">\n          <AlertTriangle className=\"w-6 h-6 text-black mt-1\" />\n          <div>\n            <p className=\"font-black text-sm text-black uppercase mb-2\">\n              CONFIGURATION WARNING\n            </p>\n            <p className=\"font-bold text-sm text-black\">\n              Changes to AI model and processing settings may affect system performance. \n              Higher batch sizes and shorter timeouts may cause processing failures. \n              Test changes with small datasets first.\n            </p>\n          </div>\n        </div>\n      </BrutalistCard>\n    </div>\n  );\n}"
    },
    {
      "name": "WebScraper.jsx",
      "path": "src/pages/WebScraper.jsx",
      "extension": "jsx",
      "language": "javascript",
      "size": 14048,
      "content": "import React, { useState, useEffect } from \"react\";\nimport { ScrapedContent } from \"@/api/entities\";\nimport { InvokeLLM } from \"@/api/integrations\";\nimport { Globe, Plus, Loader2, CheckCircle, XCircle, ExternalLink, Trash2 } from \"lucide-react\";\nimport BrutalistCard from \"../components/BrutalistCard\";\nimport BrutalistButton from \"../components/BrutalistButton\";\n\nexport default function WebScraper() {\n  const [url, setUrl] = useState(\"\");\n  const [urls, setUrls] = useState([]);\n  const [scraping, setScraping] = useState(false);\n  const [scrapedContent, setScrapedContent] = useState([]);\n  const [processingQueue, setProcessingQueue] = useState([]);\n  const [results, setResults] = useState([]);\n\n  useEffect(() => {\n    loadScrapedContent();\n  }, []);\n\n  const loadScrapedContent = async () => {\n    try {\n      const content = await ScrapedContent.list(\"-created_date\");\n      setScrapedContent(content);\n    } catch (error) {\n      console.error(\"Error loading scraped content:\", error);\n    }\n  };\n\n  const addUrl = () => {\n    if (url.trim() && !urls.includes(url.trim())) {\n      setUrls(prev => [...prev, url.trim()]);\n      setUrl(\"\");\n    }\n  };\n\n  const removeUrl = (indexToRemove) => {\n    setUrls(prev => prev.filter((_, index) => index !== indexToRemove));\n  };\n\n  const startScraping = async () => {\n    if (urls.length === 0) return;\n\n    setScraping(true);\n    const scrapeResults = [];\n\n    // Add URLs to processing queue\n    const queueItems = urls.map(url => ({\n      url,\n      status: \"processing\",\n      timestamp: new Date().toLocaleTimeString()\n    }));\n    setProcessingQueue(queueItems);\n\n    for (let i = 0; i < urls.length; i++) {\n      const currentUrl = urls[i];\n      \n      try {\n        // Simulate web scraping with AI\n        const scrapingResult = await InvokeLLM({\n          prompt: `Simulate web scraping for the URL: ${currentUrl}\n\nPlease generate realistic scraped content as if you visited this URL. Provide:\n1. A realistic title for the page\n2. Main content (500-1000 words) related to Python development, tutorials, or documentation\n3. Determine the content type (article, documentation, tutorial, forum_post, blog, reference)\n4. Generate relevant tags (5-8 tags)\n5. Create a brief summary (2-3 sentences)\n\nMake the content educational and relevant to Python developers.`,\n          response_json_schema: {\n            type: \"object\",\n            properties: {\n              title: { type: \"string\" },\n              content: { type: \"string\" },\n              content_type: { type: \"string\" },\n              tags: { type: \"array\", items: { type: \"string\" } },\n              summary: { type: \"string\" },\n              word_count: { type: \"number\" }\n            }\n          }\n        });\n\n        // Create scraped content record\n        const scrapedRecord = await ScrapedContent.create({\n          source_url: currentUrl,\n          title: scrapingResult.title,\n          content: scrapingResult.content,\n          content_type: scrapingResult.content_type,\n          domain: new URL(currentUrl).hostname,\n          scrape_status: \"completed\",\n          word_count: scrapingResult.word_count,\n          summary: scrapingResult.summary,\n          tags: scrapingResult.tags,\n          scraped_at: new Date().toISOString()\n        });\n\n        scrapeResults.push({\n          url: currentUrl,\n          status: \"success\",\n          record: scrapedRecord\n        });\n\n        // Update queue status\n        setProcessingQueue(prev => \n          prev.map(item => \n            item.url === currentUrl \n              ? { ...item, status: \"completed\" }\n              : item\n          )\n        );\n\n      } catch (error) {\n        console.error(`Error scraping ${currentUrl}:`, error);\n        scrapeResults.push({\n          url: currentUrl,\n          status: \"error\",\n          error: error.message\n        });\n\n        setProcessingQueue(prev => \n          prev.map(item => \n            item.url === currentUrl \n              ? { ...item, status: \"failed\" }\n              : item\n          )\n        );\n      }\n    }\n\n    setResults(scrapeResults);\n    setScraping(false);\n    setUrls([]);\n    loadScrapedContent();\n  };\n\n  const clearQueue = () => {\n    setUrls([]);\n    setProcessingQueue([]);\n    setResults([]);\n  };\n\n  return (\n    <div className=\"space-y-8\">\n      {/* Header */}\n      <div className=\"text-center mb-12\">\n        <h1 className=\"text-5xl font-black text-black uppercase tracking-tight mb-4\">\n          WEB SCRAPER\n        </h1>\n        <div className=\"bg-pink-500 border-4 border-black brutalist-shadow p-4 inline-block\">\n          <p className=\"font-black text-xl text-white uppercase tracking-wider\">\n            HARVEST THE WEB FOR KNOWLEDGE\n          </p>\n        </div>\n      </div>\n\n      {/* URL Input */}\n      <BrutalistCard>\n        <h3 className=\"text-xl font-black uppercase tracking-wider mb-6\">\n          ADD URLs TO SCRAPE\n        </h3>\n        \n        <div className=\"flex gap-4 mb-6\">\n          <input\n            type=\"url\"\n            placeholder=\"HTTPS://EXAMPLE.COM...\"\n            value={url}\n            onChange={(e) => setUrl(e.target.value)}\n            onKeyPress={(e) => e.key === 'Enter' && addUrl()}\n            className=\"brutalist-input flex-1 py-3 text-black font-black uppercase placeholder-gray-500\"\n          />\n          <BrutalistButton onClick={addUrl} variant=\"primary\">\n            <Plus className=\"w-4 h-4 mr-2\" />\n            ADD URL\n          </BrutalistButton>\n        </div>\n\n        {/* URL Queue */}\n        {urls.length > 0 && (\n          <div className=\"space-y-4\">\n            <div className=\"flex justify-between items-center\">\n              <p className=\"font-black text-sm uppercase\">\n                QUEUED URLS ({urls.length})\n              </p>\n              <div className=\"flex gap-2\">\n                <BrutalistButton onClick={clearQueue} variant=\"outline\" size=\"small\">\n                  CLEAR ALL\n                </BrutalistButton>\n                <BrutalistButton \n                  onClick={startScraping} \n                  disabled={scraping}\n                  variant=\"success\"\n                >\n                  {scraping ? (\n                    <>\n                      <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                      SCRAPING...\n                    </>\n                  ) : (\n                    `SCRAPE ${urls.length} URLS`\n                  )}\n                </BrutalistButton>\n              </div>\n            </div>\n\n            <div className=\"space-y-3\">\n              {urls.map((urlItem, index) => (\n                <div\n                  key={index}\n                  className=\"bg-gray-100 border-4 border-black p-4 flex items-center justify-between\"\n                >\n                  <div className=\"flex items-center space-x-4\">\n                    <Globe className=\"w-5 h-5 text-black\" />\n                    <div>\n                      <p className=\"font-black text-sm break-all\">{urlItem}</p>\n                      <p className=\"font-bold text-xs text-gray-600\">\n                        {new URL(urlItem).hostname}\n                      </p>\n                    </div>\n                  </div>\n                  <BrutalistButton\n                    onClick={() => removeUrl(index)}\n                    variant=\"danger\"\n                    size=\"small\"\n                  >\n                    <Trash2 className=\"w-4 h-4\" />\n                  </BrutalistButton>\n                </div>\n              ))}\n            </div>\n          </div>\n        )}\n      </BrutalistCard>\n\n      {/* Processing Queue */}\n      {processingQueue.length > 0 && (\n        <BrutalistCard color=\"yellow\">\n          <h3 className=\"text-xl font-black uppercase tracking-wider mb-6\">\n            SCRAPING IN PROGRESS\n          </h3>\n          \n          <div className=\"space-y-4\">\n            {processingQueue.map((item, index) => (\n              <div\n                key={index}\n                className={`\n                  border-4 border-black p-4 flex items-center justify-between\n                  ${item.status === 'processing' ? 'bg-blue-100' : ''}\n                  ${item.status === 'completed' ? 'bg-green-100' : ''}\n                  ${item.status === 'failed' ? 'bg-red-100' : ''}\n                `}\n              >\n                <div className=\"flex items-center space-x-4\">\n                  {item.status === 'processing' && <Loader2 className=\"w-5 h-5 animate-spin text-blue-500\" />}\n                  {item.status === 'completed' && <CheckCircle className=\"w-5 h-5 text-green-500\" />}\n                  {item.status === 'failed' && <XCircle className=\"w-5 h-5 text-red-500\" />}\n                  \n                  <div>\n                    <p className=\"font-black text-sm break-all\">{item.url}</p>\n                    <p className=\"font-bold text-xs text-gray-600\">\n                      {item.timestamp}\n                    </p>\n                  </div>\n                </div>\n                \n                <div className={`\n                  px-3 py-1 border-2 border-black font-black text-xs uppercase\n                  ${item.status === 'processing' ? 'bg-blue-500 text-white' : ''}\n                  ${item.status === 'completed' ? 'bg-green-500 text-white' : ''}\n                  ${item.status === 'failed' ? 'bg-red-500 text-white' : ''}\n                `}>\n                  {item.status}\n                </div>\n              </div>\n            ))}\n          </div>\n        </BrutalistCard>\n      )}\n\n      {/* Results */}\n      {results.length > 0 && (\n        <BrutalistCard>\n          <h3 className=\"text-xl font-black uppercase tracking-wider mb-6\">\n            SCRAPING RESULTS\n          </h3>\n          \n          <div className=\"space-y-4\">\n            {results.map((result, index) => (\n              <div\n                key={index}\n                className={`\n                  border-4 border-black p-4\n                  ${result.status === 'success' ? 'bg-green-100' : 'bg-red-100'}\n                `}\n              >\n                <div className=\"flex items-center justify-between mb-3\">\n                  <div className=\"flex items-center space-x-4\">\n                    {result.status === 'success' ? (\n                      <CheckCircle className=\"w-6 h-6 text-green-500\" />\n                    ) : (\n                      <XCircle className=\"w-6 h-6 text-red-500\" />\n                    )}\n                    <div>\n                      <p className=\"font-black text-sm break-all\">{result.url}</p>\n                      <p className=\"font-bold text-xs text-gray-600\">\n                        Status: {result.status.toUpperCase()}\n                      </p>\n                    </div>\n                  </div>\n                  \n                  {result.status === 'success' && (\n                    <a\n                      href={result.url}\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                      className=\"bg-blue-500 text-white p-2 border-2 border-black hover:bg-blue-400\"\n                    >\n                      <ExternalLink className=\"w-4 h-4\" />\n                    </a>\n                  )}\n                </div>\n                \n                {result.status === 'success' && result.record && (\n                  <div className=\"bg-white border-2 border-black p-3\">\n                    <p className=\"font-black text-sm uppercase mb-2\">\n                      {result.record.title}\n                    </p>\n                    <p className=\"font-bold text-xs text-gray-600 mb-2\">\n                      {result.record.content_type.toUpperCase()} • {result.record.word_count} WORDS\n                    </p>\n                    <p className=\"font-bold text-sm text-gray-800\">\n                      {result.record.summary}\n                    </p>\n                  </div>\n                )}\n                \n                {result.status === 'error' && (\n                  <div className=\"bg-white border-2 border-black p-3\">\n                    <p className=\"font-bold text-sm text-red-600\">\n                      ERROR: {result.error}\n                    </p>\n                  </div>\n                )}\n              </div>\n            ))}\n          </div>\n        </BrutalistCard>\n      )}\n\n      {/* Scraped Content History */}\n      <BrutalistCard>\n        <h3 className=\"text-xl font-black uppercase tracking-wider mb-6\">\n          SCRAPED CONTENT HISTORY ({scrapedContent.length})\n        </h3>\n        \n        <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-4\">\n          {scrapedContent.slice(0, 6).map((item) => (\n            <div\n              key={item.id}\n              className=\"bg-gray-100 border-4 border-black p-4\"\n            >\n              <div className=\"flex items-start justify-between mb-3\">\n                <div>\n                  <p className=\"font-black text-sm uppercase line-clamp-2\">\n                    {item.title}\n                  </p>\n                  <p className=\"font-bold text-xs text-gray-600 mt-1\">\n                    {item.domain} • {item.word_count} WORDS\n                  </p>\n                </div>\n                <a\n                  href={item.source_url}\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                  className=\"bg-blue-500 text-white p-1 border-2 border-black hover:bg-blue-400\"\n                >\n                  <ExternalLink className=\"w-3 h-3\" />\n                </a>\n              </div>\n              \n              {item.tags && (\n                <div className=\"flex flex-wrap gap-1 mt-2\">\n                  {item.tags.slice(0, 2).map((tag, index) => (\n                    <span\n                      key={index}\n                      className=\"bg-pink-500 text-white px-2 py-1 border-1 border-black font-black text-xs uppercase\"\n                    >\n                      {tag}\n                    </span>\n                  ))}\n                </div>\n              )}\n            </div>\n          ))}\n        </div>\n      </BrutalistCard>\n    </div>\n  );\n}"
    },
    {
      "name": "Upload.jsx",
      "path": "src/pages/Upload.jsx",
      "extension": "jsx",
      "language": "javascript",
      "size": 10033,
      "content": "import React, { useState, useCallback } from \"react\";\nimport { Document } from \"@/api/entities\";\nimport { UploadFile, ExtractDataFromUploadedFile, InvokeLLM } from \"@/api/integrations\";\nimport { Upload, FileText, AlertCircle, CheckCircle, Loader2 } from \"lucide-react\";\nimport BrutalistCard from \"../components/BrutalistCard\";\nimport BrutalistButton from \"../components/BrutalistButton\";\n\nexport default function UploadPage() {\n  const [dragActive, setDragActive] = useState(false);\n  const [files, setFiles] = useState([]);\n  const [processing, setProcessing] = useState(false);\n  const [results, setResults] = useState([]);\n\n  const handleDrag = useCallback((e) => {\n    e.preventDefault();\n    e.stopPropagation();\n    if (e.type === \"dragenter\" || e.type === \"dragover\") {\n      setDragActive(true);\n    } else if (e.type === \"dragleave\") {\n      setDragActive(false);\n    }\n  }, []);\n\n  const handleDrop = useCallback((e) => {\n    e.preventDefault();\n    e.stopPropagation();\n    setDragActive(false);\n    \n    const droppedFiles = Array.from(e.dataTransfer.files);\n    addFiles(droppedFiles);\n  }, []);\n\n  const handleFileInput = (e) => {\n    const selectedFiles = Array.from(e.target.files);\n    addFiles(selectedFiles);\n  };\n\n  const addFiles = (newFiles) => {\n    const validFiles = newFiles.filter(file => \n      file.type === \"application/pdf\" || \n      file.type === \"text/plain\" || \n      file.name.endsWith('.py') ||\n      file.name.endsWith('.md') ||\n      file.name.endsWith('.rst')\n    );\n    setFiles(prev => [...prev, ...validFiles]);\n  };\n\n  const removeFile = (index) => {\n    setFiles(prev => prev.filter((_, i) => i !== index));\n  };\n\n  const processFiles = async () => {\n    if (files.length === 0) return;\n\n    setProcessing(true);\n    const processedResults = [];\n\n    for (const file of files) {\n      try {\n        // Upload file\n        const { file_url } = await UploadFile({ file });\n        \n        // Extract content\n        let content = \"\";\n        if (file.type === \"application/pdf\") {\n          const extractResult = await ExtractDataFromUploadedFile({\n            file_url,\n            json_schema: {\n              type: \"object\",\n              properties: {\n                content: { type: \"string\" }\n              }\n            }\n          });\n          \n          if (extractResult.status === \"success\") {\n            content = extractResult.output.content;\n          }\n        } else {\n          // For text files, we'll read them directly\n          content = await file.text();\n        }\n\n        // Generate summary and tags using AI\n        const aiResult = await InvokeLLM({\n          prompt: `Analyze this content and provide a summary and relevant tags for a Python knowledge base:\n\nContent: ${content.substring(0, 2000)}...\n\nPlease provide:\n1. A concise summary (2-3 sentences)\n2. Relevant tags (5-8 tags related to Python, programming concepts, libraries, etc.)`,\n          response_json_schema: {\n            type: \"object\",\n            properties: {\n              summary: { type: \"string\" },\n              tags: { type: \"array\", items: { type: \"string\" } }\n            }\n          }\n        });\n\n        // Create document\n        const document = await Document.create({\n          title: file.name,\n          content: content,\n          file_type: getFileType(file),\n          file_url: file_url,\n          summary: aiResult.summary,\n          tags: aiResult.tags,\n          category: inferCategory(file.name),\n          word_count: content.split(' ').length,\n          processing_status: \"completed\",\n          indexed_at: new Date().toISOString()\n        });\n\n        processedResults.push({\n          file: file.name,\n          status: \"success\",\n          document: document,\n          summary: aiResult.summary\n        });\n\n      } catch (error) {\n        console.error(`Error processing ${file.name}:`, error);\n        processedResults.push({\n          file: file.name,\n          status: \"error\",\n          error: error.message\n        });\n      }\n    }\n\n    setResults(processedResults);\n    setProcessing(false);\n    setFiles([]);\n  };\n\n  const getFileType = (file) => {\n    if (file.type === \"application/pdf\") return \"pdf\";\n    if (file.name.endsWith('.py')) return \"py\";\n    if (file.name.endsWith('.md')) return \"md\";\n    if (file.name.endsWith('.rst')) return \"rst\";\n    return \"txt\";\n  };\n\n  const inferCategory = (filename) => {\n    const name = filename.toLowerCase();\n    if (name.includes('tutorial') || name.includes('guide')) return \"tutorial\";\n    if (name.includes('doc') || name.includes('reference')) return \"documentation\";\n    if (name.endsWith('.py')) return \"code\";\n    return \"other\";\n  };\n\n  return (\n    <div className=\"space-y-8\">\n      {/* Header */}\n      <div className=\"text-center mb-12\">\n        <h1 className=\"text-5xl font-black text-black uppercase tracking-tight mb-4\">\n          DOCUMENT UPLOAD CENTER\n        </h1>\n        <div className=\"bg-blue-500 border-4 border-black brutalist-shadow p-4 inline-block\">\n          <p className=\"font-black text-xl text-white uppercase tracking-wider\">\n            FEED THE KNOWLEDGE BASE\n          </p>\n        </div>\n      </div>\n\n      {/* Upload Zone */}\n      <BrutalistCard color={dragActive ? \"yellow\" : \"white\"}>\n        <div\n          onDragEnter={handleDrag}\n          onDragLeave={handleDrag}\n          onDragOver={handleDrag}\n          onDrop={handleDrop}\n          className={`\n            border-4 border-dashed border-black p-12 text-center transition-all duration-200\n            ${dragActive ? 'bg-yellow-100' : 'bg-white'}\n          `}\n        >\n          <Upload className=\"w-16 h-16 text-black mx-auto mb-6\" />\n          <h3 className=\"text-2xl font-black text-black uppercase mb-4\">\n            DROP FILES HERE OR CLICK TO BROWSE\n          </h3>\n          <p className=\"text-lg font-bold text-gray-600 mb-6\">\n            Supported: PDF, TXT, PY, MD, RST\n          </p>\n          \n          <input\n            type=\"file\"\n            multiple\n            accept=\".pdf,.txt,.py,.md,.rst\"\n            onChange={handleFileInput}\n            className=\"hidden\"\n            id=\"file-input\"\n          />\n          \n          <label htmlFor=\"file-input\">\n            <BrutalistButton variant=\"primary\" size=\"large\">\n              CHOOSE FILES\n            </BrutalistButton>\n          </label>\n        </div>\n      </BrutalistCard>\n\n      {/* File List */}\n      {files.length > 0 && (\n        <BrutalistCard>\n          <div className=\"flex items-center justify-between mb-6\">\n            <h3 className=\"text-xl font-black uppercase tracking-wider\">\n              READY TO PROCESS\n            </h3>\n            <BrutalistButton \n              onClick={processFiles}\n              disabled={processing}\n              variant=\"success\"\n            >\n              {processing ? (\n                <>\n                  <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                  PROCESSING...\n                </>\n              ) : (\n                `PROCESS ${files.length} FILES`\n              )}\n            </BrutalistButton>\n          </div>\n\n          <div className=\"space-y-4\">\n            {files.map((file, index) => (\n              <div\n                key={index}\n                className=\"bg-gray-100 border-4 border-black p-4 flex items-center justify-between\"\n              >\n                <div className=\"flex items-center space-x-4\">\n                  <FileText className=\"w-6 h-6 text-black\" />\n                  <div>\n                    <p className=\"font-black text-sm uppercase\">{file.name}</p>\n                    <p className=\"font-bold text-xs text-gray-600\">\n                      {(file.size / 1024 / 1024).toFixed(2)} MB • {getFileType(file)}\n                    </p>\n                  </div>\n                </div>\n                <BrutalistButton\n                  variant=\"danger\"\n                  size=\"small\"\n                  onClick={() => removeFile(index)}\n                >\n                  REMOVE\n                </BrutalistButton>\n              </div>\n            ))}\n          </div>\n        </BrutalistCard>\n      )}\n\n      {/* Results */}\n      {results.length > 0 && (\n        <BrutalistCard>\n          <h3 className=\"text-xl font-black uppercase tracking-wider mb-6\">\n            PROCESSING RESULTS\n          </h3>\n          \n          <div className=\"space-y-4\">\n            {results.map((result, index) => (\n              <div\n                key={index}\n                className={`\n                  border-4 border-black p-4\n                  ${result.status === 'success' ? 'bg-green-100' : 'bg-red-100'}\n                `}\n              >\n                <div className=\"flex items-center space-x-4 mb-3\">\n                  {result.status === 'success' ? (\n                    <CheckCircle className=\"w-6 h-6 text-green-500\" />\n                  ) : (\n                    <AlertCircle className=\"w-6 h-6 text-red-500\" />\n                  )}\n                  <div>\n                    <p className=\"font-black text-sm uppercase\">{result.file}</p>\n                    <p className=\"font-bold text-xs text-gray-600\">\n                      Status: {result.status.toUpperCase()}\n                    </p>\n                  </div>\n                </div>\n                \n                {result.status === 'success' && result.summary && (\n                  <div className=\"bg-white border-2 border-black p-3 mt-3\">\n                    <p className=\"font-bold text-sm text-gray-800\">\n                      AI SUMMARY: {result.summary}\n                    </p>\n                  </div>\n                )}\n                \n                {result.status === 'error' && (\n                  <div className=\"bg-white border-2 border-black p-3 mt-3\">\n                    <p className=\"font-bold text-sm text-red-600\">\n                      ERROR: {result.error}\n                    </p>\n                  </div>\n                )}\n              </div>\n            ))}\n          </div>\n        </BrutalistCard>\n      )}\n    </div>\n  );\n}"
    },
    {
      "name": "Dashboard.jsx",
      "path": "src/pages/Dashboard.jsx",
      "extension": "jsx",
      "language": "javascript",
      "size": 7746,
      "content": "import React, { useState, useEffect } from \"react\";\nimport { Document, SearchQuery, ScrapedContent, Report } from \"@/api/entities\";\nimport { \n  FileText, \n  Search, \n  Globe, \n  TrendingUp, \n  Zap, \n  Database,\n  Clock,\n  CheckCircle\n} from \"lucide-react\";\nimport BrutalistCard from \"../components/BrutalistCard\";\nimport ProcessingQueue from \"../components/ProcessingQueue\";\n\nexport default function Dashboard() {\n  const [stats, setStats] = useState({\n    totalDocuments: 0,\n    totalSearches: 0,\n    totalScraped: 0,\n    totalReports: 0\n  });\n  const [recentActivity, setRecentActivity] = useState([]);\n  const [processingQueue, setProcessingQueue] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    loadDashboardData();\n  }, []);\n\n  const loadDashboardData = async () => {\n    try {\n      const [documents, searches, scraped, reports] = await Promise.all([\n        Document.list(),\n        SearchQuery.list(),\n        ScrapedContent.list(),\n        Report.list()\n      ]);\n\n      setStats({\n        totalDocuments: documents.length,\n        totalSearches: searches.length,\n        totalScraped: scraped.length,\n        totalReports: reports.length\n      });\n\n      // Mock recent activity\n      const mockActivity = [\n        { name: \"python-tutorial.pdf\", type: \"Document Upload\", status: \"completed\", timestamp: \"2 min ago\" },\n        { name: \"django-docs scraping\", type: \"Web Scraping\", status: \"processing\", timestamp: \"5 min ago\", progress: 65 },\n        { name: \"Weekly Analytics Report\", type: \"Report Generation\", status: \"completed\", timestamp: \"1 hour ago\" },\n        { name: \"machine-learning-guide.md\", type: \"Document Upload\", status: \"pending\", timestamp: \"3 hours ago\" }\n      ];\n\n      setRecentActivity(mockActivity);\n      setProcessingQueue(mockActivity.filter(item => item.status === \"processing\" || item.status === \"pending\"));\n      \n    } catch (error) {\n      console.error(\"Error loading dashboard data:\", error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const StatCard = ({ title, value, icon: Icon, color }) => (\n    <BrutalistCard color={color} hover>\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <p className=\"font-black text-2xl text-black mb-1\">{value}</p>\n          <p className=\"font-bold text-sm text-black uppercase tracking-wider\">\n            {title}\n          </p>\n        </div>\n        <div className=\"bg-black p-3 border-2 border-black\">\n          <Icon className=\"w-6 h-6 text-white\" />\n        </div>\n      </div>\n    </BrutalistCard>\n  );\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-8\">\n        <div className=\"text-center\">\n          <h1 className=\"text-4xl font-black text-black uppercase tracking-tight mb-4\">\n            LOADING DASHBOARD...\n          </h1>\n          <div className=\"bg-blue-500 border-4 border-black brutalist-shadow p-8 inline-block\">\n            <Zap className=\"w-12 h-12 text-white animate-pulse\" />\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-8\">\n      {/* Header */}\n      <div className=\"text-center mb-12\">\n        <h1 className=\"text-5xl font-black text-black uppercase tracking-tight mb-4\">\n          SYSTEM DASHBOARD\n        </h1>\n        <div className=\"bg-yellow-400 border-4 border-black brutalist-shadow p-4 inline-block\">\n          <p className=\"font-black text-xl text-black uppercase tracking-wider\">\n            MONITORING ALL SYSTEMS\n          </p>\n        </div>\n      </div>\n\n      {/* Stats Grid */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n        <StatCard\n          title=\"Documents\"\n          value={stats.totalDocuments}\n          icon={FileText}\n          color=\"blue\"\n        />\n        <StatCard\n          title=\"Searches\"\n          value={stats.totalSearches}\n          icon={Search}\n          color=\"pink\"\n        />\n        <StatCard\n          title=\"Scraped Pages\"\n          value={stats.totalScraped}\n          icon={Globe}\n          color=\"green\"\n        />\n        <StatCard\n          title=\"Reports\"\n          value={stats.totalReports}\n          icon={TrendingUp}\n          color=\"orange\"\n        />\n      </div>\n\n      {/* Main Content Grid */}\n      <div className=\"grid lg:grid-cols-2 gap-8\">\n        {/* Processing Queue */}\n        <ProcessingQueue items={processingQueue} />\n\n        {/* Recent Activity */}\n        <BrutalistCard>\n          <div className=\"flex items-center justify-between mb-6\">\n            <h3 className=\"text-xl font-black uppercase tracking-wider\">\n              RECENT ACTIVITY\n            </h3>\n            <div className=\"bg-black text-white px-3 py-1 border-2 border-black\">\n              <span className=\"font-black text-sm\">LIVE FEED</span>\n            </div>\n          </div>\n\n          <div className=\"space-y-4 max-h-96 overflow-y-auto\">\n            {recentActivity.map((activity, index) => (\n              <div\n                key={index}\n                className=\"bg-gray-100 border-4 border-black p-4 flex items-center justify-between\"\n              >\n                <div className=\"flex items-center space-x-4\">\n                  {activity.status === 'completed' ? (\n                    <CheckCircle className=\"w-6 h-6 text-green-500\" />\n                  ) : activity.status === 'processing' ? (\n                    <Zap className=\"w-6 h-6 text-blue-500 animate-pulse\" />\n                  ) : (\n                    <Clock className=\"w-6 h-6 text-gray-500\" />\n                  )}\n                  <div>\n                    <p className=\"font-black text-sm uppercase\">\n                      {activity.name}\n                    </p>\n                    <p className=\"font-bold text-xs text-gray-600 mt-1\">\n                      {activity.type} • {activity.timestamp}\n                    </p>\n                  </div>\n                </div>\n                <div className={`\n                  px-3 py-1 border-2 border-black font-black text-xs uppercase\n                  ${activity.status === 'completed' ? 'bg-green-500 text-white' : ''}\n                  ${activity.status === 'processing' ? 'bg-blue-500 text-white' : ''}\n                  ${activity.status === 'pending' ? 'bg-gray-500 text-white' : ''}\n                `}>\n                  {activity.status}\n                </div>\n              </div>\n            ))}\n          </div>\n        </BrutalistCard>\n      </div>\n\n      {/* System Status */}\n      <div className=\"grid md:grid-cols-3 gap-6\">\n        <BrutalistCard color=\"green\">\n          <div className=\"text-center\">\n            <Database className=\"w-8 h-8 text-black mx-auto mb-3\" />\n            <p className=\"font-black text-lg text-black uppercase\">\n              DATABASE\n            </p>\n            <p className=\"font-bold text-sm text-black mt-1\">\n              OPERATIONAL\n            </p>\n          </div>\n        </BrutalistCard>\n\n        <BrutalistCard color=\"blue\">\n          <div className=\"text-center\">\n            <Zap className=\"w-8 h-8 text-black mx-auto mb-3\" />\n            <p className=\"font-black text-lg text-black uppercase\">\n              AI PROCESSING\n            </p>\n            <p className=\"font-bold text-sm text-black mt-1\">\n              ACTIVE\n            </p>\n          </div>\n        </BrutalistCard>\n\n        <BrutalistCard color=\"pink\">\n          <div className=\"text-center\">\n            <TrendingUp className=\"w-8 h-8 text-black mx-auto mb-3\" />\n            <p className=\"font-black text-lg text-black uppercase\">\n              SEARCH ENGINE\n            </p>\n            <p className=\"font-bold text-sm text-black mt-1\">\n              READY\n            </p>\n          </div>\n        </BrutalistCard>\n      </div>\n    </div>\n  );\n}"
    },
    {
      "name": "Search.jsx",
      "path": "src/pages/Search.jsx",
      "extension": "jsx",
      "language": "javascript",
      "size": 16195,
      "content": "import React, { useState, useEffect } from \"react\";\nimport { Document, SearchQuery, ScrapedContent } from \"@/api/entities\";\nimport { InvokeLLM } from \"@/api/integrations\";\nimport { Search as SearchIcon, Filter, Clock, Star, ExternalLink, FileText, Globe } from \"lucide-react\";\nimport BrutalistCard from \"../components/BrutalistCard\";\nimport BrutalistButton from \"../components/BrutalistButton\";\n\nexport default function Search() {\n  const [query, setQuery] = useState(\"\");\n  const [searchType, setSearchType] = useState(\"hybrid\");\n  const [results, setResults] = useState([]);\n  const [searching, setSearching] = useState(false);\n  const [searchHistory, setSearchHistory] = useState([]);\n  const [filters, setFilters] = useState({\n    type: \"all\", // all, document, scraped\n    category: \"all\",\n    dateRange: \"all\"\n  });\n  const [executionTime, setExecutionTime] = useState(0);\n\n  useEffect(() => {\n    loadSearchHistory();\n  }, []);\n\n  const loadSearchHistory = async () => {\n    try {\n      const history = await SearchQuery.list(\"-created_date\", 5);\n      setSearchHistory(history);\n    } catch (error) {\n      console.error(\"Error loading search history:\", error);\n    }\n  };\n\n  const performSearch = async () => {\n    if (!query.trim()) return;\n\n    setSearching(true);\n    const startTime = Date.now();\n\n    try {\n      let searchResults = [];\n\n      if (searchType === \"keyword\" || searchType === \"hybrid\") {\n        // Keyword search\n        const [documents, scrapedContent] = await Promise.all([\n          Document.list(),\n          ScrapedContent.list()\n        ]);\n\n        const allContent = [\n          ...documents.map(doc => ({ ...doc, source_type: 'document' })),\n          ...scrapedContent.map(content => ({ ...content, source_type: 'scraped' }))\n        ];\n\n        const keywordResults = allContent.filter(item => {\n          const searchText = query.toLowerCase();\n          const title = (item.title || '').toLowerCase();\n          const content = (item.content || '').toLowerCase();\n          const summary = (item.summary || '').toLowerCase();\n          const tags = (item.tags || []).join(' ').toLowerCase();\n\n          return title.includes(searchText) || \n                 content.includes(searchText) || \n                 summary.includes(searchText) ||\n                 tags.includes(searchText);\n        });\n\n        searchResults = [...keywordResults];\n      }\n\n      if (searchType === \"semantic\" || searchType === \"hybrid\") {\n        // Semantic search using AI\n        const semanticResult = await InvokeLLM({\n          prompt: `Perform a semantic search for the query: \"${query}\"\n\nBased on this query, generate 3-5 relevant search results that would match semantically. Each result should have:\n- title: A relevant document/article title\n- content_excerpt: A short excerpt (100-200 words)\n- source_type: Either \"document\" or \"scraped\"\n- relevance_score: A score from 0-100\n- tags: Array of relevant tags\n- summary: Brief summary explaining why this is relevant\n\nFocus on Python-related content, tutorials, documentation, and programming concepts.`,\n          response_json_schema: {\n            type: \"object\",\n            properties: {\n              results: {\n                type: \"array\",\n                items: {\n                  type: \"object\",\n                  properties: {\n                    title: { type: \"string\" },\n                    content_excerpt: { type: \"string\" },\n                    source_type: { type: \"string\" },\n                    relevance_score: { type: \"number\" },\n                    tags: { type: \"array\", items: { type: \"string\" } },\n                    summary: { type: \"string\" }\n                  }\n                }\n              }\n            }\n          }\n        });\n\n        const semanticResults = semanticResult.results.map((result, index) => ({\n          id: `semantic-${index}`,\n          title: result.title,\n          content: result.content_excerpt,\n          summary: result.summary,\n          tags: result.tags,\n          source_type: result.source_type,\n          relevance_score: result.relevance_score,\n          is_semantic: true\n        }));\n\n        searchResults = [...searchResults, ...semanticResults];\n      }\n\n      // Apply filters\n      let filteredResults = searchResults;\n\n      if (filters.type !== \"all\") {\n        filteredResults = filteredResults.filter(result => \n          result.source_type === filters.type\n        );\n      }\n\n      if (filters.category !== \"all\") {\n        filteredResults = filteredResults.filter(result => \n          result.category === filters.category\n        );\n      }\n\n      // Sort by relevance (semantic results first, then by creation date)\n      filteredResults.sort((a, b) => {\n        if (a.is_semantic && !b.is_semantic) return -1;\n        if (!a.is_semantic && b.is_semantic) return 1;\n        if (a.relevance_score && b.relevance_score) {\n          return b.relevance_score - a.relevance_score;\n        }\n        return new Date(b.created_date || 0) - new Date(a.created_date || 0);\n      });\n\n      setResults(filteredResults);\n\n      const endTime = Date.now();\n      const execTime = endTime - startTime;\n      setExecutionTime(execTime);\n\n      // Save search query\n      await SearchQuery.create({\n        query_text: query,\n        search_type: searchType,\n        results_count: filteredResults.length,\n        execution_time: execTime\n      });\n\n      loadSearchHistory();\n\n    } catch (error) {\n      console.error(\"Search error:\", error);\n    } finally {\n      setSearching(false);\n    }\n  };\n\n  const handleQuickSearch = (historyQuery) => {\n    setQuery(historyQuery.query_text);\n    setSearchType(historyQuery.search_type);\n  };\n\n  return (\n    <div className=\"space-y-8\">\n      {/* Header */}\n      <div className=\"text-center mb-12\">\n        <h1 className=\"text-5xl font-black text-black uppercase tracking-tight mb-4\">\n          SEARCH ENGINE\n        </h1>\n        <div className=\"bg-green-500 border-4 border-black brutalist-shadow p-4 inline-block\">\n          <p className=\"font-black text-xl text-white uppercase tracking-wider\">\n            FIND KNOWLEDGE INSTANTLY\n          </p>\n        </div>\n      </div>\n\n      {/* Search Interface */}\n      <BrutalistCard>\n        <div className=\"space-y-6\">\n          {/* Search Bar */}\n          <div className=\"flex gap-4\">\n            <div className=\"flex-1 relative\">\n              <SearchIcon className=\"absolute left-4 top-1/2 transform -translate-y-1/2 w-5 h-5 text-black\" />\n              <input\n                type=\"text\"\n                placeholder=\"SEARCH THE KNOWLEDGE BASE...\"\n                value={query}\n                onChange={(e) => setQuery(e.target.value)}\n                onKeyPress={(e) => e.key === 'Enter' && performSearch()}\n                className=\"brutalist-input w-full pl-12 pr-4 py-4 text-black font-black uppercase placeholder-gray-500 text-lg\"\n              />\n            </div>\n            <BrutalistButton\n              onClick={performSearch}\n              disabled={searching || !query.trim()}\n              variant=\"primary\"\n              size=\"large\"\n            >\n              {searching ? (\n                <>\n                  <SearchIcon className=\"w-5 h-5 mr-2 animate-pulse\" />\n                  SEARCHING...\n                </>\n              ) : (\n                <>\n                  <SearchIcon className=\"w-5 h-5 mr-2\" />\n                  SEARCH\n                </>\n              )}\n            </BrutalistButton>\n          </div>\n\n          {/* Search Options */}\n          <div className=\"grid md:grid-cols-4 gap-4\">\n            <div>\n              <label className=\"block font-black text-sm uppercase mb-2\">SEARCH TYPE</label>\n              <select\n                value={searchType}\n                onChange={(e) => setSearchType(e.target.value)}\n                className=\"brutalist-input w-full py-3 text-black font-black uppercase\"\n              >\n                <option value=\"hybrid\">HYBRID (BEST)</option>\n                <option value=\"keyword\">KEYWORD ONLY</option>\n                <option value=\"semantic\">SEMANTIC (AI)</option>\n              </select>\n            </div>\n\n            <div>\n              <label className=\"block font-black text-sm uppercase mb-2\">CONTENT TYPE</label>\n              <select\n                value={filters.type}\n                onChange={(e) => setFilters(prev => ({ ...prev, type: e.target.value }))}\n                className=\"brutalist-input w-full py-3 text-black font-black uppercase\"\n              >\n                <option value=\"all\">ALL CONTENT</option>\n                <option value=\"document\">DOCUMENTS</option>\n                <option value=\"scraped\">SCRAPED PAGES</option>\n              </select>\n            </div>\n\n            <div>\n              <label className=\"block font-black text-sm uppercase mb-2\">CATEGORY</label>\n              <select\n                value={filters.category}\n                onChange={(e) => setFilters(prev => ({ ...prev, category: e.target.value }))}\n                className=\"brutalist-input w-full py-3 text-black font-black uppercase\"\n              >\n                <option value=\"all\">ALL CATEGORIES</option>\n                <option value=\"tutorial\">TUTORIALS</option>\n                <option value=\"documentation\">DOCS</option>\n                <option value=\"code\">CODE</option>\n                <option value=\"article\">ARTICLES</option>\n              </select>\n            </div>\n\n            <div>\n              <label className=\"block font-black text-sm uppercase mb-2\">DATE RANGE</label>\n              <select\n                value={filters.dateRange}\n                onChange={(e) => setFilters(prev => ({ ...prev, dateRange: e.target.value }))}\n                className=\"brutalist-input w-full py-3 text-black font-black uppercase\"\n              >\n                <option value=\"all\">ALL TIME</option>\n                <option value=\"today\">TODAY</option>\n                <option value=\"week\">THIS WEEK</option>\n                <option value=\"month\">THIS MONTH</option>\n              </select>\n            </div>\n          </div>\n        </div>\n      </BrutalistCard>\n\n      {/* Search Results */}\n      {results.length > 0 && (\n        <BrutalistCard>\n          <div className=\"flex justify-between items-center mb-6\">\n            <h3 className=\"text-xl font-black uppercase tracking-wider\">\n              SEARCH RESULTS ({results.length})\n            </h3>\n            <div className=\"bg-yellow-400 border-2 border-black px-3 py-1\">\n              <span className=\"font-black text-sm text-black\">\n                {executionTime}MS\n              </span>\n            </div>\n          </div>\n\n          <div className=\"space-y-6\">\n            {results.map((result, index) => (\n              <div\n                key={result.id || index}\n                className={`\n                  border-4 border-black p-6\n                  ${result.is_semantic ? 'bg-blue-50' : 'bg-white'}\n                  hover:translate-x-[-2px] hover:translate-y-[-2px] hover:shadow-[6px_6px_0px_#000000] transition-all duration-100\n                `}\n              >\n                <div className=\"flex justify-between items-start mb-4\">\n                  <div className=\"flex items-center space-x-3\">\n                    {result.source_type === 'document' ? (\n                      <FileText className=\"w-6 h-6 text-blue-500\" />\n                    ) : (\n                      <Globe className=\"w-6 h-6 text-green-500\" />\n                    )}\n                    <div>\n                      <h4 className=\"font-black text-lg uppercase line-clamp-2\">\n                        {result.title}\n                      </h4>\n                      <div className=\"flex items-center space-x-4 mt-1\">\n                        <span className={`\n                          px-2 py-1 border-2 border-black font-black text-xs uppercase\n                          ${result.source_type === 'document' ? 'bg-blue-500 text-white' : 'bg-green-500 text-white'}\n                        `}>\n                          {result.source_type}\n                        </span>\n                        {result.is_semantic && (\n                          <span className=\"bg-pink-500 text-white px-2 py-1 border-2 border-black font-black text-xs uppercase\">\n                            AI SEMANTIC\n                          </span>\n                        )}\n                        {result.relevance_score && (\n                          <div className=\"flex items-center space-x-1\">\n                            <Star className=\"w-4 h-4 text-yellow-500\" />\n                            <span className=\"font-black text-sm\">{result.relevance_score}%</span>\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                  </div>\n                  \n                  {result.source_url && (\n                    <a\n                      href={result.source_url}\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                      className=\"bg-orange-500 text-white p-2 border-2 border-black hover:bg-orange-400\"\n                    >\n                      <ExternalLink className=\"w-4 h-4\" />\n                    </a>\n                  )}\n                </div>\n\n                {result.summary && (\n                  <div className=\"bg-gray-100 border-2 border-black p-3 mb-4\">\n                    <p className=\"font-bold text-sm text-gray-800\">{result.summary}</p>\n                  </div>\n                )}\n\n                <div className=\"text-sm font-mono text-gray-700 mb-4 line-clamp-3\">\n                  {result.content?.substring(0, 300)}...\n                </div>\n\n                {result.tags && result.tags.length > 0 && (\n                  <div className=\"flex flex-wrap gap-2\">\n                    {result.tags.slice(0, 5).map((tag, tagIndex) => (\n                      <span\n                        key={tagIndex}\n                        className=\"bg-gray-500 text-white px-2 py-1 border-1 border-black font-black text-xs uppercase\"\n                      >\n                        {tag}\n                      </span>\n                    ))}\n                  </div>\n                )}\n              </div>\n            ))}\n          </div>\n        </BrutalistCard>\n      )}\n\n      {/* Search History */}\n      {searchHistory.length > 0 && (\n        <BrutalistCard>\n          <h3 className=\"text-xl font-black uppercase tracking-wider mb-6\">\n            RECENT SEARCHES\n          </h3>\n          \n          <div className=\"space-y-3\">\n            {searchHistory.map((historyItem) => (\n              <div\n                key={historyItem.id}\n                className=\"bg-gray-100 border-4 border-black p-4 flex items-center justify-between cursor-pointer hover:bg-gray-200\"\n                onClick={() => handleQuickSearch(historyItem)}\n              >\n                <div className=\"flex items-center space-x-4\">\n                  <Clock className=\"w-5 h-5 text-gray-500\" />\n                  <div>\n                    <p className=\"font-black text-sm uppercase\">\n                      \"{historyItem.query_text}\"\n                    </p>\n                    <p className=\"font-bold text-xs text-gray-600\">\n                      {historyItem.search_type.toUpperCase()} • {historyItem.results_count} results • {historyItem.execution_time}ms\n                    </p>\n                  </div>\n                </div>\n                <BrutalistButton variant=\"outline\" size=\"small\">\n                  SEARCH AGAIN\n                </BrutalistButton>\n              </div>\n            ))}\n          </div>\n        </BrutalistCard>\n      )}\n\n      {/* No Results */}\n      {!searching && query && results.length === 0 && (\n        <div className=\"text-center py-16\">\n          <div className=\"bg-red-500 border-4 border-black brutalist-shadow p-8 inline-block\">\n            <p className=\"font-black text-xl text-white uppercase mb-2\">\n              NO RESULTS FOUND\n            </p>\n            <p className=\"font-bold text-sm text-white\">\n              TRY DIFFERENT KEYWORDS OR ADD MORE CONTENT\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}"
    },
    {
      "name": "index.jsx",
      "path": "src/pages/index.jsx",
      "extension": "jsx",
      "language": "javascript",
      "size": 2173,
      "content": "import Layout from \"./Layout.jsx\";\n\nimport Dashboard from \"./Dashboard\";\n\nimport Upload from \"./Upload\";\n\nimport KnowledgeBase from \"./KnowledgeBase\";\n\nimport WebScraper from \"./WebScraper\";\n\nimport Search from \"./Search\";\n\nimport Reports from \"./Reports\";\n\nimport Settings from \"./Settings\";\n\nimport { BrowserRouter as Router, Route, Routes, useLocation } from 'react-router-dom';\n\nconst PAGES = {\n    \n    Dashboard: Dashboard,\n    \n    Upload: Upload,\n    \n    KnowledgeBase: KnowledgeBase,\n    \n    WebScraper: WebScraper,\n    \n    Search: Search,\n    \n    Reports: Reports,\n    \n    Settings: Settings,\n    \n}\n\nfunction _getCurrentPage(url) {\n    if (url.endsWith('/')) {\n        url = url.slice(0, -1);\n    }\n    let urlLastPart = url.split('/').pop();\n    if (urlLastPart.includes('?')) {\n        urlLastPart = urlLastPart.split('?')[0];\n    }\n\n    const pageName = Object.keys(PAGES).find(page => page.toLowerCase() === urlLastPart.toLowerCase());\n    return pageName || Object.keys(PAGES)[0];\n}\n\n// Create a wrapper component that uses useLocation inside the Router context\nfunction PagesContent() {\n    const location = useLocation();\n    const currentPage = _getCurrentPage(location.pathname);\n    \n    return (\n        <Layout currentPageName={currentPage}>\n            <Routes>            \n                \n                    <Route path=\"/\" element={<Dashboard />} />\n                \n                \n                <Route path=\"/Dashboard\" element={<Dashboard />} />\n                \n                <Route path=\"/Upload\" element={<Upload />} />\n                \n                <Route path=\"/KnowledgeBase\" element={<KnowledgeBase />} />\n                \n                <Route path=\"/WebScraper\" element={<WebScraper />} />\n                \n                <Route path=\"/Search\" element={<Search />} />\n                \n                <Route path=\"/Reports\" element={<Reports />} />\n                \n                <Route path=\"/Settings\" element={<Settings />} />\n                \n            </Routes>\n        </Layout>\n    );\n}\n\nexport default function Pages() {\n    return (\n        <Router>\n            <PagesContent />\n        </Router>\n    );\n}"
    },
    {
      "name": "BrutalistCard.jsx",
      "path": "src/components/BrutalistCard.jsx",
      "extension": "jsx",
      "language": "javascript",
      "size": 657,
      "content": "import React from \"react\";\n\nexport default function BrutalistCard({ \n  children, \n  className = \"\", \n  color = \"white\",\n  hover = false \n}) {\n  const colorClasses = {\n    white: \"bg-white\",\n    blue: \"bg-blue-500\",\n    pink: \"bg-pink-500\", \n    yellow: \"bg-yellow-400\",\n    green: \"bg-green-500\",\n    orange: \"bg-orange-500\"\n  };\n\n  return (\n    <div \n      className={`\n        brutalist-card brutalist-shadow p-6 \n        ${colorClasses[color]} \n        ${hover ? 'hover:translate-x-[-4px] hover:translate-y-[-4px] hover:shadow-[8px_8px_0px_#000000] transition-all duration-100' : ''}\n        ${className}\n      `}\n    >\n      {children}\n    </div>\n  );\n}"
    },
    {
      "name": "BrutalistButton.jsx",
      "path": "src/components/BrutalistButton.jsx",
      "extension": "jsx",
      "language": "javascript",
      "size": 1252,
      "content": "import React from \"react\";\n\nexport default function BrutalistButton({ \n  children, \n  onClick,\n  variant = \"primary\",\n  size = \"default\",\n  disabled = false,\n  className = \"\",\n  type = \"button\"\n}) {\n  const variants = {\n    primary: \"bg-blue-500 hover:bg-blue-400 text-white\",\n    secondary: \"bg-pink-500 hover:bg-pink-400 text-white\", \n    success: \"bg-green-500 hover:bg-green-400 text-white\",\n    warning: \"bg-orange-500 hover:bg-orange-400 text-white\",\n    danger: \"bg-red-500 hover:bg-red-400 text-white\",\n    outline: \"bg-white hover:bg-gray-100 text-black\"\n  };\n\n  const sizes = {\n    small: \"px-3 py-2 text-xs\",\n    default: \"px-6 py-3 text-sm\",\n    large: \"px-8 py-4 text-lg\"\n  };\n\n  return (\n    <button\n      type={type}\n      onClick={onClick}\n      disabled={disabled}\n      className={`\n        ${variants[variant]}\n        ${sizes[size]}\n        border-4 border-black font-black uppercase tracking-wider\n        brutalist-shadow transition-all duration-100\n        hover:translate-x-[-2px] hover:translate-y-[-2px] hover:shadow-[6px_6px_0px_#000000]\n        disabled:opacity-50 disabled:cursor-not-allowed disabled:hover:translate-x-0 disabled:hover:translate-y-0\n        ${className}\n      `}\n    >\n      {children}\n    </button>\n  );\n}"
    },
    {
      "name": "ProcessingQueue.jsx",
      "path": "src/components/ProcessingQueue.jsx",
      "extension": "jsx",
      "language": "javascript",
      "size": 3573,
      "content": "import React from \"react\";\nimport { Loader2, CheckCircle, XCircle, Clock } from \"lucide-react\";\nimport BrutalistCard from \"./BrutalistCard\";\n\nexport default function ProcessingQueue({ items = [] }) {\n  const getStatusIcon = (status) => {\n    switch (status) {\n      case \"processing\":\n        return <Loader2 className=\"w-6 h-6 animate-spin text-blue-500\" />;\n      case \"completed\":\n        return <CheckCircle className=\"w-6 h-6 text-green-500\" />;\n      case \"failed\":\n        return <XCircle className=\"w-6 h-6 text-red-500\" />;\n      default:\n        return <Clock className=\"w-6 h-6 text-gray-500\" />;\n    }\n  };\n\n  const getStatusColor = (status) => {\n    switch (status) {\n      case \"processing\":\n        return \"bg-blue-100\";\n      case \"completed\":\n        return \"bg-green-100\";\n      case \"failed\":\n        return \"bg-red-100\";\n      default:\n        return \"bg-gray-100\";\n    }\n  };\n\n  return (\n    <BrutalistCard>\n      <div className=\"flex items-center justify-between mb-6\">\n        <h3 className=\"text-xl font-black uppercase tracking-wider\">\n          PROCESSING QUEUE\n        </h3>\n        <div className=\"bg-black text-white px-3 py-1 border-2 border-black\">\n          <span className=\"font-black text-sm\">{items.length} ITEMS</span>\n        </div>\n      </div>\n\n      <div className=\"space-y-4 max-h-96 overflow-y-auto\">\n        {items.length === 0 ? (\n          <div className=\"text-center py-8\">\n            <div className=\"bg-gray-200 border-4 border-black p-6\">\n              <p className=\"font-black uppercase text-lg text-gray-600\">\n                NO ITEMS IN QUEUE\n              </p>\n              <p className=\"font-bold text-sm text-gray-500 mt-2\">\n                Upload documents or start web scraping to see activity here\n              </p>\n            </div>\n          </div>\n        ) : (\n          items.map((item, index) => (\n            <div\n              key={index}\n              className={`\n                ${getStatusColor(item.status)} \n                border-4 border-black p-4 flex items-center justify-between\n              `}\n            >\n              <div className=\"flex items-center space-x-4\">\n                {getStatusIcon(item.status)}\n                <div>\n                  <p className=\"font-black text-sm uppercase\">\n                    {item.name}\n                  </p>\n                  <p className=\"font-bold text-xs text-gray-600 mt-1\">\n                    {item.type} • {item.timestamp}\n                  </p>\n                </div>\n              </div>\n              \n              <div className=\"text-right\">\n                <div className={`\n                  px-3 py-1 border-2 border-black font-black text-xs uppercase\n                  ${item.status === 'processing' ? 'bg-blue-500 text-white' : ''}\n                  ${item.status === 'completed' ? 'bg-green-500 text-white' : ''}\n                  ${item.status === 'failed' ? 'bg-red-500 text-white' : ''}\n                  ${item.status === 'pending' ? 'bg-gray-500 text-white' : ''}\n                `}>\n                  {item.status}\n                </div>\n                {item.progress && (\n                  <div className=\"mt-2 bg-gray-300 border-2 border-black h-2 w-32\">\n                    <div \n                      className=\"bg-blue-500 h-full border-r-2 border-black transition-all duration-300\"\n                      style={{ width: `${item.progress}%` }}\n                    />\n                  </div>\n                )}\n              </div>\n            </div>\n          ))\n        )}\n      </div>\n    </BrutalistCard>\n  );\n}"
    },
    {
      "name": "dropdown-menu.jsx",
      "path": "src/components/ui/dropdown-menu.jsx",
      "extension": "jsx",
      "language": "javascript",
      "size": 6157,
      "content": "import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}>\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props} />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md\",\n        \"data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props} />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&>svg]:size-4 [&>svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props} />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}>\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}>\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\"px-2 py-1.5 text-sm font-semibold\", inset && \"pl-8\", className)}\n    {...props} />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props} />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}) => {\n  return (\n    (<span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props} />)\n  );\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n"
    },
    {
      "name": "select.jsx",
      "path": "src/components/ui/select.jsx",
      "extension": "jsx",
      "language": "javascript",
      "size": 4677,
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between whitespace-nowrap rounded-md border border-input bg-transparent px-3 py-2 text-sm shadow-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-1 focus:ring-ring disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}>\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\"flex cursor-default items-center justify-center py-1\", className)}\n    {...props}>\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\"flex cursor-default items-center justify-center py-1\", className)}\n    {...props}>\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}>\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\"p-1\", position === \"popper\" &&\n          \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\")}>\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"px-2 py-1.5 text-sm font-semibold\", className)}\n    {...props} />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-2 pr-8 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}>\n    <span className=\"absolute right-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props} />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n"
    },
    {
      "name": "radio-group.jsx",
      "path": "src/components/ui/radio-group.jsx",
      "extension": "jsx",
      "language": "javascript",
      "size": 1135,
      "content": "import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef(({ className, ...props }, ref) => {\n  return (<RadioGroupPrimitive.Root className={cn(\"grid gap-2\", className)} {...props} ref={ref} />);\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef(({ className, ...props }, ref) => {\n  return (\n    (<RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary shadow focus:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}>\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-3.5 w-3.5 fill-primary\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>)\n  );\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n"
    },
    {
      "name": "collapsible.jsx",
      "path": "src/components/ui/collapsible.jsx",
      "extension": "jsx",
      "language": "javascript",
      "size": 329,
      "content": "\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n"
    },
    {
      "name": "toast.jsx",
      "path": "src/components/ui/toast.jsx",
      "extension": "jsx",
      "language": "javascript",
      "size": 3804,
      "content": "import * as React from \"react\";\nimport { cva } from \"class-variance-authority\";\nimport { X } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\n\nconst ToastProvider = React.forwardRef(({ ...props }, ref) => (\n  <div\n    ref={ref}\n    className=\"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\"\n    {...props}\n  />\n));\nToastProvider.displayName = \"ToastProvider\";\n\nconst ToastViewport = React.forwardRef(({ ...props }, ref) => (\n  <div\n    ref={ref}\n    className=\"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\"\n    {...props}\n  />\n));\nToastViewport.displayName = \"ToastViewport\";\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n);\n\nconst Toast = React.forwardRef(({ className, variant, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  );\n});\nToast.displayName = \"Toast\";\n\nconst ToastAction = React.forwardRef(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n));\nToastAction.displayName = \"ToastAction\";\n\nconst ToastClose = React.forwardRef(({ className, ...props }, ref) => (\n  <button\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </button>\n));\nToastClose.displayName = \"ToastClose\";\n\nconst ToastTitle = React.forwardRef(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n));\nToastTitle.displayName = \"ToastTitle\";\n\nconst ToastDescription = React.forwardRef(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n));\nToastDescription.displayName = \"ToastDescription\";\n\nexport {\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}; "
    },
    {
      "name": "badge.jsx",
      "path": "src/components/ui/badge.jsx",
      "extension": "jsx",
      "language": "javascript",
      "size": 990,
      "content": "import * as React from \"react\"\nimport { cva } from \"class-variance-authority\";\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nfunction Badge({\n  className,\n  variant,\n  ...props\n}) {\n  return (<div className={cn(badgeVariants({ variant }), className)} {...props} />);\n}\n\nexport { Badge, badgeVariants }\n"
    },
    {
      "name": "tooltip.jsx",
      "path": "src/components/ui/tooltip.jsx",
      "extension": "jsx",
      "language": "javascript",
      "size": 1091,
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Portal>\n    <TooltipPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 overflow-hidden rounded-md bg-primary px-3 py-1.5 text-xs text-primary-foreground animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props} />\n  </TooltipPrimitive.Portal>\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n"
    },
    {
      "name": "skeleton.jsx",
      "path": "src/components/ui/skeleton.jsx",
      "extension": "jsx",
      "language": "javascript",
      "size": 227,
      "content": "import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}) {\n  return (\n    (<div\n      className={cn(\"animate-pulse rounded-md bg-primary/10\", className)}\n      {...props} />)\n  );\n}\n\nexport { Skeleton }\n"
    },
    {
      "name": "sidebar.jsx",
      "path": "src/components/ui/sidebar.jsx",
      "extension": "jsx",
      "language": "javascript",
      "size": 20511,
      "content": "import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva } from \"class-variance-authority\";\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport { Sheet, SheetContent } from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\nconst SidebarContext = React.createContext(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef((\n  {\n    defaultOpen = true,\n    open: openProp,\n    onOpenChange: setOpenProp,\n    className,\n    style,\n    children,\n    ...props\n  },\n  ref\n) => {\n  const isMobile = useIsMobile()\n  const [openMobile, setOpenMobile] = React.useState(false)\n\n  // This is the internal state of the sidebar.\n  // We use openProp and setOpenProp for control from outside the component.\n  const [_open, _setOpen] = React.useState(defaultOpen)\n  const open = openProp ?? _open\n  const setOpen = React.useCallback((value) => {\n    const openState = typeof value === \"function\" ? value(open) : value\n    if (setOpenProp) {\n      setOpenProp(openState)\n    } else {\n      _setOpen(openState)\n    }\n\n    // This sets the cookie to keep the sidebar state.\n    document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n  }, [setOpenProp, open])\n\n  // Helper to toggle the sidebar.\n  const toggleSidebar = React.useCallback(() => {\n    return isMobile\n      ? setOpenMobile((open) => !open)\n      : setOpen((open) => !open);\n  }, [isMobile, setOpen, setOpenMobile])\n\n  // Adds a keyboard shortcut to toggle the sidebar.\n  React.useEffect(() => {\n    const handleKeyDown = (event) => {\n      if (\n        event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n        (event.metaKey || event.ctrlKey)\n      ) {\n        event.preventDefault()\n        toggleSidebar()\n      }\n    }\n\n    window.addEventListener(\"keydown\", handleKeyDown)\n    return () => window.removeEventListener(\"keydown\", handleKeyDown);\n  }, [toggleSidebar])\n\n  // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n  // This makes it easier to style the sidebar with Tailwind classes.\n  const state = open ? \"expanded\" : \"collapsed\"\n\n  const contextValue = React.useMemo(() => ({\n    state,\n    open,\n    setOpen,\n    isMobile,\n    openMobile,\n    setOpenMobile,\n    toggleSidebar,\n  }), [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar])\n\n  return (\n    (<SidebarContext.Provider value={contextValue}>\n      <TooltipProvider delayDuration={0}>\n        <div\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH,\n              \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n              ...style\n            }\n          }\n          className={cn(\n            \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n            className\n          )}\n          ref={ref}\n          {...props}>\n          {children}\n        </div>\n      </TooltipProvider>\n    </SidebarContext.Provider>)\n  );\n})\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef((\n  {\n    side = \"left\",\n    variant = \"sidebar\",\n    collapsible = \"offcanvas\",\n    className,\n    children,\n    ...props\n  },\n  ref\n) => {\n  const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n  if (collapsible === \"none\") {\n    return (\n      (<div\n        className={cn(\n          \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n          className\n        )}\n        ref={ref}\n        {...props}>\n        {children}\n      </div>)\n    );\n  }\n\n  if (isMobile) {\n    return (\n      (<Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n        <SheetContent\n          data-sidebar=\"sidebar\"\n          data-mobile=\"true\"\n          className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE\n            }\n          }\n          side={side}>\n          <div className=\"flex h-full w-full flex-col\">{children}</div>\n        </SheetContent>\n      </Sheet>)\n    );\n  }\n\n  return (\n    (<div\n      ref={ref}\n      className=\"group peer hidden text-sidebar-foreground md:block\"\n      data-state={state}\n      data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n      data-variant={variant}\n      data-side={side}>\n      {/* This is what handles the sidebar gap on desktop */}\n      <div\n        className={cn(\n          \"relative h-svh w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n          \"group-data-[collapsible=offcanvas]:w-0\",\n          \"group-data-[side=right]:rotate-180\",\n          variant === \"floating\" || variant === \"inset\"\n            ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n            : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n        )} />\n      <div\n        className={cn(\n          \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n          side === \"left\"\n            ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n            : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n          // Adjust the padding for floating and inset variants.\n          variant === \"floating\" || variant === \"inset\"\n            ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n            : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n          className\n        )}\n        {...props}>\n        <div\n          data-sidebar=\"sidebar\"\n          className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\">\n          {children}\n        </div>\n      </div>\n    </div>)\n  );\n})\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    (<Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}>\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>)\n  );\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    (<button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props} />)\n  );\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef(({ className, ...props }, ref) => {\n  return (\n    (<main\n      ref={ref}\n      className={cn(\n        \"relative flex min-h-svh flex-1 flex-col bg-background\",\n        \"peer-data-[variant=inset]:min-h-[calc(100svh-theme(spacing.4))] md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props} />)\n  );\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef(({ className, ...props }, ref) => {\n  return (\n    (<Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props} />)\n  );\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef(({ className, ...props }, ref) => {\n  return (\n    (<div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props} />)\n  );\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef(({ className, ...props }, ref) => {\n  return (\n    (<div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props} />)\n  );\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef(({ className, ...props }, ref) => {\n  return (\n    (<Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props} />)\n  );\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef(({ className, ...props }, ref) => {\n  return (\n    (<div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props} />)\n  );\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef(({ className, ...props }, ref) => {\n  return (\n    (<div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props} />)\n  );\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    (<Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props} />)\n  );\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    (<Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props} />)\n  );\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props} />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props} />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props} />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef((\n  {\n    asChild = false,\n    isActive = false,\n    variant = \"default\",\n    size = \"default\",\n    tooltip,\n    className,\n    ...props\n  },\n  ref\n) => {\n  const Comp = asChild ? Slot : \"button\"\n  const { isMobile, state } = useSidebar()\n\n  const button = (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n      {...props} />\n  )\n\n  if (!tooltip) {\n    return button\n  }\n\n  if (typeof tooltip === \"string\") {\n    tooltip = {\n      children: tooltip,\n    }\n  }\n\n  return (\n    (<Tooltip>\n      <TooltipTrigger asChild>{button}</TooltipTrigger>\n      <TooltipContent\n        side=\"right\"\n        align=\"center\"\n        hidden={state !== \"collapsed\" || isMobile}\n        {...tooltip} />\n    </Tooltip>)\n  );\n})\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    (<Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props} />)\n  );\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props} />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`;\n  }, [])\n\n  return (\n    (<div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}>\n      {showIcon && (\n        <Skeleton className=\"size-4 rounded-md\" data-sidebar=\"menu-skeleton-icon\" />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width\n          }\n        } />\n    </div>)\n  );\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props} />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef(\n  ({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"a\"\n\n    return (\n      (<Comp\n        ref={ref}\n        data-sidebar=\"menu-sub-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(\n          \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n          \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n          size === \"sm\" && \"text-xs\",\n          size === \"md\" && \"text-sm\",\n          \"group-data-[collapsible=icon]:hidden\",\n          className\n        )}\n        {...props} />)\n    );\n  }\n)\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n"
    },
    {
      "name": "carousel.jsx",
      "path": "src/components/ui/carousel.jsx",
      "extension": "jsx",
      "language": "javascript",
      "size": 4821,
      "content": "import * as React from \"react\"\nimport useEmblaCarousel from \"embla-carousel-react\";\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\nconst CarouselContext = React.createContext(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef((\n  {\n    orientation = \"horizontal\",\n    opts,\n    setApi,\n    plugins,\n    className,\n    children,\n    ...props\n  },\n  ref\n) => {\n  const [carouselRef, api] = useEmblaCarousel({\n    ...opts,\n    axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n  }, plugins)\n  const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n  const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n  const onSelect = React.useCallback((api) => {\n    if (!api) {\n      return\n    }\n\n    setCanScrollPrev(api.canScrollPrev())\n    setCanScrollNext(api.canScrollNext())\n  }, [])\n\n  const scrollPrev = React.useCallback(() => {\n    api?.scrollPrev()\n  }, [api])\n\n  const scrollNext = React.useCallback(() => {\n    api?.scrollNext()\n  }, [api])\n\n  const handleKeyDown = React.useCallback((event) => {\n    if (event.key === \"ArrowLeft\") {\n      event.preventDefault()\n      scrollPrev()\n    } else if (event.key === \"ArrowRight\") {\n      event.preventDefault()\n      scrollNext()\n    }\n  }, [scrollPrev, scrollNext])\n\n  React.useEffect(() => {\n    if (!api || !setApi) {\n      return\n    }\n\n    setApi(api)\n  }, [api, setApi])\n\n  React.useEffect(() => {\n    if (!api) {\n      return\n    }\n\n    onSelect(api)\n    api.on(\"reInit\", onSelect)\n    api.on(\"select\", onSelect)\n\n    return () => {\n      api?.off(\"select\", onSelect)\n    };\n  }, [api, onSelect])\n\n  return (\n    (<CarouselContext.Provider\n      value={{\n        carouselRef,\n        api: api,\n        opts,\n        orientation:\n          orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n        scrollPrev,\n        scrollNext,\n        canScrollPrev,\n        canScrollNext,\n      }}>\n      <div\n        ref={ref}\n        onKeyDownCapture={handleKeyDown}\n        className={cn(\"relative\", className)}\n        role=\"region\"\n        aria-roledescription=\"carousel\"\n        {...props}>\n        {children}\n      </div>\n    </CarouselContext.Provider>)\n  );\n})\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    (<div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props} />\n    </div>)\n  );\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    (<div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props} />)\n  );\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    (<Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\"absolute  h-8 w-8 rounded-full\", orientation === \"horizontal\"\n        ? \"-left-12 top-1/2 -translate-y-1/2\"\n        : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\", className)}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}>\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>)\n  );\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    (<Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\"absolute h-8 w-8 rounded-full\", orientation === \"horizontal\"\n        ? \"-right-12 top-1/2 -translate-y-1/2\"\n        : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\", className)}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}>\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>)\n  );\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport { Carousel, CarouselContent, CarouselItem, CarouselPrevious, CarouselNext };\n"
    },
    {
      "name": "avatar.jsx",
      "path": "src/components/ui/avatar.jsx",
      "extension": "jsx",
      "language": "javascript",
      "size": 1043,
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\", className)}\n    {...props} />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props} />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props} />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n"
    },
    {
      "name": "sheet.jsx",
      "path": "src/components/ui/sheet.jsx",
      "extension": "jsx",
      "language": "javascript",
      "size": 3549,
      "content": "\"use client\";\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva } from \"class-variance-authority\";\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref} />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=closed]:duration-300 data-[state=open]:duration-500 data-[state=open]:animate-in data-[state=closed]:animate-out\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4 border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\nconst SheetContent = React.forwardRef(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content ref={ref} className={cn(sheetVariants({ side }), className)} {...props}>\n      <SheetPrimitive.Close\n        className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n      {children}\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}) => (\n  <div\n    className={cn(\"flex flex-col space-y-2 text-center sm:text-left\", className)}\n    {...props} />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}) => (\n  <div\n    className={cn(\"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\", className)}\n    {...props} />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props} />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props} />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n"
    },
    {
      "name": "sonner.jsx",
      "path": "src/components/ui/sonner.jsx",
      "extension": "jsx",
      "language": "javascript",
      "size": 799,
      "content": "\"use client\";\nimport { useTheme } from \"next-themes\"\nimport { Toaster as Sonner } from \"sonner\"\n\nconst Toaster = ({\n  ...props\n}) => {\n  const { theme = \"system\" } = useTheme()\n\n  return (\n    (<Sonner\n      theme={theme}\n      className=\"toaster group\"\n      toastOptions={{\n        classNames: {\n          toast:\n            \"group toast group-[.toaster]:bg-background group-[.toaster]:text-foreground group-[.toaster]:border-border group-[.toaster]:shadow-lg\",\n          description: \"group-[.toast]:text-muted-foreground\",\n          actionButton:\n            \"group-[.toast]:bg-primary group-[.toast]:text-primary-foreground\",\n          cancelButton:\n            \"group-[.toast]:bg-muted group-[.toast]:text-muted-foreground\",\n        },\n      }}\n      {...props} />)\n  );\n}\n\nexport { Toaster }\n"
    },
    {
      "name": "toggle-group.jsx",
      "path": "src/components/ui/toggle-group.jsx",
      "extension": "jsx",
      "language": "javascript",
      "size": 1284,
      "content": "\"use client\";\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}>\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    (<ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(toggleVariants({\n        variant: context.variant || variant,\n        size: context.size || size,\n      }), className)}\n      {...props}>\n      {children}\n    </ToggleGroupPrimitive.Item>)\n  );\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n"
    },
    {
      "name": "textarea.jsx",
      "path": "src/components/ui/textarea.jsx",
      "extension": "jsx",
      "language": "javascript",
      "size": 587,
      "content": "import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef(({ className, ...props }, ref) => {\n  return (\n    (<textarea\n      className={cn(\n        \"flex min-h-[60px] w-full rounded-md border border-input bg-transparent px-3 py-2 text-base shadow-sm placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props} />)\n  );\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n"
    },
    {
      "name": "toaster.jsx",
      "path": "src/components/ui/toaster.jsx",
      "extension": "jsx",
      "language": "javascript",
      "size": 785,
      "content": "import { useToast } from \"@/components/ui/use-toast\";\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\";\n\nexport function Toaster() {\n  const { toasts } = useToast();\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        );\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  );\n} "
    },
    {
      "name": "context-menu.jsx",
      "path": "src/components/ui/context-menu.jsx",
      "extension": "jsx",
      "language": "javascript",
      "size": 5995,
      "content": "import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}>\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props} />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props} />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props} />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}>\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}>\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-4 w-4 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props} />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props} />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}) => {\n  return (\n    (<span\n      className={cn(\"ml-auto text-xs tracking-widest text-muted-foreground\", className)}\n      {...props} />)\n  );\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n"
    },
    {
      "name": "drawer.jsx",
      "path": "src/components/ui/drawer.jsx",
      "extension": "jsx",
      "language": "javascript",
      "size": 2359,
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}) => (\n  <DrawerPrimitive.Root shouldScaleBackground={shouldScaleBackground} {...props} />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props} />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}>\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props} />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}) => (\n  <div className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)} {...props} />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold leading-none tracking-tight\", className)}\n    {...props} />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props} />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n"
    },
    {
      "name": "alert-dialog.jsx",
      "path": "src/components/ui/alert-dialog.jsx",
      "extension": "jsx",
      "language": "javascript",
      "size": 3461,
      "content": "import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref} />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props} />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}) => (\n  <div\n    className={cn(\"flex flex-col space-y-2 text-center sm:text-left\", className)}\n    {...props} />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}) => (\n  <div\n    className={cn(\"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\", className)}\n    {...props} />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title ref={ref} className={cn(\"text-lg font-semibold\", className)} {...props} />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props} />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action ref={ref} className={cn(buttonVariants(), className)} {...props} />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(buttonVariants({ variant: \"outline\" }), \"mt-2 sm:mt-0\", className)}\n    {...props} />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n"
    },
    {
      "name": "command.jsx",
      "path": "src/components/ui/command.jsx",
      "extension": "jsx",
      "language": "javascript",
      "size": 3897,
      "content": "import * as React from \"react\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props} />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({\n  children,\n  ...props\n}) => {\n  return (\n    (<Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0\">\n        <Command\n          className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>)\n  );\n}\n\nconst CommandInput = React.forwardRef(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-10 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props} />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props} />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef((props, ref) => (\n  <CommandPrimitive.Empty ref={ref} className=\"py-6 text-center text-sm\" {...props} />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props} />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator ref={ref} className={cn(\"-mx-1 h-px bg-border\", className)} {...props} />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected=true]:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props} />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}) => {\n  return (\n    (<span\n      className={cn(\"ml-auto text-xs tracking-widest text-muted-foreground\", className)}\n      {...props} />)\n  );\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n"
    },
    {
      "name": "label.jsx",
      "path": "src/components/ui/label.jsx",
      "extension": "jsx",
      "language": "javascript",
      "size": 525,
      "content": "import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva } from \"class-variance-authority\";\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root ref={ref} className={cn(labelVariants(), className)} {...props} />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n"
    },
    {
      "name": "breadcrumb.jsx",
      "path": "src/components/ui/breadcrumb.jsx",
      "extension": "jsx",
      "language": "javascript",
      "size": 2271,
      "content": "import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef(\n  ({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />\n)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props} />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props} />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    (<Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props} />)\n  );\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props} />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}>\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}>\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n"
    },
    {
      "name": "progress.jsx",
      "path": "src/components/ui/progress.jsx",
      "extension": "jsx",
      "language": "javascript",
      "size": 667,
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-2 w-full overflow-hidden rounded-full bg-primary/20\",\n      className\n    )}\n    {...props}>\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }} />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n"
    },
    {
      "name": "calendar.jsx",
      "path": "src/components/ui/calendar.jsx",
      "extension": "jsx",
      "language": "javascript",
      "size": 2851,
      "content": "import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}) {\n  return (\n    (<DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-8 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: cn(\n          \"relative p-0 text-center text-sm focus-within:relative focus-within:z-20 [&:has([aria-selected])]:bg-accent [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected].day-range-end)]:rounded-r-md\",\n          props.mode === \"range\"\n            ? \"[&:has(>.day-range-end)]:rounded-r-md [&:has(>.day-range-start)]:rounded-l-md first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md\"\n            : \"[&:has([aria-selected])]:rounded-md\"\n        ),\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-8 w-8 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_start: \"day-range-start\",\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props} />)\n  );\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n"
    },
    {
      "name": "form.jsx",
      "path": "src/components/ui/form.jsx",
      "extension": "jsx",
      "language": "javascript",
      "size": 3141,
      "content": "\"use client\";\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { Controller, FormProvider, useFormContext } from \"react-hook-form\";\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\nconst FormFieldContext = React.createContext({})\n\nconst FormField = (\n  {\n    ...props\n  }\n) => {\n  return (\n    (<FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>)\n  );\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\nconst FormItemContext = React.createContext({})\n\nconst FormItem = React.forwardRef(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    (<FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>)\n  );\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    (<Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props} />)\n  );\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    (<Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props} />)\n  );\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    (<p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-[0.8rem] text-muted-foreground\", className)}\n      {...props} />)\n  );\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message) : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    (<p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-[0.8rem] font-medium text-destructive\", className)}\n      {...props}>\n      {body}\n    </p>)\n  );\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n"
    },
    {
      "name": "accordion.jsx",
      "path": "src/components/ui/accordion.jsx",
      "extension": "jsx",
      "language": "javascript",
      "size": 1615,
      "content": "import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item ref={ref} className={cn(\"border-b\", className)} {...props} />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 text-sm font-medium transition-all hover:underline text-left [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}>\n      {children}\n      <ChevronDown\n        className=\"h-4 w-4 shrink-0 text-muted-foreground transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}>\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n"
    },
    {
      "name": "slider.jsx",
      "path": "src/components/ui/slider.jsx",
      "extension": "jsx",
      "language": "javascript",
      "size": 914,
      "content": "import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\"relative flex w-full touch-none select-none items-center\", className)}\n    {...props}>\n    <SliderPrimitive.Track\n      className=\"relative h-1.5 w-full grow overflow-hidden rounded-full bg-primary/20\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb\n      className=\"block h-4 w-4 rounded-full border border-primary/50 bg-background shadow transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n"
    },
    {
      "name": "navigation-menu.jsx",
      "path": "src/components/ui/navigation-menu.jsx",
      "extension": "jsx",
      "language": "javascript",
      "size": 4217,
      "content": "import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}>\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props} />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-9 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[active]:bg-accent/50 data-[state=open]:bg-accent/50\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}>\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-300 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\" />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props} />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props} />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}>\n    <div\n      className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n"
    },
    {
      "name": "dialog.jsx",
      "path": "src/components/ui/dialog.jsx",
      "extension": "jsx",
      "language": "javascript",
      "size": 3228,
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props} />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}>\n      {children}\n      <DialogPrimitive.Close\n        className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}) => (\n  <div\n    className={cn(\"flex flex-col space-y-1.5 text-center sm:text-left\", className)}\n    {...props} />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}) => (\n  <div\n    className={cn(\"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\", className)}\n    {...props} />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold leading-none tracking-tight\", className)}\n    {...props} />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props} />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogTrigger,\n  DialogClose,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n"
    },
    {
      "name": "hover-card.jsx",
      "path": "src/components/ui/hover-card.jsx",
      "extension": "jsx",
      "language": "javascript",
      "size": 1070,
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props} />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n"
    },
    {
      "name": "menubar.jsx",
      "path": "src/components/ui/menubar.jsx",
      "extension": "jsx",
      "language": "javascript",
      "size": 6790,
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}) {\n  return <MenubarPrimitive.Menu {...props} />;\n}\n\nfunction MenubarGroup({\n  ...props\n}) {\n  return <MenubarPrimitive.Group {...props} />;\n}\n\nfunction MenubarPortal({\n  ...props\n}) {\n  return <MenubarPrimitive.Portal {...props} />;\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}) {\n  return <MenubarPrimitive.RadioGroup {...props} />;\n}\n\nfunction MenubarSub({\n  ...props\n}) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />;\n}\n\nconst Menubar = React.forwardRef(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-9 items-center space-x-1 rounded-md border bg-background p-1 shadow-sm\",\n      className\n    )}\n    {...props} />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props} />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}>\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props} />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef((\n  { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n  ref\n) => (\n  <MenubarPrimitive.Portal>\n    <MenubarPrimitive.Content\n      ref={ref}\n      align={align}\n      alignOffset={alignOffset}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props} />\n  </MenubarPrimitive.Portal>\n))\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props} />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}>\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}>\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-4 w-4 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\"px-2 py-1.5 text-sm font-semibold\", inset && \"pl-8\", className)}\n    {...props} />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props} />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}) => {\n  return (\n    (<span\n      className={cn(\"ml-auto text-xs tracking-widest text-muted-foreground\", className)}\n      {...props} />)\n  );\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n"
    },
    {
      "name": "toggle.jsx",
      "path": "src/components/ui/toggle.jsx",
      "extension": "jsx",
      "language": "javascript",
      "size": 1310,
      "content": "import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva } from \"class-variance-authority\";\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center gap-2 rounded-md text-sm font-medium transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent shadow-sm hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-9 px-2 min-w-9\",\n        sm: \"h-8 px-1.5 min-w-8\",\n        lg: \"h-10 px-2.5 min-w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props} />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n"
    },
    {
      "name": "card.jsx",
      "path": "src/components/ui/card.jsx",
      "extension": "jsx",
      "language": "javascript",
      "size": 1440,
      "content": "import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"rounded-xl border bg-card text-card-foreground shadow\", className)}\n    {...props} />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props} />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"font-semibold leading-none tracking-tight\", className)}\n    {...props} />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props} />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props} />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n"
    },
    {
      "name": "checkbox.jsx",
      "path": "src/components/ui/checkbox.jsx",
      "extension": "jsx",
      "language": "javascript",
      "size": 880,
      "content": "import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary shadow focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}>\n    <CheckboxPrimitive.Indicator className={cn(\"flex items-center justify-center text-current\")}>\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n"
    },
    {
      "name": "tabs.jsx",
      "path": "src/components/ui/tabs.jsx",
      "extension": "jsx",
      "language": "javascript",
      "size": 1529,
      "content": "import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-9 items-center justify-center rounded-lg bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props} />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-md px-3 py-1 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow\",\n      className\n    )}\n    {...props} />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props} />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n"
    },
    {
      "name": "pagination.jsx",
      "path": "src/components/ui/pagination.jsx",
      "extension": "jsx",
      "language": "javascript",
      "size": 2322,
      "content": "import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\";\n\nconst Pagination = ({\n  className,\n  ...props\n}) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props} />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props} />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(buttonVariants({\n      variant: isActive ? \"outline\" : \"ghost\",\n      size,\n    }), className)}\n    {...props} />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}>\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}>\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}>\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationLink,\n  PaginationItem,\n  PaginationPrevious,\n  PaginationNext,\n  PaginationEllipsis,\n}\n"
    },
    {
      "name": "use-toast.jsx",
      "path": "src/components/ui/use-toast.jsx",
      "extension": "jsx",
      "language": "javascript",
      "size": 3405,
      "content": "// Inspired by react-hot-toast library\nimport { useState, useEffect, createContext, useContext } from \"react\";\n\nconst TOAST_LIMIT = 20;\nconst TOAST_REMOVE_DELAY = 1000000;\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n};\n\nlet count = 0;\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_VALUE;\n  return count.toString();\n}\n\nconst toastTimeouts = new Map();\n\nconst addToRemoveQueue = (toastId) => {\n  if (toastTimeouts.has(toastId)) {\n    return;\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId);\n    dispatch({\n      type: actionTypes.REMOVE_TOAST,\n      toastId,\n    });\n  }, TOAST_REMOVE_DELAY);\n\n  toastTimeouts.set(toastId, timeout);\n};\n\nconst clearFromRemoveQueue = (toastId) => {\n  const timeout = toastTimeouts.get(toastId);\n  if (timeout) {\n    clearTimeout(timeout);\n    toastTimeouts.delete(toastId);\n  }\n};\n\nexport const reducer = (state, action) => {\n  switch (action.type) {\n    case actionTypes.ADD_TOAST:\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      };\n\n    case actionTypes.UPDATE_TOAST:\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      };\n\n    case actionTypes.DISMISS_TOAST: {\n      const { toastId } = action;\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId);\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id);\n        });\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      };\n    }\n    case actionTypes.REMOVE_TOAST:\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        };\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      };\n  }\n};\n\nconst listeners = [];\n\nlet memoryState = { toasts: [] };\n\nfunction dispatch(action) {\n  memoryState = reducer(memoryState, action);\n  listeners.forEach((listener) => {\n    listener(memoryState);\n  });\n}\n\nfunction toast({ ...props }) {\n  const id = genId();\n\n  const update = (props) =>\n    dispatch({\n      type: actionTypes.UPDATE_TOAST,\n      toast: { ...props, id },\n    });\n\n  const dismiss = () =>\n    dispatch({ type: actionTypes.DISMISS_TOAST, toastId: id });\n\n  dispatch({\n    type: actionTypes.ADD_TOAST,\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss();\n      },\n    },\n  });\n\n  return {\n    id,\n    dismiss,\n    update,\n  };\n}\n\nfunction useToast() {\n  const [state, setState] = useState(memoryState);\n\n  useEffect(() => {\n    listeners.push(setState);\n    return () => {\n      const index = listeners.indexOf(setState);\n      if (index > -1) {\n        listeners.splice(index, 1);\n      }\n    };\n  }, [state]);\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId) => dispatch({ type: actionTypes.DISMISS_TOAST, toastId }),\n  };\n}\n\nexport { useToast, toast }; "
    },
    {
      "name": "input-otp.jsx",
      "path": "src/components/ui/input-otp.jsx",
      "extension": "jsx",
      "language": "javascript",
      "size": 1811,
      "content": "import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Minus } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\"flex items-center gap-2 has-[:disabled]:opacity-50\", containerClassName)}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props} />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    (<div\n      ref={ref}\n      className={cn(\n        \"relative flex h-9 w-9 items-center justify-center border-y border-r border-input text-sm shadow-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-1 ring-ring\",\n        className\n      )}\n      {...props}>\n      {char}\n      {hasFakeCaret && (\n        <div\n          className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>)\n  );\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Minus />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n"
    },
    {
      "name": "input.jsx",
      "path": "src/components/ui/input.jsx",
      "extension": "jsx",
      "language": "javascript",
      "size": 690,
      "content": "import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef(({ className, type, ...props }, ref) => {\n  return (\n    (<input\n      type={type}\n      className={cn(\n        \"flex h-9 w-full rounded-md border border-input bg-transparent px-3 py-1 text-base shadow-sm transition-colors file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props} />)\n  );\n})\nInput.displayName = \"Input\"\n\nexport { Input }\n"
    },
    {
      "name": "chart.jsx",
      "path": "src/components/ui/chart.jsx",
      "extension": "jsx",
      "language": "javascript",
      "size": 8639,
      "content": "\"use client\";\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = {\n  light: \"\",\n  dark: \".dark\"\n}\n\nconst ChartContext = React.createContext(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    (<ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}>\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>)\n  );\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({\n  id,\n  config\n}) => {\n  const colorConfig = Object.entries(config).filter(([, config]) => config.theme || config.color)\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    (<style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n.map(([key, itemConfig]) => {\nconst color =\n  itemConfig.theme?.[theme] ||\n  itemConfig.color\nreturn color ? `  --color-${key}: ${color};` : null\n})\n.join(\"\\n\")}\n}\n`)\n          .join(\"\\n\"),\n      }} />)\n  );\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef((\n  {\n    active,\n    payload,\n    className,\n    indicator = \"dot\",\n    hideLabel = false,\n    hideIndicator = false,\n    label,\n    labelFormatter,\n    labelClassName,\n    formatter,\n    color,\n    nameKey,\n    labelKey,\n  },\n  ref\n) => {\n  const { config } = useChart()\n\n  const tooltipLabel = React.useMemo(() => {\n    if (hideLabel || !payload?.length) {\n      return null\n    }\n\n    const [item] = payload\n    const key = `${labelKey || item.dataKey || item.name || \"value\"}`\n    const itemConfig = getPayloadConfigFromPayload(config, item, key)\n    const value =\n      !labelKey && typeof label === \"string\"\n        ? config[label]?.label || label\n        : itemConfig?.label\n\n    if (labelFormatter) {\n      return (\n        (<div className={cn(\"font-medium\", labelClassName)}>\n          {labelFormatter(value, payload)}\n        </div>)\n      );\n    }\n\n    if (!value) {\n      return null\n    }\n\n    return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>;\n  }, [\n    label,\n    labelFormatter,\n    payload,\n    hideLabel,\n    labelClassName,\n    config,\n    labelKey,\n  ])\n\n  if (!active || !payload?.length) {\n    return null\n  }\n\n  const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n  return (\n    (<div\n      ref={ref}\n      className={cn(\n        \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n        className\n      )}>\n      {!nestLabel ? tooltipLabel : null}\n      <div className=\"grid gap-1.5\">\n        {payload.map((item, index) => {\n          const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n          const indicatorColor = color || item.payload.fill || item.color\n\n          return (\n            (<div\n              key={item.dataKey}\n              className={cn(\n                \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                indicator === \"dot\" && \"items-center\"\n              )}>\n              {formatter && item?.value !== undefined && item.name ? (\n                formatter(item.value, item.name, item, index, item.payload)\n              ) : (\n                <>\n                  {itemConfig?.icon ? (\n                    <itemConfig.icon />\n                  ) : (\n                    !hideIndicator && (\n                      <div\n                        className={cn(\"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\", {\n                          \"h-2.5 w-2.5\": indicator === \"dot\",\n                          \"w-1\": indicator === \"line\",\n                          \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                            indicator === \"dashed\",\n                          \"my-0.5\": nestLabel && indicator === \"dashed\",\n                        })}\n                        style={\n                          {\n                            \"--color-bg\": indicatorColor,\n                            \"--color-border\": indicatorColor\n                          }\n                        } />\n                    )\n                  )}\n                  <div\n                    className={cn(\n                      \"flex flex-1 justify-between leading-none\",\n                      nestLabel ? \"items-end\" : \"items-center\"\n                    )}>\n                    <div className=\"grid gap-1.5\">\n                      {nestLabel ? tooltipLabel : null}\n                      <span className=\"text-muted-foreground\">\n                        {itemConfig?.label || item.name}\n                      </span>\n                    </div>\n                    {item.value && (\n                      <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                        {item.value.toLocaleString()}\n                      </span>\n                    )}\n                  </div>\n                </>\n              )}\n            </div>)\n          );\n        })}\n      </div>\n    </div>)\n  );\n})\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef((\n  { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n  ref\n) => {\n  const { config } = useChart()\n\n  if (!payload?.length) {\n    return null\n  }\n\n  return (\n    (<div\n      ref={ref}\n      className={cn(\n        \"flex items-center justify-center gap-4\",\n        verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n        className\n      )}>\n      {payload.map((item) => {\n        const key = `${nameKey || item.dataKey || \"value\"}`\n        const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n        return (\n          (<div\n            key={item.value}\n            className={cn(\n              \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n            )}>\n            {itemConfig?.icon && !hideIcon ? (\n              <itemConfig.icon />\n            ) : (\n              <div\n                className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                style={{\n                  backgroundColor: item.color,\n                }} />\n            )}\n            {itemConfig?.label}\n          </div>)\n        );\n      })}\n    </div>)\n  );\n})\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config,\n  payload,\n  key\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey = key\n\n  if (\n    key in payload &&\n    typeof payload[key] === \"string\"\n  ) {\n    configLabelKey = payload[key]\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[key]\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key];\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n"
    },
    {
      "name": "separator.jsx",
      "path": "src/components/ui/separator.jsx",
      "extension": "jsx",
      "language": "javascript",
      "size": 600,
      "content": "import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef((\n  { className, orientation = \"horizontal\", decorative = true, ...props },\n  ref\n) => (\n  <SeparatorPrimitive.Root\n    ref={ref}\n    decorative={decorative}\n    orientation={orientation}\n    className={cn(\n      \"shrink-0 bg-border\",\n      orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n      className\n    )}\n    {...props} />\n))\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n"
    },
    {
      "name": "popover.jsx",
      "path": "src/components/ui/popover.jsx",
      "extension": "jsx",
      "language": "javascript",
      "size": 1166,
      "content": "import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverAnchor = PopoverPrimitive.Anchor\n\nconst PopoverContent = React.forwardRef(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props} />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent, PopoverAnchor }\n"
    },
    {
      "name": "scroll-area.jsx",
      "path": "src/components/ui/scroll-area.jsx",
      "extension": "jsx",
      "language": "javascript",
      "size": 1362,
      "content": "import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}>\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}>\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n"
    },
    {
      "name": "table.jsx",
      "path": "src/components/ui/table.jsx",
      "extension": "jsx",
      "language": "javascript",
      "size": 2231,
      "content": "import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props} />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props} />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\", className)}\n    {...props} />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props} />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-10 px-2 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]\",\n      className\n    )}\n    {...props} />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\n      \"p-2 align-middle [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]\",\n      className\n    )}\n    {...props} />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props} />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n"
    },
    {
      "name": "aspect-ratio.jsx",
      "path": "src/components/ui/aspect-ratio.jsx",
      "extension": "jsx",
      "language": "javascript",
      "size": 140,
      "content": "import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n"
    },
    {
      "name": "switch.jsx",
      "path": "src/components/ui/switch.jsx",
      "extension": "jsx",
      "language": "javascript",
      "size": 1025,
      "content": "import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-5 w-9 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent shadow-sm transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}>\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-4 w-4 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-4 data-[state=unchecked]:translate-x-0\"\n      )} />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n"
    },
    {
      "name": "resizable.jsx",
      "path": "src/components/ui/resizable.jsx",
      "extension": "jsx",
      "language": "javascript",
      "size": 1570,
      "content": "\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props} />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}>\n    {withHandle && (\n      <div\n        className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n"
    },
    {
      "name": "button.jsx",
      "path": "src/components/ui/button.jsx",
      "extension": "jsx",
      "language": "javascript",
      "size": 1678,
      "content": "import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva } from \"class-variance-authority\";\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground shadow hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground shadow-sm hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background shadow-sm hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground shadow-sm hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-9 px-4 py-2\",\n        sm: \"h-8 rounded-md px-3 text-xs\",\n        lg: \"h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Button = React.forwardRef(({ className, variant, size, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n  return (\n    (<Comp\n      className={cn(buttonVariants({ variant, size, className }))}\n      ref={ref}\n      {...props} />)\n  );\n})\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n"
    },
    {
      "name": "alert.jsx",
      "path": "src/components/ui/alert.jsx",
      "extension": "jsx",
      "language": "javascript",
      "size": 1335,
      "content": "import * as React from \"react\"\nimport { cva } from \"class-variance-authority\";\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border px-4 py-3 text-sm [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground [&>svg~*]:pl-7\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props} />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props} />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props} />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n"
    }
  ],
  "components": [
    {
      "name": "App",
      "type": "component",
      "startLine": 5,
      "endLine": 12,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "function"
      ],
      "file": {
        "name": "App.jsx",
        "path": "src/App.jsx"
      },
      "code": "function App() {\n  return (\n    <>\n      <Pages />\n      <Toaster />\n    </>\n  )\n}"
    },
    {
      "name": "App",
      "type": "component",
      "startLine": 5,
      "endLine": 12,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "component"
      ],
      "file": {
        "name": "App.jsx",
        "path": "src/App.jsx"
      },
      "code": "function App() {\n  return (\n    <>\n      <Pages />\n      <Toaster />\n    </>\n  )\n}"
    },
    {
      "name": "cn",
      "type": "function",
      "startLine": 4,
      "endLine": 6,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "function",
        "exported"
      ],
      "file": {
        "name": "utils.js",
        "path": "src/lib/utils.js"
      },
      "code": "export function cn(...inputs) {\n  return twMerge(clsx(inputs))\n} "
    },
    {
      "name": "Core",
      "type": "variable",
      "startLine": 6,
      "endLine": 6,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable",
        "exported"
      ],
      "file": {
        "name": "integrations.js",
        "path": "src/api/integrations.js"
      },
      "code": "export const Core = base44.integrations.Core;"
    },
    {
      "name": "InvokeLLM",
      "type": "variable",
      "startLine": 8,
      "endLine": 8,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable",
        "exported"
      ],
      "file": {
        "name": "integrations.js",
        "path": "src/api/integrations.js"
      },
      "code": "export const InvokeLLM = base44.integrations.Core.InvokeLLM;"
    },
    {
      "name": "SendEmail",
      "type": "variable",
      "startLine": 10,
      "endLine": 10,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable",
        "exported"
      ],
      "file": {
        "name": "integrations.js",
        "path": "src/api/integrations.js"
      },
      "code": "export const SendEmail = base44.integrations.Core.SendEmail;"
    },
    {
      "name": "UploadFile",
      "type": "variable",
      "startLine": 12,
      "endLine": 12,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable",
        "exported"
      ],
      "file": {
        "name": "integrations.js",
        "path": "src/api/integrations.js"
      },
      "code": "export const UploadFile = base44.integrations.Core.UploadFile;"
    },
    {
      "name": "GenerateImage",
      "type": "variable",
      "startLine": 14,
      "endLine": 14,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable",
        "exported"
      ],
      "file": {
        "name": "integrations.js",
        "path": "src/api/integrations.js"
      },
      "code": "export const GenerateImage = base44.integrations.Core.GenerateImage;"
    },
    {
      "name": "ExtractDataFromUploadedFile",
      "type": "variable",
      "startLine": 16,
      "endLine": 16,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable",
        "exported"
      ],
      "file": {
        "name": "integrations.js",
        "path": "src/api/integrations.js"
      },
      "code": "export const ExtractDataFromUploadedFile = base44.integrations.Core.ExtractDataFromUploadedFile;"
    },
    {
      "name": "base44",
      "type": "variable",
      "startLine": 5,
      "endLine": 8,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable",
        "exported"
      ],
      "file": {
        "name": "base44Client.js",
        "path": "src/api/base44Client.js"
      },
      "code": "export const base44 = createClient({\n  appId: \"68b2d9dd295ddae8d2a8eac8\", \n  requiresAuth: true // Ensure authentication is required for all operations\n});"
    },
    {
      "name": "Document",
      "type": "variable",
      "startLine": 4,
      "endLine": 4,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable",
        "exported"
      ],
      "file": {
        "name": "entities.js",
        "path": "src/api/entities.js"
      },
      "code": "export const Document = base44.entities.Document;"
    },
    {
      "name": "SearchQuery",
      "type": "variable",
      "startLine": 6,
      "endLine": 6,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable",
        "exported"
      ],
      "file": {
        "name": "entities.js",
        "path": "src/api/entities.js"
      },
      "code": "export const SearchQuery = base44.entities.SearchQuery;"
    },
    {
      "name": "ScrapedContent",
      "type": "variable",
      "startLine": 8,
      "endLine": 8,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable",
        "exported"
      ],
      "file": {
        "name": "entities.js",
        "path": "src/api/entities.js"
      },
      "code": "export const ScrapedContent = base44.entities.ScrapedContent;"
    },
    {
      "name": "Report",
      "type": "variable",
      "startLine": 10,
      "endLine": 10,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable",
        "exported"
      ],
      "file": {
        "name": "entities.js",
        "path": "src/api/entities.js"
      },
      "code": "export const Report = base44.entities.Report;"
    },
    {
      "name": "User",
      "type": "variable",
      "startLine": 15,
      "endLine": 15,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable",
        "exported"
      ],
      "file": {
        "name": "entities.js",
        "path": "src/api/entities.js"
      },
      "code": "export const User = base44.auth;"
    },
    {
      "name": "MOBILE_BREAKPOINT",
      "type": "variable",
      "startLine": 3,
      "endLine": 4,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "use-mobile.jsx",
        "path": "src/hooks/use-mobile.jsx"
      },
      "code": "const MOBILE_BREAKPOINT = 768\n"
    },
    {
      "name": "useIsMobile",
      "type": "hook",
      "startLine": 5,
      "endLine": 19,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "function",
        "react",
        "exported"
      ],
      "file": {
        "name": "use-mobile.jsx",
        "path": "src/hooks/use-mobile.jsx"
      },
      "code": "export function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange);\n  }, [])\n\n  return !!isMobile\n}"
    },
    {
      "name": "useIsMobile",
      "type": "hook",
      "startLine": 5,
      "endLine": 19,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "hook",
        "react",
        "exported"
      ],
      "file": {
        "name": "use-mobile.jsx",
        "path": "src/hooks/use-mobile.jsx"
      },
      "code": "export function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange);\n  }, [])\n\n  return !!isMobile\n}"
    },
    {
      "name": "mql",
      "type": "variable",
      "startLine": 9,
      "endLine": 9,
      "complexity": "low",
      "parameters": [
        {
          "name": "`(max-width",
          "type": "${MOBILE_BREAKPOINT - 1}px"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "use-mobile.jsx",
        "path": "src/hooks/use-mobile.jsx"
      },
      "code": "    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)"
    },
    {
      "name": "onChange",
      "type": "function",
      "startLine": 10,
      "endLine": 12,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "function"
      ],
      "file": {
        "name": "use-mobile.jsx",
        "path": "src/hooks/use-mobile.jsx"
      },
      "code": "    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }"
    },
    {
      "name": "onChange",
      "type": "variable",
      "startLine": 10,
      "endLine": 12,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "use-mobile.jsx",
        "path": "src/hooks/use-mobile.jsx"
      },
      "code": "    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }"
    },
    {
      "name": "createPageUrl",
      "type": "function",
      "startLine": 4,
      "endLine": 6,
      "complexity": "low",
      "parameters": [
        {
          "name": "pageName",
          "type": "string"
        }
      ],
      "dependencies": [],
      "tags": [
        "function",
        "exported"
      ],
      "file": {
        "name": "index.ts",
        "path": "src/utils/index.ts"
      },
      "code": "export function createPageUrl(pageName: string) {\n    return '/' + pageName.toLowerCase().replace(/ /g, '-');\n}"
    },
    {
      "name": "KnowledgeBase",
      "type": "component",
      "startLine": 8,
      "endLine": 304,
      "complexity": "high",
      "dependencies": [],
      "tags": [
        "component",
        "react",
        "async",
        "default-export",
        "exported"
      ],
      "file": {
        "name": "KnowledgeBase.jsx",
        "path": "src/pages/KnowledgeBase.jsx"
      },
      "code": "export default function KnowledgeBase() {\n  const [documents, setDocuments] = useState([]);\n  const [filteredDocuments, setFilteredDocuments] = useState([]);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [selectedCategory, setSelectedCategory] = useState(\"all\");\n  const [selectedTag, setSelectedTag] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(true);\n  const [selectedDocument, setSelectedDocument] = useState(null);\n\n  const categories = [\"all\", \"documentation\", \"tutorial\", \"code\", \"reference\", \"article\", \"book\", \"other\"];\n\n  useEffect(() => {\n    loadDocuments();\n  }, []);\n\n  useEffect(() => {\n    let filtered = documents;\n\n    if (searchTerm) {\n      filtered = filtered.filter(doc => \n        doc.title.toLowerCase().includes(searchTerm.toLowerCase()) ||\n        doc.content.toLowerCase().includes(searchTerm.toLowerCase()) ||\n        doc.summary?.toLowerCase().includes(searchTerm.toLowerCase())\n      );\n    }\n\n    if (selectedCategory !== \"all\") {\n      filtered = filtered.filter(doc => doc.category === selectedCategory);\n    }\n\n    if (selectedTag) {\n      filtered = filtered.filter(doc => \n        doc.tags && doc.tags.some(tag => \n          tag.toLowerCase().includes(selectedTag.toLowerCase())\n        )\n      );\n    }\n\n    setFilteredDocuments(filtered);\n  }, [documents, searchTerm, selectedCategory, selectedTag]);\n\n  const loadDocuments = async () => {\n    try {\n      const docs = await Document.list(\"-created_date\");\n      setDocuments(docs);\n    } catch (error) {\n      console.error(\"Error loading documents:\", error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const getAllTags = () => {\n    const allTags = documents.flatMap(doc => doc.tags || []);\n    return [...new Set(allTags)].sort();\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"text-center py-16\">\n        <div className=\"bg-blue-500 border-4 border-black brutalist-shadow p-8 inline-block\">\n          <p className=\"font-black text-xl text-white uppercase\">\n            LOADING KNOWLEDGE BASE...\n          </p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-8\">\n      {/* Header */}\n      <div className=\"text-center mb-12\">\n        <h1 className=\"text-5xl font-black text-black uppercase tracking-tight mb-4\">\n          KNOWLEDGE BASE\n        </h1>\n        <div className=\"bg-green-500 border-4 border-black brutalist-shadow p-4 inline-block\">\n          <p className=\"font-black text-xl text-white uppercase tracking-wider\">\n            {documents.length} DOCUMENTS INDEXED\n          </p>\n        </div>\n      </div>\n\n      {/* Filters */}\n      <BrutalistCard>\n        <div className=\"space-y-6\">\n          <h3 className=\"text-xl font-black uppercase tracking-wider mb-4\">\n            SEARCH & FILTER\n          </h3>\n\n          {/* Search Bar */}\n          <div className=\"relative\">\n            <Search className=\"absolute left-4 top-1/2 transform -translate-y-1/2 w-5 h-5 text-black\" />\n            <input\n              type=\"text\"\n              placeholder=\"SEARCH DOCUMENTS...\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              className=\"brutalist-input w-full pl-12 pr-4 py-3 text-black font-black uppercase placeholder-gray-500\"\n            />\n          </div>\n\n          {/* Category Filter */}\n          <div>\n            <label className=\"block font-black text-sm uppercase mb-2\">CATEGORY</label>\n            <select\n              value={selectedCategory}\n              onChange={(e) => setSelectedCategory(e.target.value)}\n              className=\"brutalist-input w-full py-3 text-black font-black uppercase\"\n            >\n              {categories.map(category => (\n                <option key={category} value={category}>\n                  {category.toUpperCase().replace('_', ' ')}\n                </option>\n              ))}\n            </select>\n          </div>\n\n          {/* Tag Filter */}\n          <div>\n            <label className=\"block font-black text-sm uppercase mb-2\">TAG</label>\n            <input\n              type=\"text\"\n              placeholder=\"FILTER BY TAG...\"\n              value={selectedTag}\n              onChange={(e) => setSelectedTag(e.target.value)}\n              className=\"brutalist-input w-full py-3 text-black font-black uppercase placeholder-gray-500\"\n            />\n          </div>\n\n          {/* Clear Filters */}\n          {(searchTerm || selectedCategory !== \"all\" || selectedTag) && (\n            <BrutalistButton\n              onClick={() => {\n                setSearchTerm(\"\");\n                setSelectedCategory(\"all\");\n                setSelectedTag(\"\");\n              }}\n              variant=\"outline\"\n            >\n              CLEAR ALL FILTERS\n            </BrutalistButton>\n          )}\n        </div>\n      </BrutalistCard>\n\n      {/* Results Count */}\n      <div className=\"text-center\">\n        <div className=\"bg-yellow-400 border-4 border-black brutalist-shadow p-3 inline-block\">\n          <p className=\"font-black text-lg text-black uppercase\">\n            SHOWING {filteredDocuments.length} OF {documents.length} DOCUMENTS\n          </p>\n        </div>\n      </div>\n\n      {/* Document Grid */}\n      <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-6\">\n        {filteredDocuments.map((doc) => (\n          <BrutalistCard key={doc.id} hover>\n            <div className=\"space-y-4\">\n              {/* Document Header */}\n              <div className=\"flex items-start justify-between\">\n                <div className=\"flex items-center space-x-3\">\n                  <FileText className=\"w-6 h-6 text-black\" />\n                  <div>\n                    <p className=\"font-black text-sm uppercase line-clamp-2\">\n                      {doc.title}\n                    </p>\n                    <p className=\"font-bold text-xs text-gray-600 mt-1\">\n                      {doc.file_type.toUpperCase()} • {doc.word_count} WORDS\n                    </p>\n                  </div>\n                </div>\n              </div>\n\n              {/* Summary */}\n              {doc.summary && (\n                <div className=\"bg-gray-100 border-2 border-black p-3\">\n                  <p className=\"font-bold text-xs text-gray-800 line-clamp-3\">\n                    {doc.summary}\n                  </p>\n                </div>\n              )}\n\n              {/* Tags */}\n              {doc.tags && doc.tags.length > 0 && (\n                <div className=\"flex flex-wrap gap-2\">\n                  {doc.tags.slice(0, 3).map((tag, index) => (\n                    <span\n                      key={index}\n                      className=\"bg-pink-500 text-white px-2 py-1 border-2 border-black font-black text-xs uppercase\"\n                    >\n                      {tag}\n                    </span>\n                  ))}\n                  {doc.tags.length > 3 && (\n                    <span className=\"bg-gray-500 text-white px-2 py-1 border-2 border-black font-black text-xs uppercase\">\n                      +{doc.tags.length - 3}\n                    </span>\n                  )}\n                </div>\n              )}\n\n              {/* Category Badge */}\n              <div className=\"flex items-center justify-between\">\n                <span className=\"bg-blue-500 text-white px-3 py-1 border-2 border-black font-black text-xs uppercase\">\n                  {doc.category}\n                </span>\n                <div className=\"flex space-x-2\">\n                  <button\n                    onClick={() => setSelectedDocument(doc)}\n                    className=\"bg-green-500 text-white p-2 border-2 border-black hover:bg-green-400\"\n                  >\n                    <Eye className=\"w-4 h-4\" />\n                  </button>\n                  {doc.file_url && (\n                    <a\n                      href={doc.file_url}\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                      className=\"bg-orange-500 text-white p-2 border-2 border-black hover:bg-orange-400\"\n                    >\n                      <Download className=\"w-4 h-4\" />\n                    </a>\n                  )}\n                </div>\n              </div>\n\n              {/* Date */}\n              <div className=\"flex items-center text-xs text-gray-500\">\n                <Calendar className=\"w-3 h-3 mr-1\" />\n                <span className=\"font-bold\">\n                  {new Date(doc.created_date).toLocaleDateString()}\n                </span>\n              </div>\n            </div>\n          </BrutalistCard>\n        ))}\n      </div>\n\n      {/* No Results */}\n      {filteredDocuments.length === 0 && !isLoading && (\n        <div className=\"text-center py-16\">\n          <div className=\"bg-red-500 border-4 border-black brutalist-shadow p-8 inline-block\">\n            <p className=\"font-black text-xl text-white uppercase mb-2\">\n              NO DOCUMENTS FOUND\n            </p>\n            <p className=\"font-bold text-sm text-white\">\n              TRY ADJUSTING YOUR FILTERS OR UPLOAD NEW CONTENT\n            </p>\n          </div>\n        </div>\n      )}\n\n      {/* Document Modal */}\n      {selectedDocument && (\n        <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50\">\n          <div className=\"bg-white border-4 border-black brutalist-shadow max-w-4xl w-full max-h-[90vh] overflow-y-auto\">\n            <div className=\"p-6\">\n              <div className=\"flex justify-between items-start mb-6\">\n                <div>\n                  <h2 className=\"text-2xl font-black uppercase mb-2\">\n                    {selectedDocument.title}\n                  </h2>\n                  <p className=\"font-bold text-gray-600\">\n                    {selectedDocument.file_type.toUpperCase()} • {selectedDocument.word_count} WORDS\n                  </p>\n                </div>\n                <BrutalistButton\n                  onClick={() => setSelectedDocument(null)}\n                  variant=\"danger\"\n                >\n                  CLOSE\n                </BrutalistButton>\n              </div>\n\n              {selectedDocument.summary && (\n                <div className=\"bg-yellow-100 border-4 border-black p-4 mb-6\">\n                  <h3 className=\"font-black text-sm uppercase mb-2\">AI SUMMARY</h3>\n                  <p className=\"font-bold text-sm\">{selectedDocument.summary}</p>\n                </div>\n              )}\n\n              <div className=\"bg-gray-100 border-4 border-black p-4\">\n                <h3 className=\"font-black text-sm uppercase mb-4\">CONTENT</h3>\n                <div className=\"whitespace-pre-wrap font-mono text-sm max-h-96 overflow-y-auto\">\n                  {selectedDocument.content.substring(0, 2000)}\n                  {selectedDocument.content.length > 2000 && \"...\"}\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}"
    },
    {
      "name": "categories",
      "type": "variable",
      "startLine": 17,
      "endLine": 17,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "KnowledgeBase.jsx",
        "path": "src/pages/KnowledgeBase.jsx"
      },
      "code": "  const categories = [\"all\", \"documentation\", \"tutorial\", \"code\", \"reference\", \"article\", \"book\", \"other\"];"
    },
    {
      "name": "filtered",
      "type": "variable",
      "startLine": 24,
      "endLine": 24,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "KnowledgeBase.jsx",
        "path": "src/pages/KnowledgeBase.jsx"
      },
      "code": "    let filtered = documents;"
    },
    {
      "name": "loadDocuments",
      "type": "function",
      "startLine": 49,
      "endLine": 58,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "function",
        "async"
      ],
      "file": {
        "name": "KnowledgeBase.jsx",
        "path": "src/pages/KnowledgeBase.jsx"
      },
      "code": "  const loadDocuments = async () => {\n    try {\n      const docs = await Document.list(\"-created_date\");\n      setDocuments(docs);\n    } catch (error) {\n      console.error(\"Error loading documents:\", error);\n    } finally {\n      setIsLoading(false);\n    }\n  };"
    },
    {
      "name": "loadDocuments",
      "type": "variable",
      "startLine": 49,
      "endLine": 58,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable",
        "async"
      ],
      "file": {
        "name": "KnowledgeBase.jsx",
        "path": "src/pages/KnowledgeBase.jsx"
      },
      "code": "  const loadDocuments = async () => {\n    try {\n      const docs = await Document.list(\"-created_date\");\n      setDocuments(docs);\n    } catch (error) {\n      console.error(\"Error loading documents:\", error);\n    } finally {\n      setIsLoading(false);\n    }\n  };"
    },
    {
      "name": "docs",
      "type": "variable",
      "startLine": 51,
      "endLine": 51,
      "complexity": "low",
      "parameters": [
        {
          "name": "\"-created_date\""
        }
      ],
      "dependencies": [],
      "tags": [
        "variable",
        "async"
      ],
      "file": {
        "name": "KnowledgeBase.jsx",
        "path": "src/pages/KnowledgeBase.jsx"
      },
      "code": "      const docs = await Document.list(\"-created_date\");"
    },
    {
      "name": "getAllTags",
      "type": "function",
      "startLine": 60,
      "endLine": 63,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "function"
      ],
      "file": {
        "name": "KnowledgeBase.jsx",
        "path": "src/pages/KnowledgeBase.jsx"
      },
      "code": "  const getAllTags = () => {\n    const allTags = documents.flatMap(doc => doc.tags || []);\n    return [...new Set(allTags)].sort();\n  };"
    },
    {
      "name": "getAllTags",
      "type": "variable",
      "startLine": 60,
      "endLine": 63,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "KnowledgeBase.jsx",
        "path": "src/pages/KnowledgeBase.jsx"
      },
      "code": "  const getAllTags = () => {\n    const allTags = documents.flatMap(doc => doc.tags || []);\n    return [...new Set(allTags)].sort();\n  };"
    },
    {
      "name": "allTags",
      "type": "variable",
      "startLine": 61,
      "endLine": 61,
      "complexity": "low",
      "parameters": [
        {
          "name": "doc => doc.tags || "
        }
      ],
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "KnowledgeBase.jsx",
        "path": "src/pages/KnowledgeBase.jsx"
      },
      "code": "    const allTags = documents.flatMap(doc => doc.tags || []);"
    },
    {
      "name": "Reports",
      "type": "component",
      "startLine": 9,
      "endLine": 441,
      "complexity": "high",
      "dependencies": [],
      "tags": [
        "component",
        "react",
        "async",
        "default-export",
        "exported"
      ],
      "file": {
        "name": "Reports.jsx",
        "path": "src/pages/Reports.jsx"
      },
      "code": "export default function Reports() {\n  const [reports, setReports] = useState([]);\n  const [generating, setGenerating] = useState(null);\n  const [analytics, setAnalytics] = useState({});\n  const [dateRange, setDateRange] = useState({\n    start_date: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],\n    end_date: new Date().toISOString().split('T')[0]\n  });\n\n  const reportTypes = [\n    {\n      type: \"usage_analytics\",\n      title: \"Usage Analytics Report\",\n      description: \"Detailed analysis of system usage, search patterns, and user activity\",\n      color: \"blue\"\n    },\n    {\n      type: \"content_summary\",\n      title: \"Content Summary Report\", \n      description: \"Overview of all indexed content, categorization, and growth metrics\",\n      color: \"green\"\n    },\n    {\n      type: \"search_insights\",\n      title: \"Search Insights Report\",\n      description: \"Analysis of search queries, popular topics, and result effectiveness\",\n      color: \"pink\"\n    },\n    {\n      type: \"processing_stats\",\n      title: \"Processing Statistics Report\",\n      description: \"System performance metrics, processing times, and efficiency analysis\",\n      color: \"orange\"\n    }\n  ];\n\n  useEffect(() => {\n    const loadReports = async () => {\n      try {\n        const reportsList = await Report.list(\"-created_date\");\n        setReports(reportsList);\n      } catch (error) {\n        console.error(\"Error loading reports:\", error);\n      }\n    };\n\n    const loadAnalytics = async () => {\n      try {\n        const [documents, searches, scrapedContent] = await Promise.all([\n          Document.list(),\n          SearchQuery.list(),\n          ScrapedContent.list()\n        ]);\n\n        const now = new Date();\n        const thirtyDaysAgo = new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000);\n\n        const recentDocuments = documents.filter(doc => \n          new Date(doc.created_date) >= thirtyDaysAgo\n        );\n\n        const recentSearches = searches.filter(search => \n          new Date(search.created_date) >= thirtyDaysAgo\n        );\n\n        const getTopCategories = (documents) => {\n          const categories = {};\n          documents.forEach(doc => {\n            categories[doc.category] = (categories[doc.category] || 0) + 1;\n          });\n          return Object.entries(categories)\n            .sort(([,a], [,b]) => b - a)\n            .slice(0, 5);\n        };\n\n        const getSearchTrends = (searches) => {\n          const trends = {};\n          searches.forEach(search => {\n            const words = search.query_text.toLowerCase().split(' ');\n            words.forEach(word => {\n              if (word.length > 3) { // Filter out very short words\n                trends[word] = (trends[word] || 0) + 1;\n              }\n            });\n          });\n          return Object.entries(trends)\n            .sort(([,a], [,b]) => b - a)\n            .slice(0, 10);\n        };\n\n        setAnalytics({\n          totalDocuments: documents.length,\n          totalSearches: searches.length,\n          totalScraped: scrapedContent.length,\n          recentDocuments: recentDocuments.length,\n          recentSearches: recentSearches.length,\n          avgSearchTime: searches.reduce((sum, s) => sum + (s.execution_time || 0), 0) / searches.length || 0,\n          topCategories: getTopCategories(documents),\n          searchTrends: getSearchTrends(recentSearches)\n        });\n\n      } catch (error) {\n        console.error(\"Error loading analytics:\", error);\n      }\n    };\n\n    loadReports();\n    loadAnalytics();\n  }, []);\n\n  const generateReport = async (reportType) => {\n    setGenerating(reportType);\n\n    try {\n      // Generate report data using AI\n      const reportData = await InvokeLLM({\n        prompt: `Generate a comprehensive ${reportType.replace('_', ' ')} report for a Python knowledge base platform.\n\nCurrent system statistics:\n- Total Documents: ${analytics.totalDocuments}\n- Total Searches: ${analytics.totalSearches}\n- Total Scraped Content: ${analytics.totalScraped}\n- Recent Documents (30 days): ${analytics.recentDocuments}\n- Recent Searches (30 days): ${analytics.recentSearches}\n- Average Search Time: ${analytics.avgSearchTime?.toFixed(2)}ms\n\nDate Range: ${dateRange.start_date} to ${dateRange.end_date}\n\nPlease provide:\n1. Executive Summary (2-3 paragraphs)\n2. Key Metrics and KPIs\n3. Detailed Analysis (5-7 sections)\n4. Recommendations (3-5 actionable items)\n5. Trends and Insights\n6. Performance Analysis\n\nMake it professional and data-driven with specific insights for a Python developer knowledge base.`,\n        response_json_schema: {\n          type: \"object\",\n          properties: {\n            executive_summary: { type: \"string\" },\n            key_metrics: {\n              type: \"object\",\n              properties: {\n                growth_rate: { type: \"string\" },\n                engagement_score: { type: \"string\" },\n                efficiency_rating: { type: \"string\" },\n                user_satisfaction: { type: \"string\" }\n              }\n            },\n            detailed_analysis: {\n              type: \"array\",\n              items: {\n                type: \"object\",\n                properties: {\n                  section: { type: \"string\" },\n                  content: { type: \"string\" }\n                }\n              }\n            },\n            recommendations: {\n              type: \"array\",\n              items: { type: \"string\" }\n            },\n            trends: {\n              type: \"array\",\n              items: { type: \"string\" }\n            }\n          }\n        }\n      });\n\n      // Create report record\n      const report = await Report.create({\n        report_type: reportType,\n        title: reportTypes.find(rt => rt.type === reportType)?.title || reportType,\n        data: reportData,\n        generation_status: \"completed\",\n        date_range: dateRange,\n        generated_by: \"System\"\n      });\n\n      // Reload reports\n      const reportsList = await Report.list(\"-created_date\");\n      setReports(reportsList);\n      \n    } catch (error) {\n      console.error(\"Error generating report:\", error);\n    } finally {\n      setGenerating(null);\n    }\n  };\n\n  const downloadReport = (report) => {\n    const reportContent = `\n# ${report.title}\nGenerated: ${new Date(report.created_date).toLocaleString()}\nDate Range: ${report.date_range?.start_date} to ${report.date_range?.end_date}\n\n## Executive Summary\n${report.data?.executive_summary || 'No summary available'}\n\n## Key Metrics\n${Object.entries(report.data?.key_metrics || {}).map(([key, value]) => `- ${key.replace('_', ' ').toUpperCase()}: ${value}`).join('\\n')}\n\n## Detailed Analysis\n${report.data?.detailed_analysis?.map(section => `### ${section.section}\\n${section.content}`).join('\\n\\n') || 'No detailed analysis available'}\n\n## Recommendations\n${report.data?.recommendations?.map((rec, i) => `${i + 1}. ${rec}`).join('\\n') || 'No recommendations available'}\n\n## Trends & Insights\n${report.data?.trends?.map((trend, i) => `${i + 1}. ${trend}`).join('\\n') || 'No trends available'}\n    `;\n\n    const blob = new Blob([reportContent], { type: 'text/markdown' });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = `${report.title.replace(/\\s+/g, '_')}_${new Date().toISOString().split('T')[0]}.md`;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n  };\n\n  return (\n    <div className=\"space-y-8\">\n      {/* Header */}\n      <div className=\"text-center mb-12\">\n        <h1 className=\"text-5xl font-black text-black uppercase tracking-tight mb-4\">\n          ANALYTICS & REPORTS\n        </h1>\n        <div className=\"bg-orange-500 border-4 border-black brutalist-shadow p-4 inline-block\">\n          <p className=\"font-black text-xl text-white uppercase tracking-wider\">\n            DATA-DRIVEN INSIGHTS\n          </p>\n        </div>\n      </div>\n\n      {/* Quick Stats */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n        <BrutalistCard color=\"blue\" hover>\n          <div className=\"text-center\">\n            <FileText className=\"w-8 h-8 text-black mx-auto mb-3\" />\n            <p className=\"font-black text-2xl text-black\">{analytics.totalDocuments || 0}</p>\n            <p className=\"font-bold text-sm text-black uppercase\">TOTAL DOCS</p>\n          </div>\n        </BrutalistCard>\n\n        <BrutalistCard color=\"green\" hover>\n          <div className=\"text-center\">\n            <BarChart3 className=\"w-8 h-8 text-black mx-auto mb-3\" />\n            <p className=\"font-black text-2xl text-black\">{analytics.totalSearches || 0}</p>\n            <p className=\"font-bold text-sm text-black uppercase\">SEARCHES</p>\n          </div>\n        </BrutalistCard>\n\n        <BrutalistCard color=\"pink\" hover>\n          <div className=\"text-center\">\n            <TrendingUp className=\"w-8 h-8 text-black mx-auto mb-3\" />\n            <p className=\"font-black text-2xl text-black\">{analytics.recentDocuments || 0}</p>\n            <p className=\"font-bold text-sm text-black uppercase\">THIS MONTH</p>\n          </div>\n        </BrutalistCard>\n\n        <BrutalistCard color=\"yellow\" hover>\n          <div className=\"text-center\">\n            <Calendar className=\"w-8 h-8 text-black mx-auto mb-3\" />\n            <p className=\"font-black text-2xl text-black\">{analytics.avgSearchTime?.toFixed(0) || 0}MS</p>\n            <p className=\"font-bold text-sm text-black uppercase\">AVG SEARCH</p>\n          </div>\n        </BrutalistCard>\n      </div>\n\n      {/* Report Generation */}\n      <BrutalistCard>\n        <h3 className=\"text-xl font-black uppercase tracking-wider mb-6\">\n          GENERATE NEW REPORT\n        </h3>\n\n        {/* Date Range */}\n        <div className=\"grid md:grid-cols-2 gap-4 mb-6\">\n          <div>\n            <label className=\"block font-black text-sm uppercase mb-2\">START DATE</label>\n            <input\n              type=\"date\"\n              value={dateRange.start_date}\n              onChange={(e) => setDateRange(prev => ({ ...prev, start_date: e.target.value }))}\n              className=\"brutalist-input w-full py-3 text-black font-black\"\n            />\n          </div>\n          <div>\n            <label className=\"block font-black text-sm uppercase mb-2\">END DATE</label>\n            <input\n              type=\"date\"\n              value={dateRange.end_date}\n              onChange={(e) => setDateRange(prev => ({ ...prev, end_date: e.target.value }))}\n              className=\"brutalist-input w-full py-3 text-black font-black\"\n            />\n          </div>\n        </div>\n\n        {/* Report Types */}\n        <div className=\"grid md:grid-cols-2 gap-6\">\n          {reportTypes.map((reportType) => (\n            <BrutalistCard key={reportType.type} color={reportType.color}>\n              <div className=\"space-y-4\">\n                <div>\n                  <h4 className=\"font-black text-lg text-black uppercase mb-2\">\n                    {reportType.title}\n                  </h4>\n                  <p className=\"font-bold text-sm text-black\">\n                    {reportType.description}\n                  </p>\n                </div>\n                \n                <BrutalistButton\n                  onClick={() => generateReport(reportType.type)}\n                  disabled={generating === reportType.type}\n                  variant=\"outline\"\n                  className=\"w-full\"\n                >\n                  {generating === reportType.type ? (\n                    <>\n                      <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                      GENERATING...\n                    </>\n                  ) : (\n                    <>\n                      <BarChart3 className=\"w-4 h-4 mr-2\" />\n                      GENERATE\n                    </>\n                  )}\n                </BrutalistButton>\n              </div>\n            </BrutalistCard>\n          ))}\n        </div>\n      </BrutalistCard>\n\n      {/* Generated Reports */}\n      <BrutalistCard>\n        <h3 className=\"text-xl font-black uppercase tracking-wider mb-6\">\n          GENERATED REPORTS ({reports.length})\n        </h3>\n\n        {reports.length === 0 ? (\n          <div className=\"text-center py-8\">\n            <div className=\"bg-gray-200 border-4 border-black p-6\">\n              <p className=\"font-black text-lg text-gray-600 uppercase\">\n                NO REPORTS GENERATED YET\n              </p>\n              <p className=\"font-bold text-sm text-gray-500 mt-2\">\n                Generate your first report using the options above\n              </p>\n            </div>\n          </div>\n        ) : (\n          <div className=\"space-y-4\">\n            {reports.map((report) => (\n              <div\n                key={report.id}\n                className=\"bg-gray-100 border-4 border-black p-6 flex items-center justify-between\"\n              >\n                <div className=\"flex items-center space-x-4\">\n                  <CheckCircle className=\"w-6 h-6 text-green-500\" />\n                  <div>\n                    <p className=\"font-black text-lg uppercase\">{report.title}</p>\n                    <div className=\"flex items-center space-x-4 mt-1\">\n                      <span className=\"font-bold text-sm text-gray-600\">\n                        Generated: {new Date(report.created_date).toLocaleDateString()}\n                      </span>\n                      {report.date_range && (\n                        <span className=\"font-bold text-sm text-gray-600\">\n                          Range: {report.date_range.start_date} to {report.date_range.end_date}\n                        </span>\n                      )}\n                    </div>\n                  </div>\n                </div>\n                \n                <div className=\"flex space-x-3\">\n                  <BrutalistButton\n                    onClick={() => downloadReport(report)}\n                    variant=\"success\"\n                    size=\"small\"\n                  >\n                    <Download className=\"w-4 h-4 mr-2\" />\n                    DOWNLOAD\n                  </BrutalistButton>\n                </div>\n              </div>\n            ))}\n          </div>\n        )}\n      </BrutalistCard>\n\n      {/* Quick Insights */}\n      <div className=\"grid md:grid-cols-2 gap-6\">\n        {/* Top Categories */}\n        <BrutalistCard>\n          <h4 className=\"font-black text-lg uppercase mb-4\">TOP CATEGORIES</h4>\n          <div className=\"space-y-3\">\n            {analytics.topCategories?.map(([category, count], index) => (\n              <div key={category} className=\"flex justify-between items-center\">\n                <span className=\"font-bold text-sm uppercase\">{category}</span>\n                <div className=\"bg-blue-500 text-white px-3 py-1 border-2 border-black font-black text-xs\">\n                  {count}\n                </div>\n              </div>\n            ))}\n          </div>\n        </BrutalistCard>\n\n        {/* Search Trends */}\n        <BrutalistCard>\n          <h4 className=\"font-black text-lg uppercase mb-4\">SEARCH TRENDS</h4>\n          <div className=\"space-y-3\">\n            {analytics.searchTrends?.slice(0, 5).map(([term, count], index) => (\n              <div key={term} className=\"flex justify-between items-center\">\n                <span className=\"font-bold text-sm uppercase\">\"{term}\"</span>\n                <div className=\"bg-pink-500 text-white px-3 py-1 border-2 border-black font-black text-xs\">\n                  {count}\n                </div>\n              </div>\n            ))}\n          </div>\n        </BrutalistCard>\n      </div>\n    </div>\n  );\n}"
    },
    {
      "name": "reportTypes",
      "type": "variable",
      "startLine": 18,
      "endLine": 24,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "Reports.jsx",
        "path": "src/pages/Reports.jsx"
      },
      "code": "  const reportTypes = [\n    {\n      type: \"usage_analytics\",\n      title: \"Usage Analytics Report\",\n      description: \"Detailed analysis of system usage, search patterns, and user activity\",\n      color: \"blue\"\n    },"
    },
    {
      "name": "loadReports",
      "type": "function",
      "startLine": 46,
      "endLine": 53,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "function",
        "async"
      ],
      "file": {
        "name": "Reports.jsx",
        "path": "src/pages/Reports.jsx"
      },
      "code": "    const loadReports = async () => {\n      try {\n        const reportsList = await Report.list(\"-created_date\");\n        setReports(reportsList);\n      } catch (error) {\n        console.error(\"Error loading reports:\", error);\n      }\n    };"
    },
    {
      "name": "loadReports",
      "type": "variable",
      "startLine": 46,
      "endLine": 53,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable",
        "async"
      ],
      "file": {
        "name": "Reports.jsx",
        "path": "src/pages/Reports.jsx"
      },
      "code": "    const loadReports = async () => {\n      try {\n        const reportsList = await Report.list(\"-created_date\");\n        setReports(reportsList);\n      } catch (error) {\n        console.error(\"Error loading reports:\", error);\n      }\n    };"
    },
    {
      "name": "reportsList",
      "type": "variable",
      "startLine": 48,
      "endLine": 48,
      "complexity": "low",
      "parameters": [
        {
          "name": "\"-created_date\""
        }
      ],
      "dependencies": [],
      "tags": [
        "variable",
        "async"
      ],
      "file": {
        "name": "Reports.jsx",
        "path": "src/pages/Reports.jsx"
      },
      "code": "        const reportsList = await Report.list(\"-created_date\");"
    },
    {
      "name": "loadAnalytics",
      "type": "function",
      "startLine": 55,
      "endLine": 113,
      "complexity": "medium",
      "dependencies": [],
      "tags": [
        "function",
        "async"
      ],
      "file": {
        "name": "Reports.jsx",
        "path": "src/pages/Reports.jsx"
      },
      "code": "    const loadAnalytics = async () => {\n      try {\n        const [documents, searches, scrapedContent] = await Promise.all([\n          Document.list(),\n          SearchQuery.list(),\n          ScrapedContent.list()\n        ]);\n\n        const now = new Date();\n        const thirtyDaysAgo = new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000);\n\n        const recentDocuments = documents.filter(doc => \n          new Date(doc.created_date) >= thirtyDaysAgo\n        );\n\n        const recentSearches = searches.filter(search => \n          new Date(search.created_date) >= thirtyDaysAgo\n        );\n\n        const getTopCategories = (documents) => {\n          const categories = {};\n          documents.forEach(doc => {\n            categories[doc.category] = (categories[doc.category] || 0) + 1;\n          });\n          return Object.entries(categories)\n            .sort(([,a], [,b]) => b - a)\n            .slice(0, 5);\n        };\n\n        const getSearchTrends = (searches) => {\n          const trends = {};\n          searches.forEach(search => {\n            const words = search.query_text.toLowerCase().split(' ');\n            words.forEach(word => {\n              if (word.length > 3) { // Filter out very short words\n                trends[word] = (trends[word] || 0) + 1;\n              }\n            });\n          });\n          return Object.entries(trends)\n            .sort(([,a], [,b]) => b - a)\n            .slice(0, 10);\n        };\n\n        setAnalytics({\n          totalDocuments: documents.length,\n          totalSearches: searches.length,\n          totalScraped: scrapedContent.length,\n          recentDocuments: recentDocuments.length,\n          recentSearches: recentSearches.length,\n          avgSearchTime: searches.reduce((sum, s) => sum + (s.execution_time || 0), 0) / searches.length || 0,\n          topCategories: getTopCategories(documents),\n          searchTrends: getSearchTrends(recentSearches)\n        });\n\n      } catch (error) {\n        console.error(\"Error loading analytics:\", error);\n      }\n    };"
    },
    {
      "name": "loadAnalytics",
      "type": "variable",
      "startLine": 55,
      "endLine": 113,
      "complexity": "medium",
      "dependencies": [],
      "tags": [
        "variable",
        "async"
      ],
      "file": {
        "name": "Reports.jsx",
        "path": "src/pages/Reports.jsx"
      },
      "code": "    const loadAnalytics = async () => {\n      try {\n        const [documents, searches, scrapedContent] = await Promise.all([\n          Document.list(),\n          SearchQuery.list(),\n          ScrapedContent.list()\n        ]);\n\n        const now = new Date();\n        const thirtyDaysAgo = new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000);\n\n        const recentDocuments = documents.filter(doc => \n          new Date(doc.created_date) >= thirtyDaysAgo\n        );\n\n        const recentSearches = searches.filter(search => \n          new Date(search.created_date) >= thirtyDaysAgo\n        );\n\n        const getTopCategories = (documents) => {\n          const categories = {};\n          documents.forEach(doc => {\n            categories[doc.category] = (categories[doc.category] || 0) + 1;\n          });\n          return Object.entries(categories)\n            .sort(([,a], [,b]) => b - a)\n            .slice(0, 5);\n        };\n\n        const getSearchTrends = (searches) => {\n          const trends = {};\n          searches.forEach(search => {\n            const words = search.query_text.toLowerCase().split(' ');\n            words.forEach(word => {\n              if (word.length > 3) { // Filter out very short words\n                trends[word] = (trends[word] || 0) + 1;\n              }\n            });\n          });\n          return Object.entries(trends)\n            .sort(([,a], [,b]) => b - a)\n            .slice(0, 10);\n        };\n\n        setAnalytics({\n          totalDocuments: documents.length,\n          totalSearches: searches.length,\n          totalScraped: scrapedContent.length,\n          recentDocuments: recentDocuments.length,\n          recentSearches: recentSearches.length,\n          avgSearchTime: searches.reduce((sum, s) => sum + (s.execution_time || 0), 0) / searches.length || 0,\n          topCategories: getTopCategories(documents),\n          searchTrends: getSearchTrends(recentSearches)\n        });\n\n      } catch (error) {\n        console.error(\"Error loading analytics:\", error);\n      }\n    };"
    },
    {
      "name": "now",
      "type": "variable",
      "startLine": 63,
      "endLine": 63,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "Reports.jsx",
        "path": "src/pages/Reports.jsx"
      },
      "code": "        const now = new Date();"
    },
    {
      "name": "thirtyDaysAgo",
      "type": "variable",
      "startLine": 64,
      "endLine": 64,
      "complexity": "low",
      "parameters": [
        {
          "name": "now.getTime("
        }
      ],
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "Reports.jsx",
        "path": "src/pages/Reports.jsx"
      },
      "code": "        const thirtyDaysAgo = new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000);"
    },
    {
      "name": "recentDocuments",
      "type": "variable",
      "startLine": 66,
      "endLine": 69,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "Reports.jsx",
        "path": "src/pages/Reports.jsx"
      },
      "code": "        const recentDocuments = documents.filter(doc => \n          new Date(doc.created_date) >= thirtyDaysAgo\n        );\n"
    },
    {
      "name": "recentSearches",
      "type": "variable",
      "startLine": 70,
      "endLine": 73,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "Reports.jsx",
        "path": "src/pages/Reports.jsx"
      },
      "code": "        const recentSearches = searches.filter(search => \n          new Date(search.created_date) >= thirtyDaysAgo\n        );\n"
    },
    {
      "name": "getTopCategories",
      "type": "function",
      "startLine": 74,
      "endLine": 82,
      "complexity": "low",
      "parameters": [
        {
          "name": "documents"
        }
      ],
      "dependencies": [],
      "tags": [
        "function"
      ],
      "file": {
        "name": "Reports.jsx",
        "path": "src/pages/Reports.jsx"
      },
      "code": "        const getTopCategories = (documents) => {\n          const categories = {};\n          documents.forEach(doc => {\n            categories[doc.category] = (categories[doc.category] || 0) + 1;\n          });\n          return Object.entries(categories)\n            .sort(([,a], [,b]) => b - a)\n            .slice(0, 5);\n        };"
    },
    {
      "name": "getTopCategories",
      "type": "variable",
      "startLine": 74,
      "endLine": 82,
      "complexity": "low",
      "parameters": [
        {
          "name": "documents"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "Reports.jsx",
        "path": "src/pages/Reports.jsx"
      },
      "code": "        const getTopCategories = (documents) => {\n          const categories = {};\n          documents.forEach(doc => {\n            categories[doc.category] = (categories[doc.category] || 0) + 1;\n          });\n          return Object.entries(categories)\n            .sort(([,a], [,b]) => b - a)\n            .slice(0, 5);\n        };"
    },
    {
      "name": "categories",
      "type": "variable",
      "startLine": 75,
      "endLine": 75,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "Reports.jsx",
        "path": "src/pages/Reports.jsx"
      },
      "code": "          const categories = {};"
    },
    {
      "name": "getSearchTrends",
      "type": "function",
      "startLine": 84,
      "endLine": 97,
      "complexity": "low",
      "parameters": [
        {
          "name": "searches"
        }
      ],
      "dependencies": [],
      "tags": [
        "function"
      ],
      "file": {
        "name": "Reports.jsx",
        "path": "src/pages/Reports.jsx"
      },
      "code": "        const getSearchTrends = (searches) => {\n          const trends = {};\n          searches.forEach(search => {\n            const words = search.query_text.toLowerCase().split(' ');\n            words.forEach(word => {\n              if (word.length > 3) { // Filter out very short words\n                trends[word] = (trends[word] || 0) + 1;\n              }\n            });\n          });\n          return Object.entries(trends)\n            .sort(([,a], [,b]) => b - a)\n            .slice(0, 10);\n        };"
    },
    {
      "name": "getSearchTrends",
      "type": "variable",
      "startLine": 84,
      "endLine": 97,
      "complexity": "low",
      "parameters": [
        {
          "name": "searches"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "Reports.jsx",
        "path": "src/pages/Reports.jsx"
      },
      "code": "        const getSearchTrends = (searches) => {\n          const trends = {};\n          searches.forEach(search => {\n            const words = search.query_text.toLowerCase().split(' ');\n            words.forEach(word => {\n              if (word.length > 3) { // Filter out very short words\n                trends[word] = (trends[word] || 0) + 1;\n              }\n            });\n          });\n          return Object.entries(trends)\n            .sort(([,a], [,b]) => b - a)\n            .slice(0, 10);\n        };"
    },
    {
      "name": "trends",
      "type": "variable",
      "startLine": 85,
      "endLine": 85,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "Reports.jsx",
        "path": "src/pages/Reports.jsx"
      },
      "code": "          const trends = {};"
    },
    {
      "name": "words",
      "type": "variable",
      "startLine": 87,
      "endLine": 87,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "Reports.jsx",
        "path": "src/pages/Reports.jsx"
      },
      "code": "            const words = search.query_text.toLowerCase().split(' ');"
    },
    {
      "name": "generateReport",
      "type": "function",
      "startLine": 119,
      "endLine": 200,
      "complexity": "medium",
      "parameters": [
        {
          "name": "reportType"
        }
      ],
      "dependencies": [],
      "tags": [
        "function",
        "async"
      ],
      "file": {
        "name": "Reports.jsx",
        "path": "src/pages/Reports.jsx"
      },
      "code": "  const generateReport = async (reportType) => {\n    setGenerating(reportType);\n\n    try {\n      // Generate report data using AI\n      const reportData = await InvokeLLM({\n        prompt: `Generate a comprehensive ${reportType.replace('_', ' ')} report for a Python knowledge base platform.\n\nCurrent system statistics:\n- Total Documents: ${analytics.totalDocuments}\n- Total Searches: ${analytics.totalSearches}\n- Total Scraped Content: ${analytics.totalScraped}\n- Recent Documents (30 days): ${analytics.recentDocuments}\n- Recent Searches (30 days): ${analytics.recentSearches}\n- Average Search Time: ${analytics.avgSearchTime?.toFixed(2)}ms\n\nDate Range: ${dateRange.start_date} to ${dateRange.end_date}\n\nPlease provide:\n1. Executive Summary (2-3 paragraphs)\n2. Key Metrics and KPIs\n3. Detailed Analysis (5-7 sections)\n4. Recommendations (3-5 actionable items)\n5. Trends and Insights\n6. Performance Analysis\n\nMake it professional and data-driven with specific insights for a Python developer knowledge base.`,\n        response_json_schema: {\n          type: \"object\",\n          properties: {\n            executive_summary: { type: \"string\" },\n            key_metrics: {\n              type: \"object\",\n              properties: {\n                growth_rate: { type: \"string\" },\n                engagement_score: { type: \"string\" },\n                efficiency_rating: { type: \"string\" },\n                user_satisfaction: { type: \"string\" }\n              }\n            },\n            detailed_analysis: {\n              type: \"array\",\n              items: {\n                type: \"object\",\n                properties: {\n                  section: { type: \"string\" },\n                  content: { type: \"string\" }\n                }\n              }\n            },\n            recommendations: {\n              type: \"array\",\n              items: { type: \"string\" }\n            },\n            trends: {\n              type: \"array\",\n              items: { type: \"string\" }\n            }\n          }\n        }\n      });\n\n      // Create report record\n      const report = await Report.create({\n        report_type: reportType,\n        title: reportTypes.find(rt => rt.type === reportType)?.title || reportType,\n        data: reportData,\n        generation_status: \"completed\",\n        date_range: dateRange,\n        generated_by: \"System\"\n      });\n\n      // Reload reports\n      const reportsList = await Report.list(\"-created_date\");\n      setReports(reportsList);\n      \n    } catch (error) {\n      console.error(\"Error generating report:\", error);\n    } finally {\n      setGenerating(null);\n    }\n  };"
    },
    {
      "name": "generateReport",
      "type": "variable",
      "startLine": 119,
      "endLine": 200,
      "complexity": "medium",
      "parameters": [
        {
          "name": "reportType"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable",
        "async"
      ],
      "file": {
        "name": "Reports.jsx",
        "path": "src/pages/Reports.jsx"
      },
      "code": "  const generateReport = async (reportType) => {\n    setGenerating(reportType);\n\n    try {\n      // Generate report data using AI\n      const reportData = await InvokeLLM({\n        prompt: `Generate a comprehensive ${reportType.replace('_', ' ')} report for a Python knowledge base platform.\n\nCurrent system statistics:\n- Total Documents: ${analytics.totalDocuments}\n- Total Searches: ${analytics.totalSearches}\n- Total Scraped Content: ${analytics.totalScraped}\n- Recent Documents (30 days): ${analytics.recentDocuments}\n- Recent Searches (30 days): ${analytics.recentSearches}\n- Average Search Time: ${analytics.avgSearchTime?.toFixed(2)}ms\n\nDate Range: ${dateRange.start_date} to ${dateRange.end_date}\n\nPlease provide:\n1. Executive Summary (2-3 paragraphs)\n2. Key Metrics and KPIs\n3. Detailed Analysis (5-7 sections)\n4. Recommendations (3-5 actionable items)\n5. Trends and Insights\n6. Performance Analysis\n\nMake it professional and data-driven with specific insights for a Python developer knowledge base.`,\n        response_json_schema: {\n          type: \"object\",\n          properties: {\n            executive_summary: { type: \"string\" },\n            key_metrics: {\n              type: \"object\",\n              properties: {\n                growth_rate: { type: \"string\" },\n                engagement_score: { type: \"string\" },\n                efficiency_rating: { type: \"string\" },\n                user_satisfaction: { type: \"string\" }\n              }\n            },\n            detailed_analysis: {\n              type: \"array\",\n              items: {\n                type: \"object\",\n                properties: {\n                  section: { type: \"string\" },\n                  content: { type: \"string\" }\n                }\n              }\n            },\n            recommendations: {\n              type: \"array\",\n              items: { type: \"string\" }\n            },\n            trends: {\n              type: \"array\",\n              items: { type: \"string\" }\n            }\n          }\n        }\n      });\n\n      // Create report record\n      const report = await Report.create({\n        report_type: reportType,\n        title: reportTypes.find(rt => rt.type === reportType)?.title || reportType,\n        data: reportData,\n        generation_status: \"completed\",\n        date_range: dateRange,\n        generated_by: \"System\"\n      });\n\n      // Reload reports\n      const reportsList = await Report.list(\"-created_date\");\n      setReports(reportsList);\n      \n    } catch (error) {\n      console.error(\"Error generating report:\", error);\n    } finally {\n      setGenerating(null);\n    }\n  };"
    },
    {
      "name": "reportData",
      "type": "variable",
      "startLine": 124,
      "endLine": 179,
      "complexity": "medium",
      "dependencies": [],
      "tags": [
        "variable",
        "async"
      ],
      "file": {
        "name": "Reports.jsx",
        "path": "src/pages/Reports.jsx"
      },
      "code": "      const reportData = await InvokeLLM({\n        prompt: `Generate a comprehensive ${reportType.replace('_', ' ')} report for a Python knowledge base platform.\n\nCurrent system statistics:\n- Total Documents: ${analytics.totalDocuments}\n- Total Searches: ${analytics.totalSearches}\n- Total Scraped Content: ${analytics.totalScraped}\n- Recent Documents (30 days): ${analytics.recentDocuments}\n- Recent Searches (30 days): ${analytics.recentSearches}\n- Average Search Time: ${analytics.avgSearchTime?.toFixed(2)}ms\n\nDate Range: ${dateRange.start_date} to ${dateRange.end_date}\n\nPlease provide:\n1. Executive Summary (2-3 paragraphs)\n2. Key Metrics and KPIs\n3. Detailed Analysis (5-7 sections)\n4. Recommendations (3-5 actionable items)\n5. Trends and Insights\n6. Performance Analysis\n\nMake it professional and data-driven with specific insights for a Python developer knowledge base.`,\n        response_json_schema: {\n          type: \"object\",\n          properties: {\n            executive_summary: { type: \"string\" },\n            key_metrics: {\n              type: \"object\",\n              properties: {\n                growth_rate: { type: \"string\" },\n                engagement_score: { type: \"string\" },\n                efficiency_rating: { type: \"string\" },\n                user_satisfaction: { type: \"string\" }\n              }\n            },\n            detailed_analysis: {\n              type: \"array\",\n              items: {\n                type: \"object\",\n                properties: {\n                  section: { type: \"string\" },\n                  content: { type: \"string\" }\n                }\n              }\n            },\n            recommendations: {\n              type: \"array\",\n              items: { type: \"string\" }\n            },\n            trends: {\n              type: \"array\",\n              items: { type: \"string\" }\n            }\n          }\n        }\n      });"
    },
    {
      "name": "report",
      "type": "variable",
      "startLine": 182,
      "endLine": 189,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable",
        "async"
      ],
      "file": {
        "name": "Reports.jsx",
        "path": "src/pages/Reports.jsx"
      },
      "code": "      const report = await Report.create({\n        report_type: reportType,\n        title: reportTypes.find(rt => rt.type === reportType)?.title || reportType,\n        data: reportData,\n        generation_status: \"completed\",\n        date_range: dateRange,\n        generated_by: \"System\"\n      });"
    },
    {
      "name": "reportsList",
      "type": "variable",
      "startLine": 192,
      "endLine": 192,
      "complexity": "low",
      "parameters": [
        {
          "name": "\"-created_date\""
        }
      ],
      "dependencies": [],
      "tags": [
        "variable",
        "async"
      ],
      "file": {
        "name": "Reports.jsx",
        "path": "src/pages/Reports.jsx"
      },
      "code": "      const reportsList = await Report.list(\"-created_date\");"
    },
    {
      "name": "downloadReport",
      "type": "function",
      "startLine": 202,
      "endLine": 233,
      "complexity": "medium",
      "parameters": [
        {
          "name": "report"
        }
      ],
      "dependencies": [],
      "tags": [
        "function"
      ],
      "file": {
        "name": "Reports.jsx",
        "path": "src/pages/Reports.jsx"
      },
      "code": "  const downloadReport = (report) => {\n    const reportContent = `\n# ${report.title}\nGenerated: ${new Date(report.created_date).toLocaleString()}\nDate Range: ${report.date_range?.start_date} to ${report.date_range?.end_date}\n\n## Executive Summary\n${report.data?.executive_summary || 'No summary available'}\n\n## Key Metrics\n${Object.entries(report.data?.key_metrics || {}).map(([key, value]) => `- ${key.replace('_', ' ').toUpperCase()}: ${value}`).join('\\n')}\n\n## Detailed Analysis\n${report.data?.detailed_analysis?.map(section => `### ${section.section}\\n${section.content}`).join('\\n\\n') || 'No detailed analysis available'}\n\n## Recommendations\n${report.data?.recommendations?.map((rec, i) => `${i + 1}. ${rec}`).join('\\n') || 'No recommendations available'}\n\n## Trends & Insights\n${report.data?.trends?.map((trend, i) => `${i + 1}. ${trend}`).join('\\n') || 'No trends available'}\n    `;\n\n    const blob = new Blob([reportContent], { type: 'text/markdown' });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = `${report.title.replace(/\\s+/g, '_')}_${new Date().toISOString().split('T')[0]}.md`;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n  };"
    },
    {
      "name": "downloadReport",
      "type": "variable",
      "startLine": 202,
      "endLine": 233,
      "complexity": "medium",
      "parameters": [
        {
          "name": "report"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "Reports.jsx",
        "path": "src/pages/Reports.jsx"
      },
      "code": "  const downloadReport = (report) => {\n    const reportContent = `\n# ${report.title}\nGenerated: ${new Date(report.created_date).toLocaleString()}\nDate Range: ${report.date_range?.start_date} to ${report.date_range?.end_date}\n\n## Executive Summary\n${report.data?.executive_summary || 'No summary available'}\n\n## Key Metrics\n${Object.entries(report.data?.key_metrics || {}).map(([key, value]) => `- ${key.replace('_', ' ').toUpperCase()}: ${value}`).join('\\n')}\n\n## Detailed Analysis\n${report.data?.detailed_analysis?.map(section => `### ${section.section}\\n${section.content}`).join('\\n\\n') || 'No detailed analysis available'}\n\n## Recommendations\n${report.data?.recommendations?.map((rec, i) => `${i + 1}. ${rec}`).join('\\n') || 'No recommendations available'}\n\n## Trends & Insights\n${report.data?.trends?.map((trend, i) => `${i + 1}. ${trend}`).join('\\n') || 'No trends available'}\n    `;\n\n    const blob = new Blob([reportContent], { type: 'text/markdown' });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = `${report.title.replace(/\\s+/g, '_')}_${new Date().toISOString().split('T')[0]}.md`;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n  };"
    },
    {
      "name": "reportContent",
      "type": "variable",
      "startLine": 203,
      "endLine": 204,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "Reports.jsx",
        "path": "src/pages/Reports.jsx"
      },
      "code": "    const reportContent = `\n# ${report.title}"
    },
    {
      "name": "blob",
      "type": "variable",
      "startLine": 224,
      "endLine": 224,
      "complexity": "low",
      "parameters": [
        {
          "name": "reportContent"
        },
        {
          "name": " type",
          "type": "'text/markdown' }"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "Reports.jsx",
        "path": "src/pages/Reports.jsx"
      },
      "code": "    const blob = new Blob([reportContent], { type: 'text/markdown' });"
    },
    {
      "name": "url",
      "type": "variable",
      "startLine": 225,
      "endLine": 225,
      "complexity": "low",
      "parameters": [
        {
          "name": "blob"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "Reports.jsx",
        "path": "src/pages/Reports.jsx"
      },
      "code": "    const url = URL.createObjectURL(blob);"
    },
    {
      "name": "a",
      "type": "variable",
      "startLine": 226,
      "endLine": 226,
      "complexity": "low",
      "parameters": [
        {
          "name": "'a'"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "Reports.jsx",
        "path": "src/pages/Reports.jsx"
      },
      "code": "    const a = document.createElement('a');"
    },
    {
      "name": "Layout",
      "type": "component",
      "startLine": 17,
      "endLine": 17,
      "complexity": "low",
      "parameters": [
        {
          "name": " children"
        },
        {
          "name": "currentPageName "
        }
      ],
      "dependencies": [],
      "tags": [
        "component",
        "default-export",
        "exported"
      ],
      "file": {
        "name": "Layout.jsx",
        "path": "src/pages/Layout.jsx"
      },
      "code": "export default function Layout({ children, currentPageName }) {"
    },
    {
      "name": "location",
      "type": "variable",
      "startLine": 18,
      "endLine": 18,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "Layout.jsx",
        "path": "src/pages/Layout.jsx"
      },
      "code": "  const location = useLocation();"
    },
    {
      "name": "navigationItems",
      "type": "variable",
      "startLine": 20,
      "endLine": 21,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "Layout.jsx",
        "path": "src/pages/Layout.jsx"
      },
      "code": "  const navigationItems = [\n    { name: \"Dashboard\", url: createPageUrl(\"Dashboard\"), icon: BarChart3 },"
    },
    {
      "name": "isActive",
      "type": "function",
      "startLine": 30,
      "endLine": 30,
      "complexity": "low",
      "parameters": [
        {
          "name": "url"
        }
      ],
      "dependencies": [],
      "tags": [
        "function"
      ],
      "file": {
        "name": "Layout.jsx",
        "path": "src/pages/Layout.jsx"
      },
      "code": "  const isActive = (url) => location.pathname === url;"
    },
    {
      "name": "isActive",
      "type": "variable",
      "startLine": 30,
      "endLine": 30,
      "complexity": "low",
      "parameters": [
        {
          "name": "url"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "Layout.jsx",
        "path": "src/pages/Layout.jsx"
      },
      "code": "  const isActive = (url) => location.pathname === url;"
    },
    {
      "name": "Icon",
      "type": "variable",
      "startLine": 119,
      "endLine": 119,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "Layout.jsx",
        "path": "src/pages/Layout.jsx"
      },
      "code": "              const Icon = item.icon;"
    },
    {
      "name": "active",
      "type": "variable",
      "startLine": 120,
      "endLine": 120,
      "complexity": "low",
      "parameters": [
        {
          "name": "item.url"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "Layout.jsx",
        "path": "src/pages/Layout.jsx"
      },
      "code": "              const active = isActive(item.url);"
    },
    {
      "name": "Settings",
      "type": "component",
      "startLine": 7,
      "endLine": 369,
      "complexity": "high",
      "dependencies": [],
      "tags": [
        "component",
        "react",
        "async",
        "default-export",
        "exported"
      ],
      "file": {
        "name": "Settings.jsx",
        "path": "src/pages/Settings.jsx"
      },
      "code": "export default function Settings() {\n  const [settings, setSettings] = useState({\n    ai_model: \"gpt-4\",\n    processing_batch_size: 10,\n    search_results_limit: 50,\n    auto_tag_generation: true,\n    semantic_search_enabled: true,\n    summary_generation: true,\n    content_filtering: true,\n    processing_timeout: 300,\n    max_file_size: 50,\n    notification_email: \"\",\n    backup_frequency: \"daily\",\n    data_retention_days: 365\n  });\n\n  const [saving, setSaving] = useState(false);\n  const [resetConfirm, setResetConfirm] = useState(false);\n  const [user, setUser] = useState(null);\n  const [systemStats, setSystemStats] = useState({\n    uptime: \"99.9%\",\n    storage_used: \"2.3 GB\",\n    total_storage: \"100 GB\",\n    api_calls_today: 1247,\n    processing_queue_size: 3\n  });\n\n  useEffect(() => {\n    loadUserSettings();\n  }, []);\n\n  const loadUserSettings = async () => {\n    try {\n      const currentUser = await User.me();\n      setUser(currentUser);\n      \n      // Load user-specific settings if they exist\n      if (currentUser.settings) {\n        setSettings(prev => ({ ...prev, ...currentUser.settings }));\n      }\n      \n      if (currentUser.email) {\n        setSettings(prev => ({ ...prev, notification_email: currentUser.email }));\n      }\n    } catch (error) {\n      console.error(\"Error loading user settings:\", error);\n    }\n  };\n\n  const saveSettings = async () => {\n    setSaving(true);\n    try {\n      await User.updateMyUserData({ settings });\n      \n      // Show success feedback\n      setTimeout(() => setSaving(false), 1000);\n    } catch (error) {\n      console.error(\"Error saving settings:\", error);\n      setSaving(false);\n    }\n  };\n\n  const resetToDefaults = () => {\n    setSettings({\n      ai_model: \"gpt-4\",\n      processing_batch_size: 10,\n      search_results_limit: 50,\n      auto_tag_generation: true,\n      semantic_search_enabled: true,\n      summary_generation: true,\n      content_filtering: true,\n      processing_timeout: 300,\n      max_file_size: 50,\n      notification_email: user?.email || \"\",\n      backup_frequency: \"daily\",\n      data_retention_days: 365\n    });\n    setResetConfirm(false);\n  };\n\n  const handleSettingChange = (key, value) => {\n    setSettings(prev => ({ ...prev, [key]: value }));\n  };\n\n  return (\n    <div className=\"space-y-8\">\n      {/* Header */}\n      <div className=\"text-center mb-12\">\n        <h1 className=\"text-5xl font-black text-black uppercase tracking-tight mb-4\">\n          SYSTEM SETTINGS\n        </h1>\n        <div className=\"bg-blue-500 border-4 border-black brutalist-shadow p-4 inline-block\">\n          <p className=\"font-black text-xl text-white uppercase tracking-wider\">\n            CONFIGURE YOUR PLATFORM\n          </p>\n        </div>\n      </div>\n\n      {/* System Status */}\n      <BrutalistCard color=\"green\">\n        <h3 className=\"text-xl font-black uppercase tracking-wider mb-6\">\n          SYSTEM STATUS\n        </h3>\n        \n        <div className=\"grid md:grid-cols-5 gap-4\">\n          <div className=\"text-center\">\n            <p className=\"font-black text-2xl text-black mb-1\">{systemStats.uptime}</p>\n            <p className=\"font-bold text-xs text-black uppercase\">UPTIME</p>\n          </div>\n          <div className=\"text-center\">\n            <p className=\"font-black text-2xl text-black mb-1\">{systemStats.storage_used}</p>\n            <p className=\"font-bold text-xs text-black uppercase\">STORAGE</p>\n          </div>\n          <div className=\"text-center\">\n            <p className=\"font-black text-2xl text-black mb-1\">{systemStats.api_calls_today}</p>\n            <p className=\"font-bold text-xs text-black uppercase\">API CALLS</p>\n          </div>\n          <div className=\"text-center\">\n            <p className=\"font-black text-2xl text-black mb-1\">{systemStats.processing_queue_size}</p>\n            <p className=\"font-bold text-xs text-black uppercase\">IN QUEUE</p>\n          </div>\n          <div className=\"text-center\">\n            <CheckCircle className=\"w-8 h-8 text-black mx-auto mb-1\" />\n            <p className=\"font-bold text-xs text-black uppercase\">HEALTHY</p>\n          </div>\n        </div>\n      </BrutalistCard>\n\n      {/* AI & Processing Settings */}\n      <BrutalistCard>\n        <h3 className=\"text-xl font-black uppercase tracking-wider mb-6\">\n          AI & PROCESSING CONFIGURATION\n        </h3>\n        \n        <div className=\"grid md:grid-cols-2 gap-6\">\n          <div>\n            <label className=\"block font-black text-sm uppercase mb-2\">AI MODEL</label>\n            <select\n              value={settings.ai_model}\n              onChange={(e) => handleSettingChange('ai_model', e.target.value)}\n              className=\"brutalist-input w-full py-3 text-black font-black uppercase\"\n            >\n              <option value=\"gpt-4\">GPT-4 (RECOMMENDED)</option>\n              <option value=\"gpt-3.5-turbo\">GPT-3.5 TURBO (FASTER)</option>\n              <option value=\"claude-3\">CLAUDE 3 (ALTERNATIVE)</option>\n            </select>\n          </div>\n\n          <div>\n            <label className=\"block font-black text-sm uppercase mb-2\">PROCESSING BATCH SIZE</label>\n            <input\n              type=\"number\"\n              min=\"1\"\n              max=\"50\"\n              value={settings.processing_batch_size}\n              onChange={(e) => handleSettingChange('processing_batch_size', parseInt(e.target.value))}\n              className=\"brutalist-input w-full py-3 text-black font-black\"\n            />\n          </div>\n\n          <div>\n            <label className=\"block font-black text-sm uppercase mb-2\">SEARCH RESULTS LIMIT</label>\n            <input\n              type=\"number\"\n              min=\"10\"\n              max=\"200\"\n              value={settings.search_results_limit}\n              onChange={(e) => handleSettingChange('search_results_limit', parseInt(e.target.value))}\n              className=\"brutalist-input w-full py-3 text-black font-black\"\n            />\n          </div>\n\n          <div>\n            <label className=\"block font-black text-sm uppercase mb-2\">PROCESSING TIMEOUT (SECONDS)</label>\n            <input\n              type=\"number\"\n              min=\"60\"\n              max=\"600\"\n              value={settings.processing_timeout}\n              onChange={(e) => handleSettingChange('processing_timeout', parseInt(e.target.value))}\n              className=\"brutalist-input w-full py-3 text-black font-black\"\n            />\n          </div>\n        </div>\n      </BrutalistCard>\n\n      {/* Feature Toggles */}\n      <BrutalistCard>\n        <h3 className=\"text-xl font-black uppercase tracking-wider mb-6\">\n          FEATURE SETTINGS\n        </h3>\n        \n        <div className=\"grid md:grid-cols-2 gap-6\">\n          {[\n            { key: 'auto_tag_generation', label: 'AUTO TAG GENERATION', description: 'Automatically generate tags for uploaded content' },\n            { key: 'semantic_search_enabled', label: 'SEMANTIC SEARCH', description: 'Enable AI-powered semantic search capabilities' },\n            { key: 'summary_generation', label: 'SUMMARY GENERATION', description: 'Generate AI summaries for all content' },\n            { key: 'content_filtering', label: 'CONTENT FILTERING', description: 'Filter inappropriate or irrelevant content' }\n          ].map((feature) => (\n            <div\n              key={feature.key}\n              className={`\n                border-4 border-black p-4 cursor-pointer transition-all duration-200\n                ${settings[feature.key] ? 'bg-green-100' : 'bg-gray-100'}\n              `}\n              onClick={() => handleSettingChange(feature.key, !settings[feature.key])}\n            >\n              <div className=\"flex items-center justify-between mb-2\">\n                <p className=\"font-black text-sm uppercase\">{feature.label}</p>\n                <div className={`\n                  w-12 h-6 border-2 border-black relative\n                  ${settings[feature.key] ? 'bg-green-500' : 'bg-gray-400'}\n                `}>\n                  <div className={`\n                    w-4 h-4 bg-white border-2 border-black absolute top-0 transition-all duration-200\n                    ${settings[feature.key] ? 'right-0' : 'left-0'}\n                  `} />\n                </div>\n              </div>\n              <p className=\"font-bold text-xs text-gray-600\">{feature.description}</p>\n            </div>\n          ))}\n        </div>\n      </BrutalistCard>\n\n      {/* Storage & Data Settings */}\n      <BrutalistCard>\n        <h3 className=\"text-xl font-black uppercase tracking-wider mb-6\">\n          STORAGE & DATA MANAGEMENT\n        </h3>\n        \n        <div className=\"grid md:grid-cols-3 gap-6\">\n          <div>\n            <label className=\"block font-black text-sm uppercase mb-2\">MAX FILE SIZE (MB)</label>\n            <input\n              type=\"number\"\n              min=\"1\"\n              max=\"500\"\n              value={settings.max_file_size}\n              onChange={(e) => handleSettingChange('max_file_size', parseInt(e.target.value))}\n              className=\"brutalist-input w-full py-3 text-black font-black\"\n            />\n          </div>\n\n          <div>\n            <label className=\"block font-black text-sm uppercase mb-2\">BACKUP FREQUENCY</label>\n            <select\n              value={settings.backup_frequency}\n              onChange={(e) => handleSettingChange('backup_frequency', e.target.value)}\n              className=\"brutalist-input w-full py-3 text-black font-black uppercase\"\n            >\n              <option value=\"hourly\">HOURLY</option>\n              <option value=\"daily\">DAILY</option>\n              <option value=\"weekly\">WEEKLY</option>\n              <option value=\"monthly\">MONTHLY</option>\n            </select>\n          </div>\n\n          <div>\n            <label className=\"block font-black text-sm uppercase mb-2\">DATA RETENTION (DAYS)</label>\n            <input\n              type=\"number\"\n              min=\"30\"\n              max=\"3650\"\n              value={settings.data_retention_days}\n              onChange={(e) => handleSettingChange('data_retention_days', parseInt(e.target.value))}\n              className=\"brutalist-input w-full py-3 text-black font-black\"\n            />\n          </div>\n        </div>\n      </BrutalistCard>\n\n      {/* Notifications */}\n      <BrutalistCard>\n        <h3 className=\"text-xl font-black uppercase tracking-wider mb-6\">\n          NOTIFICATIONS\n        </h3>\n        \n        <div>\n          <label className=\"block font-black text-sm uppercase mb-2\">NOTIFICATION EMAIL</label>\n          <input\n            type=\"email\"\n            value={settings.notification_email}\n            onChange={(e) => handleSettingChange('notification_email', e.target.value)}\n            className=\"brutalist-input w-full py-3 text-black font-black\"\n            placeholder=\"YOUR@EMAIL.COM\"\n          />\n        </div>\n      </BrutalistCard>\n\n      {/* Actions */}\n      <div className=\"flex justify-between items-center\">\n        <div className=\"flex gap-4\">\n          <BrutalistButton\n            onClick={saveSettings}\n            disabled={saving}\n            variant=\"success\"\n            size=\"large\"\n          >\n            {saving ? (\n              <>\n                <RefreshCw className=\"w-5 h-5 mr-2 animate-spin\" />\n                SAVING...\n              </>\n            ) : (\n              <>\n                <Save className=\"w-5 h-5 mr-2\" />\n                SAVE SETTINGS\n              </>\n            )}\n          </BrutalistButton>\n        </div>\n\n        <div className=\"flex gap-4\">\n          {resetConfirm ? (\n            <div className=\"flex gap-2\">\n              <BrutalistButton\n                onClick={resetToDefaults}\n                variant=\"danger\"\n                size=\"small\"\n              >\n                <Trash2 className=\"w-4 h-4 mr-2\" />\n                CONFIRM RESET\n              </BrutalistButton>\n              <BrutalistButton\n                onClick={() => setResetConfirm(false)}\n                variant=\"outline\"\n                size=\"small\"\n              >\n                CANCEL\n              </BrutalistButton>\n            </div>\n          ) : (\n            <BrutalistButton\n              onClick={() => setResetConfirm(true)}\n              variant=\"outline\"\n            >\n              <AlertTriangle className=\"w-4 h-4 mr-2\" />\n              RESET TO DEFAULTS\n            </BrutalistButton>\n          )}\n        </div>\n      </div>\n\n      {/* Warning */}\n      <BrutalistCard color=\"yellow\">\n        <div className=\"flex items-start space-x-4\">\n          <AlertTriangle className=\"w-6 h-6 text-black mt-1\" />\n          <div>\n            <p className=\"font-black text-sm text-black uppercase mb-2\">\n              CONFIGURATION WARNING\n            </p>\n            <p className=\"font-bold text-sm text-black\">\n              Changes to AI model and processing settings may affect system performance. \n              Higher batch sizes and shorter timeouts may cause processing failures. \n              Test changes with small datasets first.\n            </p>\n          </div>\n        </div>\n      </BrutalistCard>\n    </div>\n  );\n}"
    },
    {
      "name": "loadUserSettings",
      "type": "function",
      "startLine": 38,
      "endLine": 54,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "function",
        "async"
      ],
      "file": {
        "name": "Settings.jsx",
        "path": "src/pages/Settings.jsx"
      },
      "code": "  const loadUserSettings = async () => {\n    try {\n      const currentUser = await User.me();\n      setUser(currentUser);\n      \n      // Load user-specific settings if they exist\n      if (currentUser.settings) {\n        setSettings(prev => ({ ...prev, ...currentUser.settings }));\n      }\n      \n      if (currentUser.email) {\n        setSettings(prev => ({ ...prev, notification_email: currentUser.email }));\n      }\n    } catch (error) {\n      console.error(\"Error loading user settings:\", error);\n    }\n  };"
    },
    {
      "name": "loadUserSettings",
      "type": "variable",
      "startLine": 38,
      "endLine": 54,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable",
        "async"
      ],
      "file": {
        "name": "Settings.jsx",
        "path": "src/pages/Settings.jsx"
      },
      "code": "  const loadUserSettings = async () => {\n    try {\n      const currentUser = await User.me();\n      setUser(currentUser);\n      \n      // Load user-specific settings if they exist\n      if (currentUser.settings) {\n        setSettings(prev => ({ ...prev, ...currentUser.settings }));\n      }\n      \n      if (currentUser.email) {\n        setSettings(prev => ({ ...prev, notification_email: currentUser.email }));\n      }\n    } catch (error) {\n      console.error(\"Error loading user settings:\", error);\n    }\n  };"
    },
    {
      "name": "currentUser",
      "type": "variable",
      "startLine": 40,
      "endLine": 40,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable",
        "async"
      ],
      "file": {
        "name": "Settings.jsx",
        "path": "src/pages/Settings.jsx"
      },
      "code": "      const currentUser = await User.me();"
    },
    {
      "name": "saveSettings",
      "type": "function",
      "startLine": 56,
      "endLine": 67,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "function",
        "async"
      ],
      "file": {
        "name": "Settings.jsx",
        "path": "src/pages/Settings.jsx"
      },
      "code": "  const saveSettings = async () => {\n    setSaving(true);\n    try {\n      await User.updateMyUserData({ settings });\n      \n      // Show success feedback\n      setTimeout(() => setSaving(false), 1000);\n    } catch (error) {\n      console.error(\"Error saving settings:\", error);\n      setSaving(false);\n    }\n  };"
    },
    {
      "name": "saveSettings",
      "type": "variable",
      "startLine": 56,
      "endLine": 67,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable",
        "async"
      ],
      "file": {
        "name": "Settings.jsx",
        "path": "src/pages/Settings.jsx"
      },
      "code": "  const saveSettings = async () => {\n    setSaving(true);\n    try {\n      await User.updateMyUserData({ settings });\n      \n      // Show success feedback\n      setTimeout(() => setSaving(false), 1000);\n    } catch (error) {\n      console.error(\"Error saving settings:\", error);\n      setSaving(false);\n    }\n  };"
    },
    {
      "name": "resetToDefaults",
      "type": "function",
      "startLine": 69,
      "endLine": 85,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "function"
      ],
      "file": {
        "name": "Settings.jsx",
        "path": "src/pages/Settings.jsx"
      },
      "code": "  const resetToDefaults = () => {\n    setSettings({\n      ai_model: \"gpt-4\",\n      processing_batch_size: 10,\n      search_results_limit: 50,\n      auto_tag_generation: true,\n      semantic_search_enabled: true,\n      summary_generation: true,\n      content_filtering: true,\n      processing_timeout: 300,\n      max_file_size: 50,\n      notification_email: user?.email || \"\",\n      backup_frequency: \"daily\",\n      data_retention_days: 365\n    });\n    setResetConfirm(false);\n  };"
    },
    {
      "name": "resetToDefaults",
      "type": "variable",
      "startLine": 69,
      "endLine": 85,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "Settings.jsx",
        "path": "src/pages/Settings.jsx"
      },
      "code": "  const resetToDefaults = () => {\n    setSettings({\n      ai_model: \"gpt-4\",\n      processing_batch_size: 10,\n      search_results_limit: 50,\n      auto_tag_generation: true,\n      semantic_search_enabled: true,\n      summary_generation: true,\n      content_filtering: true,\n      processing_timeout: 300,\n      max_file_size: 50,\n      notification_email: user?.email || \"\",\n      backup_frequency: \"daily\",\n      data_retention_days: 365\n    });\n    setResetConfirm(false);\n  };"
    },
    {
      "name": "handleSettingChange",
      "type": "function",
      "startLine": 87,
      "endLine": 89,
      "complexity": "low",
      "parameters": [
        {
          "name": "key"
        },
        {
          "name": "value"
        }
      ],
      "dependencies": [],
      "tags": [
        "function"
      ],
      "file": {
        "name": "Settings.jsx",
        "path": "src/pages/Settings.jsx"
      },
      "code": "  const handleSettingChange = (key, value) => {\n    setSettings(prev => ({ ...prev, [key]: value }));\n  };"
    },
    {
      "name": "handleSettingChange",
      "type": "variable",
      "startLine": 87,
      "endLine": 89,
      "complexity": "low",
      "parameters": [
        {
          "name": "key"
        },
        {
          "name": "value"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "Settings.jsx",
        "path": "src/pages/Settings.jsx"
      },
      "code": "  const handleSettingChange = (key, value) => {\n    setSettings(prev => ({ ...prev, [key]: value }));\n  };"
    },
    {
      "name": "WebScraper",
      "type": "component",
      "startLine": 8,
      "endLine": 398,
      "complexity": "high",
      "dependencies": [],
      "tags": [
        "component",
        "react",
        "async",
        "default-export",
        "exported"
      ],
      "file": {
        "name": "WebScraper.jsx",
        "path": "src/pages/WebScraper.jsx"
      },
      "code": "export default function WebScraper() {\n  const [url, setUrl] = useState(\"\");\n  const [urls, setUrls] = useState([]);\n  const [scraping, setScraping] = useState(false);\n  const [scrapedContent, setScrapedContent] = useState([]);\n  const [processingQueue, setProcessingQueue] = useState([]);\n  const [results, setResults] = useState([]);\n\n  useEffect(() => {\n    loadScrapedContent();\n  }, []);\n\n  const loadScrapedContent = async () => {\n    try {\n      const content = await ScrapedContent.list(\"-created_date\");\n      setScrapedContent(content);\n    } catch (error) {\n      console.error(\"Error loading scraped content:\", error);\n    }\n  };\n\n  const addUrl = () => {\n    if (url.trim() && !urls.includes(url.trim())) {\n      setUrls(prev => [...prev, url.trim()]);\n      setUrl(\"\");\n    }\n  };\n\n  const removeUrl = (indexToRemove) => {\n    setUrls(prev => prev.filter((_, index) => index !== indexToRemove));\n  };\n\n  const startScraping = async () => {\n    if (urls.length === 0) return;\n\n    setScraping(true);\n    const scrapeResults = [];\n\n    // Add URLs to processing queue\n    const queueItems = urls.map(url => ({\n      url,\n      status: \"processing\",\n      timestamp: new Date().toLocaleTimeString()\n    }));\n    setProcessingQueue(queueItems);\n\n    for (let i = 0; i < urls.length; i++) {\n      const currentUrl = urls[i];\n      \n      try {\n        // Simulate web scraping with AI\n        const scrapingResult = await InvokeLLM({\n          prompt: `Simulate web scraping for the URL: ${currentUrl}\n\nPlease generate realistic scraped content as if you visited this URL. Provide:\n1. A realistic title for the page\n2. Main content (500-1000 words) related to Python development, tutorials, or documentation\n3. Determine the content type (article, documentation, tutorial, forum_post, blog, reference)\n4. Generate relevant tags (5-8 tags)\n5. Create a brief summary (2-3 sentences)\n\nMake the content educational and relevant to Python developers.`,\n          response_json_schema: {\n            type: \"object\",\n            properties: {\n              title: { type: \"string\" },\n              content: { type: \"string\" },\n              content_type: { type: \"string\" },\n              tags: { type: \"array\", items: { type: \"string\" } },\n              summary: { type: \"string\" },\n              word_count: { type: \"number\" }\n            }\n          }\n        });\n\n        // Create scraped content record\n        const scrapedRecord = await ScrapedContent.create({\n          source_url: currentUrl,\n          title: scrapingResult.title,\n          content: scrapingResult.content,\n          content_type: scrapingResult.content_type,\n          domain: new URL(currentUrl).hostname,\n          scrape_status: \"completed\",\n          word_count: scrapingResult.word_count,\n          summary: scrapingResult.summary,\n          tags: scrapingResult.tags,\n          scraped_at: new Date().toISOString()\n        });\n\n        scrapeResults.push({\n          url: currentUrl,\n          status: \"success\",\n          record: scrapedRecord\n        });\n\n        // Update queue status\n        setProcessingQueue(prev => \n          prev.map(item => \n            item.url === currentUrl \n              ? { ...item, status: \"completed\" }\n              : item\n          )\n        );\n\n      } catch (error) {\n        console.error(`Error scraping ${currentUrl}:`, error);\n        scrapeResults.push({\n          url: currentUrl,\n          status: \"error\",\n          error: error.message\n        });\n\n        setProcessingQueue(prev => \n          prev.map(item => \n            item.url === currentUrl \n              ? { ...item, status: \"failed\" }\n              : item\n          )\n        );\n      }\n    }\n\n    setResults(scrapeResults);\n    setScraping(false);\n    setUrls([]);\n    loadScrapedContent();\n  };\n\n  const clearQueue = () => {\n    setUrls([]);\n    setProcessingQueue([]);\n    setResults([]);\n  };\n\n  return (\n    <div className=\"space-y-8\">\n      {/* Header */}\n      <div className=\"text-center mb-12\">\n        <h1 className=\"text-5xl font-black text-black uppercase tracking-tight mb-4\">\n          WEB SCRAPER\n        </h1>\n        <div className=\"bg-pink-500 border-4 border-black brutalist-shadow p-4 inline-block\">\n          <p className=\"font-black text-xl text-white uppercase tracking-wider\">\n            HARVEST THE WEB FOR KNOWLEDGE\n          </p>\n        </div>\n      </div>\n\n      {/* URL Input */}\n      <BrutalistCard>\n        <h3 className=\"text-xl font-black uppercase tracking-wider mb-6\">\n          ADD URLs TO SCRAPE\n        </h3>\n        \n        <div className=\"flex gap-4 mb-6\">\n          <input\n            type=\"url\"\n            placeholder=\"HTTPS://EXAMPLE.COM...\"\n            value={url}\n            onChange={(e) => setUrl(e.target.value)}\n            onKeyPress={(e) => e.key === 'Enter' && addUrl()}\n            className=\"brutalist-input flex-1 py-3 text-black font-black uppercase placeholder-gray-500\"\n          />\n          <BrutalistButton onClick={addUrl} variant=\"primary\">\n            <Plus className=\"w-4 h-4 mr-2\" />\n            ADD URL\n          </BrutalistButton>\n        </div>\n\n        {/* URL Queue */}\n        {urls.length > 0 && (\n          <div className=\"space-y-4\">\n            <div className=\"flex justify-between items-center\">\n              <p className=\"font-black text-sm uppercase\">\n                QUEUED URLS ({urls.length})\n              </p>\n              <div className=\"flex gap-2\">\n                <BrutalistButton onClick={clearQueue} variant=\"outline\" size=\"small\">\n                  CLEAR ALL\n                </BrutalistButton>\n                <BrutalistButton \n                  onClick={startScraping} \n                  disabled={scraping}\n                  variant=\"success\"\n                >\n                  {scraping ? (\n                    <>\n                      <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                      SCRAPING...\n                    </>\n                  ) : (\n                    `SCRAPE ${urls.length} URLS`\n                  )}\n                </BrutalistButton>\n              </div>\n            </div>\n\n            <div className=\"space-y-3\">\n              {urls.map((urlItem, index) => (\n                <div\n                  key={index}\n                  className=\"bg-gray-100 border-4 border-black p-4 flex items-center justify-between\"\n                >\n                  <div className=\"flex items-center space-x-4\">\n                    <Globe className=\"w-5 h-5 text-black\" />\n                    <div>\n                      <p className=\"font-black text-sm break-all\">{urlItem}</p>\n                      <p className=\"font-bold text-xs text-gray-600\">\n                        {new URL(urlItem).hostname}\n                      </p>\n                    </div>\n                  </div>\n                  <BrutalistButton\n                    onClick={() => removeUrl(index)}\n                    variant=\"danger\"\n                    size=\"small\"\n                  >\n                    <Trash2 className=\"w-4 h-4\" />\n                  </BrutalistButton>\n                </div>\n              ))}\n            </div>\n          </div>\n        )}\n      </BrutalistCard>\n\n      {/* Processing Queue */}\n      {processingQueue.length > 0 && (\n        <BrutalistCard color=\"yellow\">\n          <h3 className=\"text-xl font-black uppercase tracking-wider mb-6\">\n            SCRAPING IN PROGRESS\n          </h3>\n          \n          <div className=\"space-y-4\">\n            {processingQueue.map((item, index) => (\n              <div\n                key={index}\n                className={`\n                  border-4 border-black p-4 flex items-center justify-between\n                  ${item.status === 'processing' ? 'bg-blue-100' : ''}\n                  ${item.status === 'completed' ? 'bg-green-100' : ''}\n                  ${item.status === 'failed' ? 'bg-red-100' : ''}\n                `}\n              >\n                <div className=\"flex items-center space-x-4\">\n                  {item.status === 'processing' && <Loader2 className=\"w-5 h-5 animate-spin text-blue-500\" />}\n                  {item.status === 'completed' && <CheckCircle className=\"w-5 h-5 text-green-500\" />}\n                  {item.status === 'failed' && <XCircle className=\"w-5 h-5 text-red-500\" />}\n                  \n                  <div>\n                    <p className=\"font-black text-sm break-all\">{item.url}</p>\n                    <p className=\"font-bold text-xs text-gray-600\">\n                      {item.timestamp}\n                    </p>\n                  </div>\n                </div>\n                \n                <div className={`\n                  px-3 py-1 border-2 border-black font-black text-xs uppercase\n                  ${item.status === 'processing' ? 'bg-blue-500 text-white' : ''}\n                  ${item.status === 'completed' ? 'bg-green-500 text-white' : ''}\n                  ${item.status === 'failed' ? 'bg-red-500 text-white' : ''}\n                `}>\n                  {item.status}\n                </div>\n              </div>\n            ))}\n          </div>\n        </BrutalistCard>\n      )}\n\n      {/* Results */}\n      {results.length > 0 && (\n        <BrutalistCard>\n          <h3 className=\"text-xl font-black uppercase tracking-wider mb-6\">\n            SCRAPING RESULTS\n          </h3>\n          \n          <div className=\"space-y-4\">\n            {results.map((result, index) => (\n              <div\n                key={index}\n                className={`\n                  border-4 border-black p-4\n                  ${result.status === 'success' ? 'bg-green-100' : 'bg-red-100'}\n                `}\n              >\n                <div className=\"flex items-center justify-between mb-3\">\n                  <div className=\"flex items-center space-x-4\">\n                    {result.status === 'success' ? (\n                      <CheckCircle className=\"w-6 h-6 text-green-500\" />\n                    ) : (\n                      <XCircle className=\"w-6 h-6 text-red-500\" />\n                    )}\n                    <div>\n                      <p className=\"font-black text-sm break-all\">{result.url}</p>\n                      <p className=\"font-bold text-xs text-gray-600\">\n                        Status: {result.status.toUpperCase()}\n                      </p>\n                    </div>\n                  </div>\n                  \n                  {result.status === 'success' && (\n                    <a\n                      href={result.url}\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                      className=\"bg-blue-500 text-white p-2 border-2 border-black hover:bg-blue-400\"\n                    >\n                      <ExternalLink className=\"w-4 h-4\" />\n                    </a>\n                  )}\n                </div>\n                \n                {result.status === 'success' && result.record && (\n                  <div className=\"bg-white border-2 border-black p-3\">\n                    <p className=\"font-black text-sm uppercase mb-2\">\n                      {result.record.title}\n                    </p>\n                    <p className=\"font-bold text-xs text-gray-600 mb-2\">\n                      {result.record.content_type.toUpperCase()} • {result.record.word_count} WORDS\n                    </p>\n                    <p className=\"font-bold text-sm text-gray-800\">\n                      {result.record.summary}\n                    </p>\n                  </div>\n                )}\n                \n                {result.status === 'error' && (\n                  <div className=\"bg-white border-2 border-black p-3\">\n                    <p className=\"font-bold text-sm text-red-600\">\n                      ERROR: {result.error}\n                    </p>\n                  </div>\n                )}\n              </div>\n            ))}\n          </div>\n        </BrutalistCard>\n      )}\n\n      {/* Scraped Content History */}\n      <BrutalistCard>\n        <h3 className=\"text-xl font-black uppercase tracking-wider mb-6\">\n          SCRAPED CONTENT HISTORY ({scrapedContent.length})\n        </h3>\n        \n        <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-4\">\n          {scrapedContent.slice(0, 6).map((item) => (\n            <div\n              key={item.id}\n              className=\"bg-gray-100 border-4 border-black p-4\"\n            >\n              <div className=\"flex items-start justify-between mb-3\">\n                <div>\n                  <p className=\"font-black text-sm uppercase line-clamp-2\">\n                    {item.title}\n                  </p>\n                  <p className=\"font-bold text-xs text-gray-600 mt-1\">\n                    {item.domain} • {item.word_count} WORDS\n                  </p>\n                </div>\n                <a\n                  href={item.source_url}\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                  className=\"bg-blue-500 text-white p-1 border-2 border-black hover:bg-blue-400\"\n                >\n                  <ExternalLink className=\"w-3 h-3\" />\n                </a>\n              </div>\n              \n              {item.tags && (\n                <div className=\"flex flex-wrap gap-1 mt-2\">\n                  {item.tags.slice(0, 2).map((tag, index) => (\n                    <span\n                      key={index}\n                      className=\"bg-pink-500 text-white px-2 py-1 border-1 border-black font-black text-xs uppercase\"\n                    >\n                      {tag}\n                    </span>\n                  ))}\n                </div>\n              )}\n            </div>\n          ))}\n        </div>\n      </BrutalistCard>\n    </div>\n  );\n}"
    },
    {
      "name": "loadScrapedContent",
      "type": "function",
      "startLine": 20,
      "endLine": 27,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "function",
        "async"
      ],
      "file": {
        "name": "WebScraper.jsx",
        "path": "src/pages/WebScraper.jsx"
      },
      "code": "  const loadScrapedContent = async () => {\n    try {\n      const content = await ScrapedContent.list(\"-created_date\");\n      setScrapedContent(content);\n    } catch (error) {\n      console.error(\"Error loading scraped content:\", error);\n    }\n  };"
    },
    {
      "name": "loadScrapedContent",
      "type": "variable",
      "startLine": 20,
      "endLine": 27,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable",
        "async"
      ],
      "file": {
        "name": "WebScraper.jsx",
        "path": "src/pages/WebScraper.jsx"
      },
      "code": "  const loadScrapedContent = async () => {\n    try {\n      const content = await ScrapedContent.list(\"-created_date\");\n      setScrapedContent(content);\n    } catch (error) {\n      console.error(\"Error loading scraped content:\", error);\n    }\n  };"
    },
    {
      "name": "content",
      "type": "variable",
      "startLine": 22,
      "endLine": 22,
      "complexity": "low",
      "parameters": [
        {
          "name": "\"-created_date\""
        }
      ],
      "dependencies": [],
      "tags": [
        "variable",
        "async"
      ],
      "file": {
        "name": "WebScraper.jsx",
        "path": "src/pages/WebScraper.jsx"
      },
      "code": "      const content = await ScrapedContent.list(\"-created_date\");"
    },
    {
      "name": "addUrl",
      "type": "function",
      "startLine": 29,
      "endLine": 34,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "function"
      ],
      "file": {
        "name": "WebScraper.jsx",
        "path": "src/pages/WebScraper.jsx"
      },
      "code": "  const addUrl = () => {\n    if (url.trim() && !urls.includes(url.trim())) {\n      setUrls(prev => [...prev, url.trim()]);\n      setUrl(\"\");\n    }\n  };"
    },
    {
      "name": "addUrl",
      "type": "variable",
      "startLine": 29,
      "endLine": 34,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "WebScraper.jsx",
        "path": "src/pages/WebScraper.jsx"
      },
      "code": "  const addUrl = () => {\n    if (url.trim() && !urls.includes(url.trim())) {\n      setUrls(prev => [...prev, url.trim()]);\n      setUrl(\"\");\n    }\n  };"
    },
    {
      "name": "removeUrl",
      "type": "function",
      "startLine": 36,
      "endLine": 38,
      "complexity": "low",
      "parameters": [
        {
          "name": "indexToRemove"
        }
      ],
      "dependencies": [],
      "tags": [
        "function"
      ],
      "file": {
        "name": "WebScraper.jsx",
        "path": "src/pages/WebScraper.jsx"
      },
      "code": "  const removeUrl = (indexToRemove) => {\n    setUrls(prev => prev.filter((_, index) => index !== indexToRemove));\n  };"
    },
    {
      "name": "removeUrl",
      "type": "variable",
      "startLine": 36,
      "endLine": 38,
      "complexity": "low",
      "parameters": [
        {
          "name": "indexToRemove"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "WebScraper.jsx",
        "path": "src/pages/WebScraper.jsx"
      },
      "code": "  const removeUrl = (indexToRemove) => {\n    setUrls(prev => prev.filter((_, index) => index !== indexToRemove));\n  };"
    },
    {
      "name": "startScraping",
      "type": "function",
      "startLine": 40,
      "endLine": 134,
      "complexity": "medium",
      "dependencies": [],
      "tags": [
        "function",
        "async"
      ],
      "file": {
        "name": "WebScraper.jsx",
        "path": "src/pages/WebScraper.jsx"
      },
      "code": "  const startScraping = async () => {\n    if (urls.length === 0) return;\n\n    setScraping(true);\n    const scrapeResults = [];\n\n    // Add URLs to processing queue\n    const queueItems = urls.map(url => ({\n      url,\n      status: \"processing\",\n      timestamp: new Date().toLocaleTimeString()\n    }));\n    setProcessingQueue(queueItems);\n\n    for (let i = 0; i < urls.length; i++) {\n      const currentUrl = urls[i];\n      \n      try {\n        // Simulate web scraping with AI\n        const scrapingResult = await InvokeLLM({\n          prompt: `Simulate web scraping for the URL: ${currentUrl}\n\nPlease generate realistic scraped content as if you visited this URL. Provide:\n1. A realistic title for the page\n2. Main content (500-1000 words) related to Python development, tutorials, or documentation\n3. Determine the content type (article, documentation, tutorial, forum_post, blog, reference)\n4. Generate relevant tags (5-8 tags)\n5. Create a brief summary (2-3 sentences)\n\nMake the content educational and relevant to Python developers.`,\n          response_json_schema: {\n            type: \"object\",\n            properties: {\n              title: { type: \"string\" },\n              content: { type: \"string\" },\n              content_type: { type: \"string\" },\n              tags: { type: \"array\", items: { type: \"string\" } },\n              summary: { type: \"string\" },\n              word_count: { type: \"number\" }\n            }\n          }\n        });\n\n        // Create scraped content record\n        const scrapedRecord = await ScrapedContent.create({\n          source_url: currentUrl,\n          title: scrapingResult.title,\n          content: scrapingResult.content,\n          content_type: scrapingResult.content_type,\n          domain: new URL(currentUrl).hostname,\n          scrape_status: \"completed\",\n          word_count: scrapingResult.word_count,\n          summary: scrapingResult.summary,\n          tags: scrapingResult.tags,\n          scraped_at: new Date().toISOString()\n        });\n\n        scrapeResults.push({\n          url: currentUrl,\n          status: \"success\",\n          record: scrapedRecord\n        });\n\n        // Update queue status\n        setProcessingQueue(prev => \n          prev.map(item => \n            item.url === currentUrl \n              ? { ...item, status: \"completed\" }\n              : item\n          )\n        );\n\n      } catch (error) {\n        console.error(`Error scraping ${currentUrl}:`, error);\n        scrapeResults.push({\n          url: currentUrl,\n          status: \"error\",\n          error: error.message\n        });\n\n        setProcessingQueue(prev => \n          prev.map(item => \n            item.url === currentUrl \n              ? { ...item, status: \"failed\" }\n              : item\n          )\n        );\n      }\n    }\n\n    setResults(scrapeResults);\n    setScraping(false);\n    setUrls([]);\n    loadScrapedContent();\n  };"
    },
    {
      "name": "startScraping",
      "type": "variable",
      "startLine": 40,
      "endLine": 134,
      "complexity": "medium",
      "dependencies": [],
      "tags": [
        "variable",
        "async"
      ],
      "file": {
        "name": "WebScraper.jsx",
        "path": "src/pages/WebScraper.jsx"
      },
      "code": "  const startScraping = async () => {\n    if (urls.length === 0) return;\n\n    setScraping(true);\n    const scrapeResults = [];\n\n    // Add URLs to processing queue\n    const queueItems = urls.map(url => ({\n      url,\n      status: \"processing\",\n      timestamp: new Date().toLocaleTimeString()\n    }));\n    setProcessingQueue(queueItems);\n\n    for (let i = 0; i < urls.length; i++) {\n      const currentUrl = urls[i];\n      \n      try {\n        // Simulate web scraping with AI\n        const scrapingResult = await InvokeLLM({\n          prompt: `Simulate web scraping for the URL: ${currentUrl}\n\nPlease generate realistic scraped content as if you visited this URL. Provide:\n1. A realistic title for the page\n2. Main content (500-1000 words) related to Python development, tutorials, or documentation\n3. Determine the content type (article, documentation, tutorial, forum_post, blog, reference)\n4. Generate relevant tags (5-8 tags)\n5. Create a brief summary (2-3 sentences)\n\nMake the content educational and relevant to Python developers.`,\n          response_json_schema: {\n            type: \"object\",\n            properties: {\n              title: { type: \"string\" },\n              content: { type: \"string\" },\n              content_type: { type: \"string\" },\n              tags: { type: \"array\", items: { type: \"string\" } },\n              summary: { type: \"string\" },\n              word_count: { type: \"number\" }\n            }\n          }\n        });\n\n        // Create scraped content record\n        const scrapedRecord = await ScrapedContent.create({\n          source_url: currentUrl,\n          title: scrapingResult.title,\n          content: scrapingResult.content,\n          content_type: scrapingResult.content_type,\n          domain: new URL(currentUrl).hostname,\n          scrape_status: \"completed\",\n          word_count: scrapingResult.word_count,\n          summary: scrapingResult.summary,\n          tags: scrapingResult.tags,\n          scraped_at: new Date().toISOString()\n        });\n\n        scrapeResults.push({\n          url: currentUrl,\n          status: \"success\",\n          record: scrapedRecord\n        });\n\n        // Update queue status\n        setProcessingQueue(prev => \n          prev.map(item => \n            item.url === currentUrl \n              ? { ...item, status: \"completed\" }\n              : item\n          )\n        );\n\n      } catch (error) {\n        console.error(`Error scraping ${currentUrl}:`, error);\n        scrapeResults.push({\n          url: currentUrl,\n          status: \"error\",\n          error: error.message\n        });\n\n        setProcessingQueue(prev => \n          prev.map(item => \n            item.url === currentUrl \n              ? { ...item, status: \"failed\" }\n              : item\n          )\n        );\n      }\n    }\n\n    setResults(scrapeResults);\n    setScraping(false);\n    setUrls([]);\n    loadScrapedContent();\n  };"
    },
    {
      "name": "scrapeResults",
      "type": "variable",
      "startLine": 44,
      "endLine": 44,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "WebScraper.jsx",
        "path": "src/pages/WebScraper.jsx"
      },
      "code": "    const scrapeResults = [];"
    },
    {
      "name": "queueItems",
      "type": "variable",
      "startLine": 47,
      "endLine": 51,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "WebScraper.jsx",
        "path": "src/pages/WebScraper.jsx"
      },
      "code": "    const queueItems = urls.map(url => ({\n      url,\n      status: \"processing\",\n      timestamp: new Date().toLocaleTimeString()\n    }));"
    },
    {
      "name": "currentUrl",
      "type": "variable",
      "startLine": 55,
      "endLine": 55,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "WebScraper.jsx",
        "path": "src/pages/WebScraper.jsx"
      },
      "code": "      const currentUrl = urls[i];"
    },
    {
      "name": "scrapingResult",
      "type": "variable",
      "startLine": 59,
      "endLine": 81,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable",
        "async"
      ],
      "file": {
        "name": "WebScraper.jsx",
        "path": "src/pages/WebScraper.jsx"
      },
      "code": "        const scrapingResult = await InvokeLLM({\n          prompt: `Simulate web scraping for the URL: ${currentUrl}\n\nPlease generate realistic scraped content as if you visited this URL. Provide:\n1. A realistic title for the page\n2. Main content (500-1000 words) related to Python development, tutorials, or documentation\n3. Determine the content type (article, documentation, tutorial, forum_post, blog, reference)\n4. Generate relevant tags (5-8 tags)\n5. Create a brief summary (2-3 sentences)\n\nMake the content educational and relevant to Python developers.`,\n          response_json_schema: {\n            type: \"object\",\n            properties: {\n              title: { type: \"string\" },\n              content: { type: \"string\" },\n              content_type: { type: \"string\" },\n              tags: { type: \"array\", items: { type: \"string\" } },\n              summary: { type: \"string\" },\n              word_count: { type: \"number\" }\n            }\n          }\n        });"
    },
    {
      "name": "scrapedRecord",
      "type": "variable",
      "startLine": 84,
      "endLine": 95,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable",
        "async"
      ],
      "file": {
        "name": "WebScraper.jsx",
        "path": "src/pages/WebScraper.jsx"
      },
      "code": "        const scrapedRecord = await ScrapedContent.create({\n          source_url: currentUrl,\n          title: scrapingResult.title,\n          content: scrapingResult.content,\n          content_type: scrapingResult.content_type,\n          domain: new URL(currentUrl).hostname,\n          scrape_status: \"completed\",\n          word_count: scrapingResult.word_count,\n          summary: scrapingResult.summary,\n          tags: scrapingResult.tags,\n          scraped_at: new Date().toISOString()\n        });"
    },
    {
      "name": "clearQueue",
      "type": "function",
      "startLine": 136,
      "endLine": 140,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "function"
      ],
      "file": {
        "name": "WebScraper.jsx",
        "path": "src/pages/WebScraper.jsx"
      },
      "code": "  const clearQueue = () => {\n    setUrls([]);\n    setProcessingQueue([]);\n    setResults([]);\n  };"
    },
    {
      "name": "clearQueue",
      "type": "variable",
      "startLine": 136,
      "endLine": 140,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "WebScraper.jsx",
        "path": "src/pages/WebScraper.jsx"
      },
      "code": "  const clearQueue = () => {\n    setUrls([]);\n    setProcessingQueue([]);\n    setResults([]);\n  };"
    },
    {
      "name": "UploadPage",
      "type": "component",
      "startLine": 8,
      "endLine": 309,
      "complexity": "high",
      "dependencies": [],
      "tags": [
        "component",
        "react",
        "async",
        "default-export",
        "exported"
      ],
      "file": {
        "name": "Upload.jsx",
        "path": "src/pages/Upload.jsx"
      },
      "code": "export default function UploadPage() {\n  const [dragActive, setDragActive] = useState(false);\n  const [files, setFiles] = useState([]);\n  const [processing, setProcessing] = useState(false);\n  const [results, setResults] = useState([]);\n\n  const handleDrag = useCallback((e) => {\n    e.preventDefault();\n    e.stopPropagation();\n    if (e.type === \"dragenter\" || e.type === \"dragover\") {\n      setDragActive(true);\n    } else if (e.type === \"dragleave\") {\n      setDragActive(false);\n    }\n  }, []);\n\n  const handleDrop = useCallback((e) => {\n    e.preventDefault();\n    e.stopPropagation();\n    setDragActive(false);\n    \n    const droppedFiles = Array.from(e.dataTransfer.files);\n    addFiles(droppedFiles);\n  }, []);\n\n  const handleFileInput = (e) => {\n    const selectedFiles = Array.from(e.target.files);\n    addFiles(selectedFiles);\n  };\n\n  const addFiles = (newFiles) => {\n    const validFiles = newFiles.filter(file => \n      file.type === \"application/pdf\" || \n      file.type === \"text/plain\" || \n      file.name.endsWith('.py') ||\n      file.name.endsWith('.md') ||\n      file.name.endsWith('.rst')\n    );\n    setFiles(prev => [...prev, ...validFiles]);\n  };\n\n  const removeFile = (index) => {\n    setFiles(prev => prev.filter((_, i) => i !== index));\n  };\n\n  const processFiles = async () => {\n    if (files.length === 0) return;\n\n    setProcessing(true);\n    const processedResults = [];\n\n    for (const file of files) {\n      try {\n        // Upload file\n        const { file_url } = await UploadFile({ file });\n        \n        // Extract content\n        let content = \"\";\n        if (file.type === \"application/pdf\") {\n          const extractResult = await ExtractDataFromUploadedFile({\n            file_url,\n            json_schema: {\n              type: \"object\",\n              properties: {\n                content: { type: \"string\" }\n              }\n            }\n          });\n          \n          if (extractResult.status === \"success\") {\n            content = extractResult.output.content;\n          }\n        } else {\n          // For text files, we'll read them directly\n          content = await file.text();\n        }\n\n        // Generate summary and tags using AI\n        const aiResult = await InvokeLLM({\n          prompt: `Analyze this content and provide a summary and relevant tags for a Python knowledge base:\n\nContent: ${content.substring(0, 2000)}...\n\nPlease provide:\n1. A concise summary (2-3 sentences)\n2. Relevant tags (5-8 tags related to Python, programming concepts, libraries, etc.)`,\n          response_json_schema: {\n            type: \"object\",\n            properties: {\n              summary: { type: \"string\" },\n              tags: { type: \"array\", items: { type: \"string\" } }\n            }\n          }\n        });\n\n        // Create document\n        const document = await Document.create({\n          title: file.name,\n          content: content,\n          file_type: getFileType(file),\n          file_url: file_url,\n          summary: aiResult.summary,\n          tags: aiResult.tags,\n          category: inferCategory(file.name),\n          word_count: content.split(' ').length,\n          processing_status: \"completed\",\n          indexed_at: new Date().toISOString()\n        });\n\n        processedResults.push({\n          file: file.name,\n          status: \"success\",\n          document: document,\n          summary: aiResult.summary\n        });\n\n      } catch (error) {\n        console.error(`Error processing ${file.name}:`, error);\n        processedResults.push({\n          file: file.name,\n          status: \"error\",\n          error: error.message\n        });\n      }\n    }\n\n    setResults(processedResults);\n    setProcessing(false);\n    setFiles([]);\n  };\n\n  const getFileType = (file) => {\n    if (file.type === \"application/pdf\") return \"pdf\";\n    if (file.name.endsWith('.py')) return \"py\";\n    if (file.name.endsWith('.md')) return \"md\";\n    if (file.name.endsWith('.rst')) return \"rst\";\n    return \"txt\";\n  };\n\n  const inferCategory = (filename) => {\n    const name = filename.toLowerCase();\n    if (name.includes('tutorial') || name.includes('guide')) return \"tutorial\";\n    if (name.includes('doc') || name.includes('reference')) return \"documentation\";\n    if (name.endsWith('.py')) return \"code\";\n    return \"other\";\n  };\n\n  return (\n    <div className=\"space-y-8\">\n      {/* Header */}\n      <div className=\"text-center mb-12\">\n        <h1 className=\"text-5xl font-black text-black uppercase tracking-tight mb-4\">\n          DOCUMENT UPLOAD CENTER\n        </h1>\n        <div className=\"bg-blue-500 border-4 border-black brutalist-shadow p-4 inline-block\">\n          <p className=\"font-black text-xl text-white uppercase tracking-wider\">\n            FEED THE KNOWLEDGE BASE\n          </p>\n        </div>\n      </div>\n\n      {/* Upload Zone */}\n      <BrutalistCard color={dragActive ? \"yellow\" : \"white\"}>\n        <div\n          onDragEnter={handleDrag}\n          onDragLeave={handleDrag}\n          onDragOver={handleDrag}\n          onDrop={handleDrop}\n          className={`\n            border-4 border-dashed border-black p-12 text-center transition-all duration-200\n            ${dragActive ? 'bg-yellow-100' : 'bg-white'}\n          `}\n        >\n          <Upload className=\"w-16 h-16 text-black mx-auto mb-6\" />\n          <h3 className=\"text-2xl font-black text-black uppercase mb-4\">\n            DROP FILES HERE OR CLICK TO BROWSE\n          </h3>\n          <p className=\"text-lg font-bold text-gray-600 mb-6\">\n            Supported: PDF, TXT, PY, MD, RST\n          </p>\n          \n          <input\n            type=\"file\"\n            multiple\n            accept=\".pdf,.txt,.py,.md,.rst\"\n            onChange={handleFileInput}\n            className=\"hidden\"\n            id=\"file-input\"\n          />\n          \n          <label htmlFor=\"file-input\">\n            <BrutalistButton variant=\"primary\" size=\"large\">\n              CHOOSE FILES\n            </BrutalistButton>\n          </label>\n        </div>\n      </BrutalistCard>\n\n      {/* File List */}\n      {files.length > 0 && (\n        <BrutalistCard>\n          <div className=\"flex items-center justify-between mb-6\">\n            <h3 className=\"text-xl font-black uppercase tracking-wider\">\n              READY TO PROCESS\n            </h3>\n            <BrutalistButton \n              onClick={processFiles}\n              disabled={processing}\n              variant=\"success\"\n            >\n              {processing ? (\n                <>\n                  <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                  PROCESSING...\n                </>\n              ) : (\n                `PROCESS ${files.length} FILES`\n              )}\n            </BrutalistButton>\n          </div>\n\n          <div className=\"space-y-4\">\n            {files.map((file, index) => (\n              <div\n                key={index}\n                className=\"bg-gray-100 border-4 border-black p-4 flex items-center justify-between\"\n              >\n                <div className=\"flex items-center space-x-4\">\n                  <FileText className=\"w-6 h-6 text-black\" />\n                  <div>\n                    <p className=\"font-black text-sm uppercase\">{file.name}</p>\n                    <p className=\"font-bold text-xs text-gray-600\">\n                      {(file.size / 1024 / 1024).toFixed(2)} MB • {getFileType(file)}\n                    </p>\n                  </div>\n                </div>\n                <BrutalistButton\n                  variant=\"danger\"\n                  size=\"small\"\n                  onClick={() => removeFile(index)}\n                >\n                  REMOVE\n                </BrutalistButton>\n              </div>\n            ))}\n          </div>\n        </BrutalistCard>\n      )}\n\n      {/* Results */}\n      {results.length > 0 && (\n        <BrutalistCard>\n          <h3 className=\"text-xl font-black uppercase tracking-wider mb-6\">\n            PROCESSING RESULTS\n          </h3>\n          \n          <div className=\"space-y-4\">\n            {results.map((result, index) => (\n              <div\n                key={index}\n                className={`\n                  border-4 border-black p-4\n                  ${result.status === 'success' ? 'bg-green-100' : 'bg-red-100'}\n                `}\n              >\n                <div className=\"flex items-center space-x-4 mb-3\">\n                  {result.status === 'success' ? (\n                    <CheckCircle className=\"w-6 h-6 text-green-500\" />\n                  ) : (\n                    <AlertCircle className=\"w-6 h-6 text-red-500\" />\n                  )}\n                  <div>\n                    <p className=\"font-black text-sm uppercase\">{result.file}</p>\n                    <p className=\"font-bold text-xs text-gray-600\">\n                      Status: {result.status.toUpperCase()}\n                    </p>\n                  </div>\n                </div>\n                \n                {result.status === 'success' && result.summary && (\n                  <div className=\"bg-white border-2 border-black p-3 mt-3\">\n                    <p className=\"font-bold text-sm text-gray-800\">\n                      AI SUMMARY: {result.summary}\n                    </p>\n                  </div>\n                )}\n                \n                {result.status === 'error' && (\n                  <div className=\"bg-white border-2 border-black p-3 mt-3\">\n                    <p className=\"font-bold text-sm text-red-600\">\n                      ERROR: {result.error}\n                    </p>\n                  </div>\n                )}\n              </div>\n            ))}\n          </div>\n        </BrutalistCard>\n      )}\n    </div>\n  );\n}"
    },
    {
      "name": "handleDrag",
      "type": "variable",
      "startLine": 14,
      "endLine": 22,
      "complexity": "low",
      "parameters": [
        {
          "name": "(e"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "Upload.jsx",
        "path": "src/pages/Upload.jsx"
      },
      "code": "  const handleDrag = useCallback((e) => {\n    e.preventDefault();\n    e.stopPropagation();\n    if (e.type === \"dragenter\" || e.type === \"dragover\") {\n      setDragActive(true);\n    } else if (e.type === \"dragleave\") {\n      setDragActive(false);\n    }\n  }, []);"
    },
    {
      "name": "handleDrop",
      "type": "variable",
      "startLine": 24,
      "endLine": 31,
      "complexity": "low",
      "parameters": [
        {
          "name": "(e"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "Upload.jsx",
        "path": "src/pages/Upload.jsx"
      },
      "code": "  const handleDrop = useCallback((e) => {\n    e.preventDefault();\n    e.stopPropagation();\n    setDragActive(false);\n    \n    const droppedFiles = Array.from(e.dataTransfer.files);\n    addFiles(droppedFiles);\n  }, []);"
    },
    {
      "name": "droppedFiles",
      "type": "variable",
      "startLine": 29,
      "endLine": 29,
      "complexity": "low",
      "parameters": [
        {
          "name": "e.dataTransfer.files"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "Upload.jsx",
        "path": "src/pages/Upload.jsx"
      },
      "code": "    const droppedFiles = Array.from(e.dataTransfer.files);"
    },
    {
      "name": "handleFileInput",
      "type": "function",
      "startLine": 33,
      "endLine": 36,
      "complexity": "low",
      "parameters": [
        {
          "name": "e"
        }
      ],
      "dependencies": [],
      "tags": [
        "function"
      ],
      "file": {
        "name": "Upload.jsx",
        "path": "src/pages/Upload.jsx"
      },
      "code": "  const handleFileInput = (e) => {\n    const selectedFiles = Array.from(e.target.files);\n    addFiles(selectedFiles);\n  };"
    },
    {
      "name": "handleFileInput",
      "type": "variable",
      "startLine": 33,
      "endLine": 36,
      "complexity": "low",
      "parameters": [
        {
          "name": "e"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "Upload.jsx",
        "path": "src/pages/Upload.jsx"
      },
      "code": "  const handleFileInput = (e) => {\n    const selectedFiles = Array.from(e.target.files);\n    addFiles(selectedFiles);\n  };"
    },
    {
      "name": "selectedFiles",
      "type": "variable",
      "startLine": 34,
      "endLine": 34,
      "complexity": "low",
      "parameters": [
        {
          "name": "e.target.files"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "Upload.jsx",
        "path": "src/pages/Upload.jsx"
      },
      "code": "    const selectedFiles = Array.from(e.target.files);"
    },
    {
      "name": "addFiles",
      "type": "function",
      "startLine": 38,
      "endLine": 47,
      "complexity": "low",
      "parameters": [
        {
          "name": "newFiles"
        }
      ],
      "dependencies": [],
      "tags": [
        "function"
      ],
      "file": {
        "name": "Upload.jsx",
        "path": "src/pages/Upload.jsx"
      },
      "code": "  const addFiles = (newFiles) => {\n    const validFiles = newFiles.filter(file => \n      file.type === \"application/pdf\" || \n      file.type === \"text/plain\" || \n      file.name.endsWith('.py') ||\n      file.name.endsWith('.md') ||\n      file.name.endsWith('.rst')\n    );\n    setFiles(prev => [...prev, ...validFiles]);\n  };"
    },
    {
      "name": "addFiles",
      "type": "variable",
      "startLine": 38,
      "endLine": 47,
      "complexity": "low",
      "parameters": [
        {
          "name": "newFiles"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "Upload.jsx",
        "path": "src/pages/Upload.jsx"
      },
      "code": "  const addFiles = (newFiles) => {\n    const validFiles = newFiles.filter(file => \n      file.type === \"application/pdf\" || \n      file.type === \"text/plain\" || \n      file.name.endsWith('.py') ||\n      file.name.endsWith('.md') ||\n      file.name.endsWith('.rst')\n    );\n    setFiles(prev => [...prev, ...validFiles]);\n  };"
    },
    {
      "name": "validFiles",
      "type": "variable",
      "startLine": 39,
      "endLine": 48,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "Upload.jsx",
        "path": "src/pages/Upload.jsx"
      },
      "code": "    const validFiles = newFiles.filter(file => \n      file.type === \"application/pdf\" || \n      file.type === \"text/plain\" || \n      file.name.endsWith('.py') ||\n      file.name.endsWith('.md') ||\n      file.name.endsWith('.rst')\n    );\n    setFiles(prev => [...prev, ...validFiles]);\n  };\n"
    },
    {
      "name": "removeFile",
      "type": "function",
      "startLine": 49,
      "endLine": 51,
      "complexity": "low",
      "parameters": [
        {
          "name": "index"
        }
      ],
      "dependencies": [],
      "tags": [
        "function"
      ],
      "file": {
        "name": "Upload.jsx",
        "path": "src/pages/Upload.jsx"
      },
      "code": "  const removeFile = (index) => {\n    setFiles(prev => prev.filter((_, i) => i !== index));\n  };"
    },
    {
      "name": "removeFile",
      "type": "variable",
      "startLine": 49,
      "endLine": 51,
      "complexity": "low",
      "parameters": [
        {
          "name": "index"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "Upload.jsx",
        "path": "src/pages/Upload.jsx"
      },
      "code": "  const removeFile = (index) => {\n    setFiles(prev => prev.filter((_, i) => i !== index));\n  };"
    },
    {
      "name": "processFiles",
      "type": "function",
      "startLine": 53,
      "endLine": 137,
      "complexity": "medium",
      "dependencies": [],
      "tags": [
        "function",
        "async"
      ],
      "file": {
        "name": "Upload.jsx",
        "path": "src/pages/Upload.jsx"
      },
      "code": "  const processFiles = async () => {\n    if (files.length === 0) return;\n\n    setProcessing(true);\n    const processedResults = [];\n\n    for (const file of files) {\n      try {\n        // Upload file\n        const { file_url } = await UploadFile({ file });\n        \n        // Extract content\n        let content = \"\";\n        if (file.type === \"application/pdf\") {\n          const extractResult = await ExtractDataFromUploadedFile({\n            file_url,\n            json_schema: {\n              type: \"object\",\n              properties: {\n                content: { type: \"string\" }\n              }\n            }\n          });\n          \n          if (extractResult.status === \"success\") {\n            content = extractResult.output.content;\n          }\n        } else {\n          // For text files, we'll read them directly\n          content = await file.text();\n        }\n\n        // Generate summary and tags using AI\n        const aiResult = await InvokeLLM({\n          prompt: `Analyze this content and provide a summary and relevant tags for a Python knowledge base:\n\nContent: ${content.substring(0, 2000)}...\n\nPlease provide:\n1. A concise summary (2-3 sentences)\n2. Relevant tags (5-8 tags related to Python, programming concepts, libraries, etc.)`,\n          response_json_schema: {\n            type: \"object\",\n            properties: {\n              summary: { type: \"string\" },\n              tags: { type: \"array\", items: { type: \"string\" } }\n            }\n          }\n        });\n\n        // Create document\n        const document = await Document.create({\n          title: file.name,\n          content: content,\n          file_type: getFileType(file),\n          file_url: file_url,\n          summary: aiResult.summary,\n          tags: aiResult.tags,\n          category: inferCategory(file.name),\n          word_count: content.split(' ').length,\n          processing_status: \"completed\",\n          indexed_at: new Date().toISOString()\n        });\n\n        processedResults.push({\n          file: file.name,\n          status: \"success\",\n          document: document,\n          summary: aiResult.summary\n        });\n\n      } catch (error) {\n        console.error(`Error processing ${file.name}:`, error);\n        processedResults.push({\n          file: file.name,\n          status: \"error\",\n          error: error.message\n        });\n      }\n    }\n\n    setResults(processedResults);\n    setProcessing(false);\n    setFiles([]);\n  };"
    },
    {
      "name": "processFiles",
      "type": "variable",
      "startLine": 53,
      "endLine": 137,
      "complexity": "medium",
      "dependencies": [],
      "tags": [
        "variable",
        "async"
      ],
      "file": {
        "name": "Upload.jsx",
        "path": "src/pages/Upload.jsx"
      },
      "code": "  const processFiles = async () => {\n    if (files.length === 0) return;\n\n    setProcessing(true);\n    const processedResults = [];\n\n    for (const file of files) {\n      try {\n        // Upload file\n        const { file_url } = await UploadFile({ file });\n        \n        // Extract content\n        let content = \"\";\n        if (file.type === \"application/pdf\") {\n          const extractResult = await ExtractDataFromUploadedFile({\n            file_url,\n            json_schema: {\n              type: \"object\",\n              properties: {\n                content: { type: \"string\" }\n              }\n            }\n          });\n          \n          if (extractResult.status === \"success\") {\n            content = extractResult.output.content;\n          }\n        } else {\n          // For text files, we'll read them directly\n          content = await file.text();\n        }\n\n        // Generate summary and tags using AI\n        const aiResult = await InvokeLLM({\n          prompt: `Analyze this content and provide a summary and relevant tags for a Python knowledge base:\n\nContent: ${content.substring(0, 2000)}...\n\nPlease provide:\n1. A concise summary (2-3 sentences)\n2. Relevant tags (5-8 tags related to Python, programming concepts, libraries, etc.)`,\n          response_json_schema: {\n            type: \"object\",\n            properties: {\n              summary: { type: \"string\" },\n              tags: { type: \"array\", items: { type: \"string\" } }\n            }\n          }\n        });\n\n        // Create document\n        const document = await Document.create({\n          title: file.name,\n          content: content,\n          file_type: getFileType(file),\n          file_url: file_url,\n          summary: aiResult.summary,\n          tags: aiResult.tags,\n          category: inferCategory(file.name),\n          word_count: content.split(' ').length,\n          processing_status: \"completed\",\n          indexed_at: new Date().toISOString()\n        });\n\n        processedResults.push({\n          file: file.name,\n          status: \"success\",\n          document: document,\n          summary: aiResult.summary\n        });\n\n      } catch (error) {\n        console.error(`Error processing ${file.name}:`, error);\n        processedResults.push({\n          file: file.name,\n          status: \"error\",\n          error: error.message\n        });\n      }\n    }\n\n    setResults(processedResults);\n    setProcessing(false);\n    setFiles([]);\n  };"
    },
    {
      "name": "processedResults",
      "type": "variable",
      "startLine": 57,
      "endLine": 57,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "Upload.jsx",
        "path": "src/pages/Upload.jsx"
      },
      "code": "    const processedResults = [];"
    },
    {
      "name": "content",
      "type": "variable",
      "startLine": 65,
      "endLine": 65,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "Upload.jsx",
        "path": "src/pages/Upload.jsx"
      },
      "code": "        let content = \"\";"
    },
    {
      "name": "extractResult",
      "type": "variable",
      "startLine": 67,
      "endLine": 75,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable",
        "async"
      ],
      "file": {
        "name": "Upload.jsx",
        "path": "src/pages/Upload.jsx"
      },
      "code": "          const extractResult = await ExtractDataFromUploadedFile({\n            file_url,\n            json_schema: {\n              type: \"object\",\n              properties: {\n                content: { type: \"string\" }\n              }\n            }\n          });"
    },
    {
      "name": "aiResult",
      "type": "variable",
      "startLine": 86,
      "endLine": 101,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable",
        "async"
      ],
      "file": {
        "name": "Upload.jsx",
        "path": "src/pages/Upload.jsx"
      },
      "code": "        const aiResult = await InvokeLLM({\n          prompt: `Analyze this content and provide a summary and relevant tags for a Python knowledge base:\n\nContent: ${content.substring(0, 2000)}...\n\nPlease provide:\n1. A concise summary (2-3 sentences)\n2. Relevant tags (5-8 tags related to Python, programming concepts, libraries, etc.)`,\n          response_json_schema: {\n            type: \"object\",\n            properties: {\n              summary: { type: \"string\" },\n              tags: { type: \"array\", items: { type: \"string\" } }\n            }\n          }\n        });"
    },
    {
      "name": "document",
      "type": "variable",
      "startLine": 104,
      "endLine": 115,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable",
        "async"
      ],
      "file": {
        "name": "Upload.jsx",
        "path": "src/pages/Upload.jsx"
      },
      "code": "        const document = await Document.create({\n          title: file.name,\n          content: content,\n          file_type: getFileType(file),\n          file_url: file_url,\n          summary: aiResult.summary,\n          tags: aiResult.tags,\n          category: inferCategory(file.name),\n          word_count: content.split(' ').length,\n          processing_status: \"completed\",\n          indexed_at: new Date().toISOString()\n        });"
    },
    {
      "name": "getFileType",
      "type": "function",
      "startLine": 139,
      "endLine": 145,
      "complexity": "low",
      "parameters": [
        {
          "name": "file"
        }
      ],
      "dependencies": [],
      "tags": [
        "function"
      ],
      "file": {
        "name": "Upload.jsx",
        "path": "src/pages/Upload.jsx"
      },
      "code": "  const getFileType = (file) => {\n    if (file.type === \"application/pdf\") return \"pdf\";\n    if (file.name.endsWith('.py')) return \"py\";\n    if (file.name.endsWith('.md')) return \"md\";\n    if (file.name.endsWith('.rst')) return \"rst\";\n    return \"txt\";\n  };"
    },
    {
      "name": "getFileType",
      "type": "variable",
      "startLine": 139,
      "endLine": 145,
      "complexity": "low",
      "parameters": [
        {
          "name": "file"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "Upload.jsx",
        "path": "src/pages/Upload.jsx"
      },
      "code": "  const getFileType = (file) => {\n    if (file.type === \"application/pdf\") return \"pdf\";\n    if (file.name.endsWith('.py')) return \"py\";\n    if (file.name.endsWith('.md')) return \"md\";\n    if (file.name.endsWith('.rst')) return \"rst\";\n    return \"txt\";\n  };"
    },
    {
      "name": "inferCategory",
      "type": "function",
      "startLine": 147,
      "endLine": 153,
      "complexity": "low",
      "parameters": [
        {
          "name": "filename"
        }
      ],
      "dependencies": [],
      "tags": [
        "function"
      ],
      "file": {
        "name": "Upload.jsx",
        "path": "src/pages/Upload.jsx"
      },
      "code": "  const inferCategory = (filename) => {\n    const name = filename.toLowerCase();\n    if (name.includes('tutorial') || name.includes('guide')) return \"tutorial\";\n    if (name.includes('doc') || name.includes('reference')) return \"documentation\";\n    if (name.endsWith('.py')) return \"code\";\n    return \"other\";\n  };"
    },
    {
      "name": "inferCategory",
      "type": "variable",
      "startLine": 147,
      "endLine": 153,
      "complexity": "low",
      "parameters": [
        {
          "name": "filename"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "Upload.jsx",
        "path": "src/pages/Upload.jsx"
      },
      "code": "  const inferCategory = (filename) => {\n    const name = filename.toLowerCase();\n    if (name.includes('tutorial') || name.includes('guide')) return \"tutorial\";\n    if (name.includes('doc') || name.includes('reference')) return \"documentation\";\n    if (name.endsWith('.py')) return \"code\";\n    return \"other\";\n  };"
    },
    {
      "name": "name",
      "type": "variable",
      "startLine": 148,
      "endLine": 148,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "Upload.jsx",
        "path": "src/pages/Upload.jsx"
      },
      "code": "    const name = filename.toLowerCase();"
    },
    {
      "name": "Dashboard",
      "type": "component",
      "startLine": 16,
      "endLine": 231,
      "complexity": "high",
      "dependencies": [],
      "tags": [
        "component",
        "react",
        "async",
        "default-export",
        "exported"
      ],
      "file": {
        "name": "Dashboard.jsx",
        "path": "src/pages/Dashboard.jsx"
      },
      "code": "export default function Dashboard() {\n  const [stats, setStats] = useState({\n    totalDocuments: 0,\n    totalSearches: 0,\n    totalScraped: 0,\n    totalReports: 0\n  });\n  const [recentActivity, setRecentActivity] = useState([]);\n  const [processingQueue, setProcessingQueue] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    loadDashboardData();\n  }, []);\n\n  const loadDashboardData = async () => {\n    try {\n      const [documents, searches, scraped, reports] = await Promise.all([\n        Document.list(),\n        SearchQuery.list(),\n        ScrapedContent.list(),\n        Report.list()\n      ]);\n\n      setStats({\n        totalDocuments: documents.length,\n        totalSearches: searches.length,\n        totalScraped: scraped.length,\n        totalReports: reports.length\n      });\n\n      // Mock recent activity\n      const mockActivity = [\n        { name: \"python-tutorial.pdf\", type: \"Document Upload\", status: \"completed\", timestamp: \"2 min ago\" },\n        { name: \"django-docs scraping\", type: \"Web Scraping\", status: \"processing\", timestamp: \"5 min ago\", progress: 65 },\n        { name: \"Weekly Analytics Report\", type: \"Report Generation\", status: \"completed\", timestamp: \"1 hour ago\" },\n        { name: \"machine-learning-guide.md\", type: \"Document Upload\", status: \"pending\", timestamp: \"3 hours ago\" }\n      ];\n\n      setRecentActivity(mockActivity);\n      setProcessingQueue(mockActivity.filter(item => item.status === \"processing\" || item.status === \"pending\"));\n      \n    } catch (error) {\n      console.error(\"Error loading dashboard data:\", error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const StatCard = ({ title, value, icon: Icon, color }) => (\n    <BrutalistCard color={color} hover>\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <p className=\"font-black text-2xl text-black mb-1\">{value}</p>\n          <p className=\"font-bold text-sm text-black uppercase tracking-wider\">\n            {title}\n          </p>\n        </div>\n        <div className=\"bg-black p-3 border-2 border-black\">\n          <Icon className=\"w-6 h-6 text-white\" />\n        </div>\n      </div>\n    </BrutalistCard>\n  );\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-8\">\n        <div className=\"text-center\">\n          <h1 className=\"text-4xl font-black text-black uppercase tracking-tight mb-4\">\n            LOADING DASHBOARD...\n          </h1>\n          <div className=\"bg-blue-500 border-4 border-black brutalist-shadow p-8 inline-block\">\n            <Zap className=\"w-12 h-12 text-white animate-pulse\" />\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-8\">\n      {/* Header */}\n      <div className=\"text-center mb-12\">\n        <h1 className=\"text-5xl font-black text-black uppercase tracking-tight mb-4\">\n          SYSTEM DASHBOARD\n        </h1>\n        <div className=\"bg-yellow-400 border-4 border-black brutalist-shadow p-4 inline-block\">\n          <p className=\"font-black text-xl text-black uppercase tracking-wider\">\n            MONITORING ALL SYSTEMS\n          </p>\n        </div>\n      </div>\n\n      {/* Stats Grid */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n        <StatCard\n          title=\"Documents\"\n          value={stats.totalDocuments}\n          icon={FileText}\n          color=\"blue\"\n        />\n        <StatCard\n          title=\"Searches\"\n          value={stats.totalSearches}\n          icon={Search}\n          color=\"pink\"\n        />\n        <StatCard\n          title=\"Scraped Pages\"\n          value={stats.totalScraped}\n          icon={Globe}\n          color=\"green\"\n        />\n        <StatCard\n          title=\"Reports\"\n          value={stats.totalReports}\n          icon={TrendingUp}\n          color=\"orange\"\n        />\n      </div>\n\n      {/* Main Content Grid */}\n      <div className=\"grid lg:grid-cols-2 gap-8\">\n        {/* Processing Queue */}\n        <ProcessingQueue items={processingQueue} />\n\n        {/* Recent Activity */}\n        <BrutalistCard>\n          <div className=\"flex items-center justify-between mb-6\">\n            <h3 className=\"text-xl font-black uppercase tracking-wider\">\n              RECENT ACTIVITY\n            </h3>\n            <div className=\"bg-black text-white px-3 py-1 border-2 border-black\">\n              <span className=\"font-black text-sm\">LIVE FEED</span>\n            </div>\n          </div>\n\n          <div className=\"space-y-4 max-h-96 overflow-y-auto\">\n            {recentActivity.map((activity, index) => (\n              <div\n                key={index}\n                className=\"bg-gray-100 border-4 border-black p-4 flex items-center justify-between\"\n              >\n                <div className=\"flex items-center space-x-4\">\n                  {activity.status === 'completed' ? (\n                    <CheckCircle className=\"w-6 h-6 text-green-500\" />\n                  ) : activity.status === 'processing' ? (\n                    <Zap className=\"w-6 h-6 text-blue-500 animate-pulse\" />\n                  ) : (\n                    <Clock className=\"w-6 h-6 text-gray-500\" />\n                  )}\n                  <div>\n                    <p className=\"font-black text-sm uppercase\">\n                      {activity.name}\n                    </p>\n                    <p className=\"font-bold text-xs text-gray-600 mt-1\">\n                      {activity.type} • {activity.timestamp}\n                    </p>\n                  </div>\n                </div>\n                <div className={`\n                  px-3 py-1 border-2 border-black font-black text-xs uppercase\n                  ${activity.status === 'completed' ? 'bg-green-500 text-white' : ''}\n                  ${activity.status === 'processing' ? 'bg-blue-500 text-white' : ''}\n                  ${activity.status === 'pending' ? 'bg-gray-500 text-white' : ''}\n                `}>\n                  {activity.status}\n                </div>\n              </div>\n            ))}\n          </div>\n        </BrutalistCard>\n      </div>\n\n      {/* System Status */}\n      <div className=\"grid md:grid-cols-3 gap-6\">\n        <BrutalistCard color=\"green\">\n          <div className=\"text-center\">\n            <Database className=\"w-8 h-8 text-black mx-auto mb-3\" />\n            <p className=\"font-black text-lg text-black uppercase\">\n              DATABASE\n            </p>\n            <p className=\"font-bold text-sm text-black mt-1\">\n              OPERATIONAL\n            </p>\n          </div>\n        </BrutalistCard>\n\n        <BrutalistCard color=\"blue\">\n          <div className=\"text-center\">\n            <Zap className=\"w-8 h-8 text-black mx-auto mb-3\" />\n            <p className=\"font-black text-lg text-black uppercase\">\n              AI PROCESSING\n            </p>\n            <p className=\"font-bold text-sm text-black mt-1\">\n              ACTIVE\n            </p>\n          </div>\n        </BrutalistCard>\n\n        <BrutalistCard color=\"pink\">\n          <div className=\"text-center\">\n            <TrendingUp className=\"w-8 h-8 text-black mx-auto mb-3\" />\n            <p className=\"font-black text-lg text-black uppercase\">\n              SEARCH ENGINE\n            </p>\n            <p className=\"font-bold text-sm text-black mt-1\">\n              READY\n            </p>\n          </div>\n        </BrutalistCard>\n      </div>\n    </div>\n  );\n}"
    },
    {
      "name": "loadDashboardData",
      "type": "function",
      "startLine": 31,
      "endLine": 63,
      "complexity": "medium",
      "dependencies": [],
      "tags": [
        "function",
        "async"
      ],
      "file": {
        "name": "Dashboard.jsx",
        "path": "src/pages/Dashboard.jsx"
      },
      "code": "  const loadDashboardData = async () => {\n    try {\n      const [documents, searches, scraped, reports] = await Promise.all([\n        Document.list(),\n        SearchQuery.list(),\n        ScrapedContent.list(),\n        Report.list()\n      ]);\n\n      setStats({\n        totalDocuments: documents.length,\n        totalSearches: searches.length,\n        totalScraped: scraped.length,\n        totalReports: reports.length\n      });\n\n      // Mock recent activity\n      const mockActivity = [\n        { name: \"python-tutorial.pdf\", type: \"Document Upload\", status: \"completed\", timestamp: \"2 min ago\" },\n        { name: \"django-docs scraping\", type: \"Web Scraping\", status: \"processing\", timestamp: \"5 min ago\", progress: 65 },\n        { name: \"Weekly Analytics Report\", type: \"Report Generation\", status: \"completed\", timestamp: \"1 hour ago\" },\n        { name: \"machine-learning-guide.md\", type: \"Document Upload\", status: \"pending\", timestamp: \"3 hours ago\" }\n      ];\n\n      setRecentActivity(mockActivity);\n      setProcessingQueue(mockActivity.filter(item => item.status === \"processing\" || item.status === \"pending\"));\n      \n    } catch (error) {\n      console.error(\"Error loading dashboard data:\", error);\n    } finally {\n      setIsLoading(false);\n    }\n  };"
    },
    {
      "name": "loadDashboardData",
      "type": "variable",
      "startLine": 31,
      "endLine": 63,
      "complexity": "medium",
      "dependencies": [],
      "tags": [
        "variable",
        "async"
      ],
      "file": {
        "name": "Dashboard.jsx",
        "path": "src/pages/Dashboard.jsx"
      },
      "code": "  const loadDashboardData = async () => {\n    try {\n      const [documents, searches, scraped, reports] = await Promise.all([\n        Document.list(),\n        SearchQuery.list(),\n        ScrapedContent.list(),\n        Report.list()\n      ]);\n\n      setStats({\n        totalDocuments: documents.length,\n        totalSearches: searches.length,\n        totalScraped: scraped.length,\n        totalReports: reports.length\n      });\n\n      // Mock recent activity\n      const mockActivity = [\n        { name: \"python-tutorial.pdf\", type: \"Document Upload\", status: \"completed\", timestamp: \"2 min ago\" },\n        { name: \"django-docs scraping\", type: \"Web Scraping\", status: \"processing\", timestamp: \"5 min ago\", progress: 65 },\n        { name: \"Weekly Analytics Report\", type: \"Report Generation\", status: \"completed\", timestamp: \"1 hour ago\" },\n        { name: \"machine-learning-guide.md\", type: \"Document Upload\", status: \"pending\", timestamp: \"3 hours ago\" }\n      ];\n\n      setRecentActivity(mockActivity);\n      setProcessingQueue(mockActivity.filter(item => item.status === \"processing\" || item.status === \"pending\"));\n      \n    } catch (error) {\n      console.error(\"Error loading dashboard data:\", error);\n    } finally {\n      setIsLoading(false);\n    }\n  };"
    },
    {
      "name": "mockActivity",
      "type": "variable",
      "startLine": 48,
      "endLine": 49,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "Dashboard.jsx",
        "path": "src/pages/Dashboard.jsx"
      },
      "code": "      const mockActivity = [\n        { name: \"python-tutorial.pdf\", type: \"Document Upload\", status: \"completed\", timestamp: \"2 min ago\" },"
    },
    {
      "name": "StatCard",
      "type": "function",
      "startLine": 65,
      "endLine": 65,
      "complexity": "low",
      "parameters": [
        {
          "name": " title"
        },
        {
          "name": "value"
        },
        {
          "name": "icon",
          "type": "Icon"
        },
        {
          "name": "color "
        }
      ],
      "dependencies": [],
      "tags": [
        "function"
      ],
      "file": {
        "name": "Dashboard.jsx",
        "path": "src/pages/Dashboard.jsx"
      },
      "code": "  const StatCard = ({ title, value, icon: Icon, color }) => ("
    },
    {
      "name": "StatCard",
      "type": "component",
      "startLine": 65,
      "endLine": 65,
      "complexity": "low",
      "parameters": [
        {
          "name": " title"
        },
        {
          "name": "value"
        },
        {
          "name": "icon",
          "type": "Icon"
        },
        {
          "name": "color "
        }
      ],
      "dependencies": [],
      "tags": [
        "component"
      ],
      "file": {
        "name": "Dashboard.jsx",
        "path": "src/pages/Dashboard.jsx"
      },
      "code": "  const StatCard = ({ title, value, icon: Icon, color }) => ("
    },
    {
      "name": "StatCard",
      "type": "variable",
      "startLine": 65,
      "endLine": 65,
      "complexity": "low",
      "parameters": [
        {
          "name": " title"
        },
        {
          "name": "value"
        },
        {
          "name": "icon",
          "type": "Icon"
        },
        {
          "name": "color "
        }
      ],
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "Dashboard.jsx",
        "path": "src/pages/Dashboard.jsx"
      },
      "code": "  const StatCard = ({ title, value, icon: Icon, color }) => ("
    },
    {
      "name": "Search",
      "type": "component",
      "startLine": 8,
      "endLine": 429,
      "complexity": "high",
      "dependencies": [],
      "tags": [
        "component",
        "react",
        "async",
        "default-export",
        "exported"
      ],
      "file": {
        "name": "Search.jsx",
        "path": "src/pages/Search.jsx"
      },
      "code": "export default function Search() {\n  const [query, setQuery] = useState(\"\");\n  const [searchType, setSearchType] = useState(\"hybrid\");\n  const [results, setResults] = useState([]);\n  const [searching, setSearching] = useState(false);\n  const [searchHistory, setSearchHistory] = useState([]);\n  const [filters, setFilters] = useState({\n    type: \"all\", // all, document, scraped\n    category: \"all\",\n    dateRange: \"all\"\n  });\n  const [executionTime, setExecutionTime] = useState(0);\n\n  useEffect(() => {\n    loadSearchHistory();\n  }, []);\n\n  const loadSearchHistory = async () => {\n    try {\n      const history = await SearchQuery.list(\"-created_date\", 5);\n      setSearchHistory(history);\n    } catch (error) {\n      console.error(\"Error loading search history:\", error);\n    }\n  };\n\n  const performSearch = async () => {\n    if (!query.trim()) return;\n\n    setSearching(true);\n    const startTime = Date.now();\n\n    try {\n      let searchResults = [];\n\n      if (searchType === \"keyword\" || searchType === \"hybrid\") {\n        // Keyword search\n        const [documents, scrapedContent] = await Promise.all([\n          Document.list(),\n          ScrapedContent.list()\n        ]);\n\n        const allContent = [\n          ...documents.map(doc => ({ ...doc, source_type: 'document' })),\n          ...scrapedContent.map(content => ({ ...content, source_type: 'scraped' }))\n        ];\n\n        const keywordResults = allContent.filter(item => {\n          const searchText = query.toLowerCase();\n          const title = (item.title || '').toLowerCase();\n          const content = (item.content || '').toLowerCase();\n          const summary = (item.summary || '').toLowerCase();\n          const tags = (item.tags || []).join(' ').toLowerCase();\n\n          return title.includes(searchText) || \n                 content.includes(searchText) || \n                 summary.includes(searchText) ||\n                 tags.includes(searchText);\n        });\n\n        searchResults = [...keywordResults];\n      }\n\n      if (searchType === \"semantic\" || searchType === \"hybrid\") {\n        // Semantic search using AI\n        const semanticResult = await InvokeLLM({\n          prompt: `Perform a semantic search for the query: \"${query}\"\n\nBased on this query, generate 3-5 relevant search results that would match semantically. Each result should have:\n- title: A relevant document/article title\n- content_excerpt: A short excerpt (100-200 words)\n- source_type: Either \"document\" or \"scraped\"\n- relevance_score: A score from 0-100\n- tags: Array of relevant tags\n- summary: Brief summary explaining why this is relevant\n\nFocus on Python-related content, tutorials, documentation, and programming concepts.`,\n          response_json_schema: {\n            type: \"object\",\n            properties: {\n              results: {\n                type: \"array\",\n                items: {\n                  type: \"object\",\n                  properties: {\n                    title: { type: \"string\" },\n                    content_excerpt: { type: \"string\" },\n                    source_type: { type: \"string\" },\n                    relevance_score: { type: \"number\" },\n                    tags: { type: \"array\", items: { type: \"string\" } },\n                    summary: { type: \"string\" }\n                  }\n                }\n              }\n            }\n          }\n        });\n\n        const semanticResults = semanticResult.results.map((result, index) => ({\n          id: `semantic-${index}`,\n          title: result.title,\n          content: result.content_excerpt,\n          summary: result.summary,\n          tags: result.tags,\n          source_type: result.source_type,\n          relevance_score: result.relevance_score,\n          is_semantic: true\n        }));\n\n        searchResults = [...searchResults, ...semanticResults];\n      }\n\n      // Apply filters\n      let filteredResults = searchResults;\n\n      if (filters.type !== \"all\") {\n        filteredResults = filteredResults.filter(result => \n          result.source_type === filters.type\n        );\n      }\n\n      if (filters.category !== \"all\") {\n        filteredResults = filteredResults.filter(result => \n          result.category === filters.category\n        );\n      }\n\n      // Sort by relevance (semantic results first, then by creation date)\n      filteredResults.sort((a, b) => {\n        if (a.is_semantic && !b.is_semantic) return -1;\n        if (!a.is_semantic && b.is_semantic) return 1;\n        if (a.relevance_score && b.relevance_score) {\n          return b.relevance_score - a.relevance_score;\n        }\n        return new Date(b.created_date || 0) - new Date(a.created_date || 0);\n      });\n\n      setResults(filteredResults);\n\n      const endTime = Date.now();\n      const execTime = endTime - startTime;\n      setExecutionTime(execTime);\n\n      // Save search query\n      await SearchQuery.create({\n        query_text: query,\n        search_type: searchType,\n        results_count: filteredResults.length,\n        execution_time: execTime\n      });\n\n      loadSearchHistory();\n\n    } catch (error) {\n      console.error(\"Search error:\", error);\n    } finally {\n      setSearching(false);\n    }\n  };\n\n  const handleQuickSearch = (historyQuery) => {\n    setQuery(historyQuery.query_text);\n    setSearchType(historyQuery.search_type);\n  };\n\n  return (\n    <div className=\"space-y-8\">\n      {/* Header */}\n      <div className=\"text-center mb-12\">\n        <h1 className=\"text-5xl font-black text-black uppercase tracking-tight mb-4\">\n          SEARCH ENGINE\n        </h1>\n        <div className=\"bg-green-500 border-4 border-black brutalist-shadow p-4 inline-block\">\n          <p className=\"font-black text-xl text-white uppercase tracking-wider\">\n            FIND KNOWLEDGE INSTANTLY\n          </p>\n        </div>\n      </div>\n\n      {/* Search Interface */}\n      <BrutalistCard>\n        <div className=\"space-y-6\">\n          {/* Search Bar */}\n          <div className=\"flex gap-4\">\n            <div className=\"flex-1 relative\">\n              <SearchIcon className=\"absolute left-4 top-1/2 transform -translate-y-1/2 w-5 h-5 text-black\" />\n              <input\n                type=\"text\"\n                placeholder=\"SEARCH THE KNOWLEDGE BASE...\"\n                value={query}\n                onChange={(e) => setQuery(e.target.value)}\n                onKeyPress={(e) => e.key === 'Enter' && performSearch()}\n                className=\"brutalist-input w-full pl-12 pr-4 py-4 text-black font-black uppercase placeholder-gray-500 text-lg\"\n              />\n            </div>\n            <BrutalistButton\n              onClick={performSearch}\n              disabled={searching || !query.trim()}\n              variant=\"primary\"\n              size=\"large\"\n            >\n              {searching ? (\n                <>\n                  <SearchIcon className=\"w-5 h-5 mr-2 animate-pulse\" />\n                  SEARCHING...\n                </>\n              ) : (\n                <>\n                  <SearchIcon className=\"w-5 h-5 mr-2\" />\n                  SEARCH\n                </>\n              )}\n            </BrutalistButton>\n          </div>\n\n          {/* Search Options */}\n          <div className=\"grid md:grid-cols-4 gap-4\">\n            <div>\n              <label className=\"block font-black text-sm uppercase mb-2\">SEARCH TYPE</label>\n              <select\n                value={searchType}\n                onChange={(e) => setSearchType(e.target.value)}\n                className=\"brutalist-input w-full py-3 text-black font-black uppercase\"\n              >\n                <option value=\"hybrid\">HYBRID (BEST)</option>\n                <option value=\"keyword\">KEYWORD ONLY</option>\n                <option value=\"semantic\">SEMANTIC (AI)</option>\n              </select>\n            </div>\n\n            <div>\n              <label className=\"block font-black text-sm uppercase mb-2\">CONTENT TYPE</label>\n              <select\n                value={filters.type}\n                onChange={(e) => setFilters(prev => ({ ...prev, type: e.target.value }))}\n                className=\"brutalist-input w-full py-3 text-black font-black uppercase\"\n              >\n                <option value=\"all\">ALL CONTENT</option>\n                <option value=\"document\">DOCUMENTS</option>\n                <option value=\"scraped\">SCRAPED PAGES</option>\n              </select>\n            </div>\n\n            <div>\n              <label className=\"block font-black text-sm uppercase mb-2\">CATEGORY</label>\n              <select\n                value={filters.category}\n                onChange={(e) => setFilters(prev => ({ ...prev, category: e.target.value }))}\n                className=\"brutalist-input w-full py-3 text-black font-black uppercase\"\n              >\n                <option value=\"all\">ALL CATEGORIES</option>\n                <option value=\"tutorial\">TUTORIALS</option>\n                <option value=\"documentation\">DOCS</option>\n                <option value=\"code\">CODE</option>\n                <option value=\"article\">ARTICLES</option>\n              </select>\n            </div>\n\n            <div>\n              <label className=\"block font-black text-sm uppercase mb-2\">DATE RANGE</label>\n              <select\n                value={filters.dateRange}\n                onChange={(e) => setFilters(prev => ({ ...prev, dateRange: e.target.value }))}\n                className=\"brutalist-input w-full py-3 text-black font-black uppercase\"\n              >\n                <option value=\"all\">ALL TIME</option>\n                <option value=\"today\">TODAY</option>\n                <option value=\"week\">THIS WEEK</option>\n                <option value=\"month\">THIS MONTH</option>\n              </select>\n            </div>\n          </div>\n        </div>\n      </BrutalistCard>\n\n      {/* Search Results */}\n      {results.length > 0 && (\n        <BrutalistCard>\n          <div className=\"flex justify-between items-center mb-6\">\n            <h3 className=\"text-xl font-black uppercase tracking-wider\">\n              SEARCH RESULTS ({results.length})\n            </h3>\n            <div className=\"bg-yellow-400 border-2 border-black px-3 py-1\">\n              <span className=\"font-black text-sm text-black\">\n                {executionTime}MS\n              </span>\n            </div>\n          </div>\n\n          <div className=\"space-y-6\">\n            {results.map((result, index) => (\n              <div\n                key={result.id || index}\n                className={`\n                  border-4 border-black p-6\n                  ${result.is_semantic ? 'bg-blue-50' : 'bg-white'}\n                  hover:translate-x-[-2px] hover:translate-y-[-2px] hover:shadow-[6px_6px_0px_#000000] transition-all duration-100\n                `}\n              >\n                <div className=\"flex justify-between items-start mb-4\">\n                  <div className=\"flex items-center space-x-3\">\n                    {result.source_type === 'document' ? (\n                      <FileText className=\"w-6 h-6 text-blue-500\" />\n                    ) : (\n                      <Globe className=\"w-6 h-6 text-green-500\" />\n                    )}\n                    <div>\n                      <h4 className=\"font-black text-lg uppercase line-clamp-2\">\n                        {result.title}\n                      </h4>\n                      <div className=\"flex items-center space-x-4 mt-1\">\n                        <span className={`\n                          px-2 py-1 border-2 border-black font-black text-xs uppercase\n                          ${result.source_type === 'document' ? 'bg-blue-500 text-white' : 'bg-green-500 text-white'}\n                        `}>\n                          {result.source_type}\n                        </span>\n                        {result.is_semantic && (\n                          <span className=\"bg-pink-500 text-white px-2 py-1 border-2 border-black font-black text-xs uppercase\">\n                            AI SEMANTIC\n                          </span>\n                        )}\n                        {result.relevance_score && (\n                          <div className=\"flex items-center space-x-1\">\n                            <Star className=\"w-4 h-4 text-yellow-500\" />\n                            <span className=\"font-black text-sm\">{result.relevance_score}%</span>\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                  </div>\n                  \n                  {result.source_url && (\n                    <a\n                      href={result.source_url}\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                      className=\"bg-orange-500 text-white p-2 border-2 border-black hover:bg-orange-400\"\n                    >\n                      <ExternalLink className=\"w-4 h-4\" />\n                    </a>\n                  )}\n                </div>\n\n                {result.summary && (\n                  <div className=\"bg-gray-100 border-2 border-black p-3 mb-4\">\n                    <p className=\"font-bold text-sm text-gray-800\">{result.summary}</p>\n                  </div>\n                )}\n\n                <div className=\"text-sm font-mono text-gray-700 mb-4 line-clamp-3\">\n                  {result.content?.substring(0, 300)}...\n                </div>\n\n                {result.tags && result.tags.length > 0 && (\n                  <div className=\"flex flex-wrap gap-2\">\n                    {result.tags.slice(0, 5).map((tag, tagIndex) => (\n                      <span\n                        key={tagIndex}\n                        className=\"bg-gray-500 text-white px-2 py-1 border-1 border-black font-black text-xs uppercase\"\n                      >\n                        {tag}\n                      </span>\n                    ))}\n                  </div>\n                )}\n              </div>\n            ))}\n          </div>\n        </BrutalistCard>\n      )}\n\n      {/* Search History */}\n      {searchHistory.length > 0 && (\n        <BrutalistCard>\n          <h3 className=\"text-xl font-black uppercase tracking-wider mb-6\">\n            RECENT SEARCHES\n          </h3>\n          \n          <div className=\"space-y-3\">\n            {searchHistory.map((historyItem) => (\n              <div\n                key={historyItem.id}\n                className=\"bg-gray-100 border-4 border-black p-4 flex items-center justify-between cursor-pointer hover:bg-gray-200\"\n                onClick={() => handleQuickSearch(historyItem)}\n              >\n                <div className=\"flex items-center space-x-4\">\n                  <Clock className=\"w-5 h-5 text-gray-500\" />\n                  <div>\n                    <p className=\"font-black text-sm uppercase\">\n                      \"{historyItem.query_text}\"\n                    </p>\n                    <p className=\"font-bold text-xs text-gray-600\">\n                      {historyItem.search_type.toUpperCase()} • {historyItem.results_count} results • {historyItem.execution_time}ms\n                    </p>\n                  </div>\n                </div>\n                <BrutalistButton variant=\"outline\" size=\"small\">\n                  SEARCH AGAIN\n                </BrutalistButton>\n              </div>\n            ))}\n          </div>\n        </BrutalistCard>\n      )}\n\n      {/* No Results */}\n      {!searching && query && results.length === 0 && (\n        <div className=\"text-center py-16\">\n          <div className=\"bg-red-500 border-4 border-black brutalist-shadow p-8 inline-block\">\n            <p className=\"font-black text-xl text-white uppercase mb-2\">\n              NO RESULTS FOUND\n            </p>\n            <p className=\"font-bold text-sm text-white\">\n              TRY DIFFERENT KEYWORDS OR ADD MORE CONTENT\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}"
    },
    {
      "name": "loadSearchHistory",
      "type": "function",
      "startLine": 25,
      "endLine": 32,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "function",
        "async"
      ],
      "file": {
        "name": "Search.jsx",
        "path": "src/pages/Search.jsx"
      },
      "code": "  const loadSearchHistory = async () => {\n    try {\n      const history = await SearchQuery.list(\"-created_date\", 5);\n      setSearchHistory(history);\n    } catch (error) {\n      console.error(\"Error loading search history:\", error);\n    }\n  };"
    },
    {
      "name": "loadSearchHistory",
      "type": "variable",
      "startLine": 25,
      "endLine": 32,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable",
        "async"
      ],
      "file": {
        "name": "Search.jsx",
        "path": "src/pages/Search.jsx"
      },
      "code": "  const loadSearchHistory = async () => {\n    try {\n      const history = await SearchQuery.list(\"-created_date\", 5);\n      setSearchHistory(history);\n    } catch (error) {\n      console.error(\"Error loading search history:\", error);\n    }\n  };"
    },
    {
      "name": "history",
      "type": "variable",
      "startLine": 27,
      "endLine": 27,
      "complexity": "low",
      "parameters": [
        {
          "name": "\"-created_date\""
        },
        {
          "name": "5"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable",
        "async"
      ],
      "file": {
        "name": "Search.jsx",
        "path": "src/pages/Search.jsx"
      },
      "code": "      const history = await SearchQuery.list(\"-created_date\", 5);"
    },
    {
      "name": "performSearch",
      "type": "function",
      "startLine": 34,
      "endLine": 166,
      "complexity": "high",
      "dependencies": [],
      "tags": [
        "function",
        "async"
      ],
      "file": {
        "name": "Search.jsx",
        "path": "src/pages/Search.jsx"
      },
      "code": "  const performSearch = async () => {\n    if (!query.trim()) return;\n\n    setSearching(true);\n    const startTime = Date.now();\n\n    try {\n      let searchResults = [];\n\n      if (searchType === \"keyword\" || searchType === \"hybrid\") {\n        // Keyword search\n        const [documents, scrapedContent] = await Promise.all([\n          Document.list(),\n          ScrapedContent.list()\n        ]);\n\n        const allContent = [\n          ...documents.map(doc => ({ ...doc, source_type: 'document' })),\n          ...scrapedContent.map(content => ({ ...content, source_type: 'scraped' }))\n        ];\n\n        const keywordResults = allContent.filter(item => {\n          const searchText = query.toLowerCase();\n          const title = (item.title || '').toLowerCase();\n          const content = (item.content || '').toLowerCase();\n          const summary = (item.summary || '').toLowerCase();\n          const tags = (item.tags || []).join(' ').toLowerCase();\n\n          return title.includes(searchText) || \n                 content.includes(searchText) || \n                 summary.includes(searchText) ||\n                 tags.includes(searchText);\n        });\n\n        searchResults = [...keywordResults];\n      }\n\n      if (searchType === \"semantic\" || searchType === \"hybrid\") {\n        // Semantic search using AI\n        const semanticResult = await InvokeLLM({\n          prompt: `Perform a semantic search for the query: \"${query}\"\n\nBased on this query, generate 3-5 relevant search results that would match semantically. Each result should have:\n- title: A relevant document/article title\n- content_excerpt: A short excerpt (100-200 words)\n- source_type: Either \"document\" or \"scraped\"\n- relevance_score: A score from 0-100\n- tags: Array of relevant tags\n- summary: Brief summary explaining why this is relevant\n\nFocus on Python-related content, tutorials, documentation, and programming concepts.`,\n          response_json_schema: {\n            type: \"object\",\n            properties: {\n              results: {\n                type: \"array\",\n                items: {\n                  type: \"object\",\n                  properties: {\n                    title: { type: \"string\" },\n                    content_excerpt: { type: \"string\" },\n                    source_type: { type: \"string\" },\n                    relevance_score: { type: \"number\" },\n                    tags: { type: \"array\", items: { type: \"string\" } },\n                    summary: { type: \"string\" }\n                  }\n                }\n              }\n            }\n          }\n        });\n\n        const semanticResults = semanticResult.results.map((result, index) => ({\n          id: `semantic-${index}`,\n          title: result.title,\n          content: result.content_excerpt,\n          summary: result.summary,\n          tags: result.tags,\n          source_type: result.source_type,\n          relevance_score: result.relevance_score,\n          is_semantic: true\n        }));\n\n        searchResults = [...searchResults, ...semanticResults];\n      }\n\n      // Apply filters\n      let filteredResults = searchResults;\n\n      if (filters.type !== \"all\") {\n        filteredResults = filteredResults.filter(result => \n          result.source_type === filters.type\n        );\n      }\n\n      if (filters.category !== \"all\") {\n        filteredResults = filteredResults.filter(result => \n          result.category === filters.category\n        );\n      }\n\n      // Sort by relevance (semantic results first, then by creation date)\n      filteredResults.sort((a, b) => {\n        if (a.is_semantic && !b.is_semantic) return -1;\n        if (!a.is_semantic && b.is_semantic) return 1;\n        if (a.relevance_score && b.relevance_score) {\n          return b.relevance_score - a.relevance_score;\n        }\n        return new Date(b.created_date || 0) - new Date(a.created_date || 0);\n      });\n\n      setResults(filteredResults);\n\n      const endTime = Date.now();\n      const execTime = endTime - startTime;\n      setExecutionTime(execTime);\n\n      // Save search query\n      await SearchQuery.create({\n        query_text: query,\n        search_type: searchType,\n        results_count: filteredResults.length,\n        execution_time: execTime\n      });\n\n      loadSearchHistory();\n\n    } catch (error) {\n      console.error(\"Search error:\", error);\n    } finally {\n      setSearching(false);\n    }\n  };"
    },
    {
      "name": "performSearch",
      "type": "variable",
      "startLine": 34,
      "endLine": 166,
      "complexity": "high",
      "dependencies": [],
      "tags": [
        "variable",
        "async"
      ],
      "file": {
        "name": "Search.jsx",
        "path": "src/pages/Search.jsx"
      },
      "code": "  const performSearch = async () => {\n    if (!query.trim()) return;\n\n    setSearching(true);\n    const startTime = Date.now();\n\n    try {\n      let searchResults = [];\n\n      if (searchType === \"keyword\" || searchType === \"hybrid\") {\n        // Keyword search\n        const [documents, scrapedContent] = await Promise.all([\n          Document.list(),\n          ScrapedContent.list()\n        ]);\n\n        const allContent = [\n          ...documents.map(doc => ({ ...doc, source_type: 'document' })),\n          ...scrapedContent.map(content => ({ ...content, source_type: 'scraped' }))\n        ];\n\n        const keywordResults = allContent.filter(item => {\n          const searchText = query.toLowerCase();\n          const title = (item.title || '').toLowerCase();\n          const content = (item.content || '').toLowerCase();\n          const summary = (item.summary || '').toLowerCase();\n          const tags = (item.tags || []).join(' ').toLowerCase();\n\n          return title.includes(searchText) || \n                 content.includes(searchText) || \n                 summary.includes(searchText) ||\n                 tags.includes(searchText);\n        });\n\n        searchResults = [...keywordResults];\n      }\n\n      if (searchType === \"semantic\" || searchType === \"hybrid\") {\n        // Semantic search using AI\n        const semanticResult = await InvokeLLM({\n          prompt: `Perform a semantic search for the query: \"${query}\"\n\nBased on this query, generate 3-5 relevant search results that would match semantically. Each result should have:\n- title: A relevant document/article title\n- content_excerpt: A short excerpt (100-200 words)\n- source_type: Either \"document\" or \"scraped\"\n- relevance_score: A score from 0-100\n- tags: Array of relevant tags\n- summary: Brief summary explaining why this is relevant\n\nFocus on Python-related content, tutorials, documentation, and programming concepts.`,\n          response_json_schema: {\n            type: \"object\",\n            properties: {\n              results: {\n                type: \"array\",\n                items: {\n                  type: \"object\",\n                  properties: {\n                    title: { type: \"string\" },\n                    content_excerpt: { type: \"string\" },\n                    source_type: { type: \"string\" },\n                    relevance_score: { type: \"number\" },\n                    tags: { type: \"array\", items: { type: \"string\" } },\n                    summary: { type: \"string\" }\n                  }\n                }\n              }\n            }\n          }\n        });\n\n        const semanticResults = semanticResult.results.map((result, index) => ({\n          id: `semantic-${index}`,\n          title: result.title,\n          content: result.content_excerpt,\n          summary: result.summary,\n          tags: result.tags,\n          source_type: result.source_type,\n          relevance_score: result.relevance_score,\n          is_semantic: true\n        }));\n\n        searchResults = [...searchResults, ...semanticResults];\n      }\n\n      // Apply filters\n      let filteredResults = searchResults;\n\n      if (filters.type !== \"all\") {\n        filteredResults = filteredResults.filter(result => \n          result.source_type === filters.type\n        );\n      }\n\n      if (filters.category !== \"all\") {\n        filteredResults = filteredResults.filter(result => \n          result.category === filters.category\n        );\n      }\n\n      // Sort by relevance (semantic results first, then by creation date)\n      filteredResults.sort((a, b) => {\n        if (a.is_semantic && !b.is_semantic) return -1;\n        if (!a.is_semantic && b.is_semantic) return 1;\n        if (a.relevance_score && b.relevance_score) {\n          return b.relevance_score - a.relevance_score;\n        }\n        return new Date(b.created_date || 0) - new Date(a.created_date || 0);\n      });\n\n      setResults(filteredResults);\n\n      const endTime = Date.now();\n      const execTime = endTime - startTime;\n      setExecutionTime(execTime);\n\n      // Save search query\n      await SearchQuery.create({\n        query_text: query,\n        search_type: searchType,\n        results_count: filteredResults.length,\n        execution_time: execTime\n      });\n\n      loadSearchHistory();\n\n    } catch (error) {\n      console.error(\"Search error:\", error);\n    } finally {\n      setSearching(false);\n    }\n  };"
    },
    {
      "name": "startTime",
      "type": "variable",
      "startLine": 38,
      "endLine": 38,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "Search.jsx",
        "path": "src/pages/Search.jsx"
      },
      "code": "    const startTime = Date.now();"
    },
    {
      "name": "searchResults",
      "type": "variable",
      "startLine": 41,
      "endLine": 41,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "Search.jsx",
        "path": "src/pages/Search.jsx"
      },
      "code": "      let searchResults = [];"
    },
    {
      "name": "allContent",
      "type": "variable",
      "startLine": 50,
      "endLine": 54,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "Search.jsx",
        "path": "src/pages/Search.jsx"
      },
      "code": "        const allContent = [\n          ...documents.map(doc => ({ ...doc, source_type: 'document' })),\n          ...scrapedContent.map(content => ({ ...content, source_type: 'scraped' }))\n        ];\n"
    },
    {
      "name": "keywordResults",
      "type": "variable",
      "startLine": 55,
      "endLine": 66,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "Search.jsx",
        "path": "src/pages/Search.jsx"
      },
      "code": "        const keywordResults = allContent.filter(item => {\n          const searchText = query.toLowerCase();\n          const title = (item.title || '').toLowerCase();\n          const content = (item.content || '').toLowerCase();\n          const summary = (item.summary || '').toLowerCase();\n          const tags = (item.tags || []).join(' ').toLowerCase();\n\n          return title.includes(searchText) || \n                 content.includes(searchText) || \n                 summary.includes(searchText) ||\n                 tags.includes(searchText);\n        });"
    },
    {
      "name": "searchText",
      "type": "variable",
      "startLine": 56,
      "endLine": 56,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "Search.jsx",
        "path": "src/pages/Search.jsx"
      },
      "code": "          const searchText = query.toLowerCase();"
    },
    {
      "name": "title",
      "type": "function",
      "startLine": 57,
      "endLine": 74,
      "complexity": "low",
      "parameters": [
        {
          "name": "item.title || ''"
        }
      ],
      "dependencies": [],
      "tags": [
        "function",
        "async"
      ],
      "file": {
        "name": "Search.jsx",
        "path": "src/pages/Search.jsx"
      },
      "code": "          const title = (item.title || '').toLowerCase();\n          const content = (item.content || '').toLowerCase();\n          const summary = (item.summary || '').toLowerCase();\n          const tags = (item.tags || []).join(' ').toLowerCase();\n\n          return title.includes(searchText) || \n                 content.includes(searchText) || \n                 summary.includes(searchText) ||\n                 tags.includes(searchText);\n        });\n\n        searchResults = [...keywordResults];\n      }\n\n      if (searchType === \"semantic\" || searchType === \"hybrid\") {\n        // Semantic search using AI\n        const semanticResult = await InvokeLLM({\n          prompt: `Perform a semantic search for the query: \"${query}\""
    },
    {
      "name": "title",
      "type": "variable",
      "startLine": 57,
      "endLine": 57,
      "complexity": "low",
      "parameters": [
        {
          "name": "item.title || ''"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "Search.jsx",
        "path": "src/pages/Search.jsx"
      },
      "code": "          const title = (item.title || '').toLowerCase();"
    },
    {
      "name": "content",
      "type": "function",
      "startLine": 58,
      "endLine": 74,
      "complexity": "low",
      "parameters": [
        {
          "name": "item.content || ''"
        }
      ],
      "dependencies": [],
      "tags": [
        "function",
        "async"
      ],
      "file": {
        "name": "Search.jsx",
        "path": "src/pages/Search.jsx"
      },
      "code": "          const content = (item.content || '').toLowerCase();\n          const summary = (item.summary || '').toLowerCase();\n          const tags = (item.tags || []).join(' ').toLowerCase();\n\n          return title.includes(searchText) || \n                 content.includes(searchText) || \n                 summary.includes(searchText) ||\n                 tags.includes(searchText);\n        });\n\n        searchResults = [...keywordResults];\n      }\n\n      if (searchType === \"semantic\" || searchType === \"hybrid\") {\n        // Semantic search using AI\n        const semanticResult = await InvokeLLM({\n          prompt: `Perform a semantic search for the query: \"${query}\""
    },
    {
      "name": "content",
      "type": "variable",
      "startLine": 58,
      "endLine": 58,
      "complexity": "low",
      "parameters": [
        {
          "name": "item.content || ''"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "Search.jsx",
        "path": "src/pages/Search.jsx"
      },
      "code": "          const content = (item.content || '').toLowerCase();"
    },
    {
      "name": "summary",
      "type": "function",
      "startLine": 59,
      "endLine": 74,
      "complexity": "low",
      "parameters": [
        {
          "name": "item.summary || ''"
        }
      ],
      "dependencies": [],
      "tags": [
        "function",
        "async"
      ],
      "file": {
        "name": "Search.jsx",
        "path": "src/pages/Search.jsx"
      },
      "code": "          const summary = (item.summary || '').toLowerCase();\n          const tags = (item.tags || []).join(' ').toLowerCase();\n\n          return title.includes(searchText) || \n                 content.includes(searchText) || \n                 summary.includes(searchText) ||\n                 tags.includes(searchText);\n        });\n\n        searchResults = [...keywordResults];\n      }\n\n      if (searchType === \"semantic\" || searchType === \"hybrid\") {\n        // Semantic search using AI\n        const semanticResult = await InvokeLLM({\n          prompt: `Perform a semantic search for the query: \"${query}\""
    },
    {
      "name": "summary",
      "type": "variable",
      "startLine": 59,
      "endLine": 59,
      "complexity": "low",
      "parameters": [
        {
          "name": "item.summary || ''"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "Search.jsx",
        "path": "src/pages/Search.jsx"
      },
      "code": "          const summary = (item.summary || '').toLowerCase();"
    },
    {
      "name": "tags",
      "type": "function",
      "startLine": 60,
      "endLine": 74,
      "complexity": "low",
      "parameters": [
        {
          "name": "item.tags || "
        }
      ],
      "dependencies": [],
      "tags": [
        "function",
        "async"
      ],
      "file": {
        "name": "Search.jsx",
        "path": "src/pages/Search.jsx"
      },
      "code": "          const tags = (item.tags || []).join(' ').toLowerCase();\n\n          return title.includes(searchText) || \n                 content.includes(searchText) || \n                 summary.includes(searchText) ||\n                 tags.includes(searchText);\n        });\n\n        searchResults = [...keywordResults];\n      }\n\n      if (searchType === \"semantic\" || searchType === \"hybrid\") {\n        // Semantic search using AI\n        const semanticResult = await InvokeLLM({\n          prompt: `Perform a semantic search for the query: \"${query}\""
    },
    {
      "name": "tags",
      "type": "variable",
      "startLine": 60,
      "endLine": 60,
      "complexity": "low",
      "parameters": [
        {
          "name": "item.tags || "
        }
      ],
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "Search.jsx",
        "path": "src/pages/Search.jsx"
      },
      "code": "          const tags = (item.tags || []).join(' ').toLowerCase();"
    },
    {
      "name": "semanticResult",
      "type": "variable",
      "startLine": 73,
      "endLine": 104,
      "complexity": "medium",
      "dependencies": [],
      "tags": [
        "variable",
        "async"
      ],
      "file": {
        "name": "Search.jsx",
        "path": "src/pages/Search.jsx"
      },
      "code": "        const semanticResult = await InvokeLLM({\n          prompt: `Perform a semantic search for the query: \"${query}\"\n\nBased on this query, generate 3-5 relevant search results that would match semantically. Each result should have:\n- title: A relevant document/article title\n- content_excerpt: A short excerpt (100-200 words)\n- source_type: Either \"document\" or \"scraped\"\n- relevance_score: A score from 0-100\n- tags: Array of relevant tags\n- summary: Brief summary explaining why this is relevant\n\nFocus on Python-related content, tutorials, documentation, and programming concepts.`,\n          response_json_schema: {\n            type: \"object\",\n            properties: {\n              results: {\n                type: \"array\",\n                items: {\n                  type: \"object\",\n                  properties: {\n                    title: { type: \"string\" },\n                    content_excerpt: { type: \"string\" },\n                    source_type: { type: \"string\" },\n                    relevance_score: { type: \"number\" },\n                    tags: { type: \"array\", items: { type: \"string\" } },\n                    summary: { type: \"string\" }\n                  }\n                }\n              }\n            }\n          }\n        });"
    },
    {
      "name": "semanticResults",
      "type": "variable",
      "startLine": 106,
      "endLine": 115,
      "complexity": "low",
      "parameters": [
        {
          "name": "(result"
        },
        {
          "name": "index"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "Search.jsx",
        "path": "src/pages/Search.jsx"
      },
      "code": "        const semanticResults = semanticResult.results.map((result, index) => ({\n          id: `semantic-${index}`,\n          title: result.title,\n          content: result.content_excerpt,\n          summary: result.summary,\n          tags: result.tags,\n          source_type: result.source_type,\n          relevance_score: result.relevance_score,\n          is_semantic: true\n        }));"
    },
    {
      "name": "filteredResults",
      "type": "variable",
      "startLine": 121,
      "endLine": 121,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "Search.jsx",
        "path": "src/pages/Search.jsx"
      },
      "code": "      let filteredResults = searchResults;"
    },
    {
      "name": "endTime",
      "type": "variable",
      "startLine": 147,
      "endLine": 147,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "Search.jsx",
        "path": "src/pages/Search.jsx"
      },
      "code": "      const endTime = Date.now();"
    },
    {
      "name": "execTime",
      "type": "variable",
      "startLine": 148,
      "endLine": 148,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "Search.jsx",
        "path": "src/pages/Search.jsx"
      },
      "code": "      const execTime = endTime - startTime;"
    },
    {
      "name": "handleQuickSearch",
      "type": "function",
      "startLine": 168,
      "endLine": 171,
      "complexity": "low",
      "parameters": [
        {
          "name": "historyQuery"
        }
      ],
      "dependencies": [],
      "tags": [
        "function"
      ],
      "file": {
        "name": "Search.jsx",
        "path": "src/pages/Search.jsx"
      },
      "code": "  const handleQuickSearch = (historyQuery) => {\n    setQuery(historyQuery.query_text);\n    setSearchType(historyQuery.search_type);\n  };"
    },
    {
      "name": "handleQuickSearch",
      "type": "variable",
      "startLine": 168,
      "endLine": 171,
      "complexity": "low",
      "parameters": [
        {
          "name": "historyQuery"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "Search.jsx",
        "path": "src/pages/Search.jsx"
      },
      "code": "  const handleQuickSearch = (historyQuery) => {\n    setQuery(historyQuery.query_text);\n    setSearchType(historyQuery.search_type);\n  };"
    },
    {
      "name": "PAGES",
      "type": "variable",
      "startLine": 19,
      "endLine": 35,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "index.jsx",
        "path": "src/pages/index.jsx"
      },
      "code": "const PAGES = {\n    \n    Dashboard: Dashboard,\n    \n    Upload: Upload,\n    \n    KnowledgeBase: KnowledgeBase,\n    \n    WebScraper: WebScraper,\n    \n    Search: Search,\n    \n    Reports: Reports,\n    \n    Settings: Settings,\n    \n}"
    },
    {
      "name": "_getCurrentPage",
      "type": "function",
      "startLine": 37,
      "endLine": 48,
      "complexity": "low",
      "parameters": [
        {
          "name": "url"
        }
      ],
      "dependencies": [],
      "tags": [
        "function"
      ],
      "file": {
        "name": "index.jsx",
        "path": "src/pages/index.jsx"
      },
      "code": "function _getCurrentPage(url) {\n    if (url.endsWith('/')) {\n        url = url.slice(0, -1);\n    }\n    let urlLastPart = url.split('/').pop();\n    if (urlLastPart.includes('?')) {\n        urlLastPart = urlLastPart.split('?')[0];\n    }\n\n    const pageName = Object.keys(PAGES).find(page => page.toLowerCase() === urlLastPart.toLowerCase());\n    return pageName || Object.keys(PAGES)[0];\n}"
    },
    {
      "name": "urlLastPart",
      "type": "variable",
      "startLine": 41,
      "endLine": 41,
      "complexity": "low",
      "parameters": [
        {
          "name": "'/'"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "index.jsx",
        "path": "src/pages/index.jsx"
      },
      "code": "    let urlLastPart = url.split('/').pop();"
    },
    {
      "name": "pageName",
      "type": "variable",
      "startLine": 46,
      "endLine": 46,
      "complexity": "low",
      "parameters": [
        {
          "name": "PAGES"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "index.jsx",
        "path": "src/pages/index.jsx"
      },
      "code": "    const pageName = Object.keys(PAGES).find(page => page.toLowerCase() === urlLastPart.toLowerCase());"
    },
    {
      "name": "PagesContent",
      "type": "component",
      "startLine": 51,
      "endLine": 79,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "function"
      ],
      "file": {
        "name": "index.jsx",
        "path": "src/pages/index.jsx"
      },
      "code": "function PagesContent() {\n    const location = useLocation();\n    const currentPage = _getCurrentPage(location.pathname);\n    \n    return (\n        <Layout currentPageName={currentPage}>\n            <Routes>            \n                \n                    <Route path=\"/\" element={<Dashboard />} />\n                \n                \n                <Route path=\"/Dashboard\" element={<Dashboard />} />\n                \n                <Route path=\"/Upload\" element={<Upload />} />\n                \n                <Route path=\"/KnowledgeBase\" element={<KnowledgeBase />} />\n                \n                <Route path=\"/WebScraper\" element={<WebScraper />} />\n                \n                <Route path=\"/Search\" element={<Search />} />\n                \n                <Route path=\"/Reports\" element={<Reports />} />\n                \n                <Route path=\"/Settings\" element={<Settings />} />\n                \n            </Routes>\n        </Layout>\n    );\n}"
    },
    {
      "name": "PagesContent",
      "type": "component",
      "startLine": 51,
      "endLine": 79,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "component"
      ],
      "file": {
        "name": "index.jsx",
        "path": "src/pages/index.jsx"
      },
      "code": "function PagesContent() {\n    const location = useLocation();\n    const currentPage = _getCurrentPage(location.pathname);\n    \n    return (\n        <Layout currentPageName={currentPage}>\n            <Routes>            \n                \n                    <Route path=\"/\" element={<Dashboard />} />\n                \n                \n                <Route path=\"/Dashboard\" element={<Dashboard />} />\n                \n                <Route path=\"/Upload\" element={<Upload />} />\n                \n                <Route path=\"/KnowledgeBase\" element={<KnowledgeBase />} />\n                \n                <Route path=\"/WebScraper\" element={<WebScraper />} />\n                \n                <Route path=\"/Search\" element={<Search />} />\n                \n                <Route path=\"/Reports\" element={<Reports />} />\n                \n                <Route path=\"/Settings\" element={<Settings />} />\n                \n            </Routes>\n        </Layout>\n    );\n}"
    },
    {
      "name": "location",
      "type": "variable",
      "startLine": 52,
      "endLine": 52,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "index.jsx",
        "path": "src/pages/index.jsx"
      },
      "code": "    const location = useLocation();"
    },
    {
      "name": "currentPage",
      "type": "variable",
      "startLine": 53,
      "endLine": 53,
      "complexity": "low",
      "parameters": [
        {
          "name": "location.pathname"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "index.jsx",
        "path": "src/pages/index.jsx"
      },
      "code": "    const currentPage = _getCurrentPage(location.pathname);"
    },
    {
      "name": "Pages",
      "type": "component",
      "startLine": 81,
      "endLine": 87,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "component",
        "default-export",
        "exported"
      ],
      "file": {
        "name": "index.jsx",
        "path": "src/pages/index.jsx"
      },
      "code": "export default function Pages() {\n    return (\n        <Router>\n            <PagesContent />\n        </Router>\n    );\n}"
    },
    {
      "name": "BrutalistCard",
      "type": "component",
      "startLine": 3,
      "endLine": 8,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "component",
        "default-export",
        "exported"
      ],
      "file": {
        "name": "BrutalistCard.jsx",
        "path": "src/components/BrutalistCard.jsx"
      },
      "code": "export default function BrutalistCard({ \n  children, \n  className = \"\", \n  color = \"white\",\n  hover = false \n}) {"
    },
    {
      "name": "colorClasses",
      "type": "variable",
      "startLine": 9,
      "endLine": 16,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "BrutalistCard.jsx",
        "path": "src/components/BrutalistCard.jsx"
      },
      "code": "  const colorClasses = {\n    white: \"bg-white\",\n    blue: \"bg-blue-500\",\n    pink: \"bg-pink-500\", \n    yellow: \"bg-yellow-400\",\n    green: \"bg-green-500\",\n    orange: \"bg-orange-500\"\n  };"
    },
    {
      "name": "BrutalistButton",
      "type": "component",
      "startLine": 3,
      "endLine": 11,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "component",
        "default-export",
        "exported"
      ],
      "file": {
        "name": "BrutalistButton.jsx",
        "path": "src/components/BrutalistButton.jsx"
      },
      "code": "export default function BrutalistButton({ \n  children, \n  onClick,\n  variant = \"primary\",\n  size = \"default\",\n  disabled = false,\n  className = \"\",\n  type = \"button\"\n}) {"
    },
    {
      "name": "variants",
      "type": "variable",
      "startLine": 12,
      "endLine": 19,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "BrutalistButton.jsx",
        "path": "src/components/BrutalistButton.jsx"
      },
      "code": "  const variants = {\n    primary: \"bg-blue-500 hover:bg-blue-400 text-white\",\n    secondary: \"bg-pink-500 hover:bg-pink-400 text-white\", \n    success: \"bg-green-500 hover:bg-green-400 text-white\",\n    warning: \"bg-orange-500 hover:bg-orange-400 text-white\",\n    danger: \"bg-red-500 hover:bg-red-400 text-white\",\n    outline: \"bg-white hover:bg-gray-100 text-black\"\n  };"
    },
    {
      "name": "sizes",
      "type": "variable",
      "startLine": 21,
      "endLine": 25,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "BrutalistButton.jsx",
        "path": "src/components/BrutalistButton.jsx"
      },
      "code": "  const sizes = {\n    small: \"px-3 py-2 text-xs\",\n    default: \"px-6 py-3 text-sm\",\n    large: \"px-8 py-4 text-lg\"\n  };"
    },
    {
      "name": "ProcessingQueue",
      "type": "component",
      "startLine": 5,
      "endLine": 5,
      "complexity": "low",
      "parameters": [
        {
          "name": " items =  "
        }
      ],
      "dependencies": [],
      "tags": [
        "component",
        "default-export",
        "exported"
      ],
      "file": {
        "name": "ProcessingQueue.jsx",
        "path": "src/components/ProcessingQueue.jsx"
      },
      "code": "export default function ProcessingQueue({ items = [] }) {"
    },
    {
      "name": "getStatusIcon",
      "type": "function",
      "startLine": 6,
      "endLine": 17,
      "complexity": "low",
      "parameters": [
        {
          "name": "status"
        }
      ],
      "dependencies": [],
      "tags": [
        "function"
      ],
      "file": {
        "name": "ProcessingQueue.jsx",
        "path": "src/components/ProcessingQueue.jsx"
      },
      "code": "  const getStatusIcon = (status) => {\n    switch (status) {\n      case \"processing\":\n        return <Loader2 className=\"w-6 h-6 animate-spin text-blue-500\" />;\n      case \"completed\":\n        return <CheckCircle className=\"w-6 h-6 text-green-500\" />;\n      case \"failed\":\n        return <XCircle className=\"w-6 h-6 text-red-500\" />;\n      default:\n        return <Clock className=\"w-6 h-6 text-gray-500\" />;\n    }\n  };"
    },
    {
      "name": "getStatusIcon",
      "type": "variable",
      "startLine": 6,
      "endLine": 17,
      "complexity": "low",
      "parameters": [
        {
          "name": "status"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "ProcessingQueue.jsx",
        "path": "src/components/ProcessingQueue.jsx"
      },
      "code": "  const getStatusIcon = (status) => {\n    switch (status) {\n      case \"processing\":\n        return <Loader2 className=\"w-6 h-6 animate-spin text-blue-500\" />;\n      case \"completed\":\n        return <CheckCircle className=\"w-6 h-6 text-green-500\" />;\n      case \"failed\":\n        return <XCircle className=\"w-6 h-6 text-red-500\" />;\n      default:\n        return <Clock className=\"w-6 h-6 text-gray-500\" />;\n    }\n  };"
    },
    {
      "name": "getStatusColor",
      "type": "function",
      "startLine": 19,
      "endLine": 30,
      "complexity": "low",
      "parameters": [
        {
          "name": "status"
        }
      ],
      "dependencies": [],
      "tags": [
        "function"
      ],
      "file": {
        "name": "ProcessingQueue.jsx",
        "path": "src/components/ProcessingQueue.jsx"
      },
      "code": "  const getStatusColor = (status) => {\n    switch (status) {\n      case \"processing\":\n        return \"bg-blue-100\";\n      case \"completed\":\n        return \"bg-green-100\";\n      case \"failed\":\n        return \"bg-red-100\";\n      default:\n        return \"bg-gray-100\";\n    }\n  };"
    },
    {
      "name": "getStatusColor",
      "type": "variable",
      "startLine": 19,
      "endLine": 30,
      "complexity": "low",
      "parameters": [
        {
          "name": "status"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "ProcessingQueue.jsx",
        "path": "src/components/ProcessingQueue.jsx"
      },
      "code": "  const getStatusColor = (status) => {\n    switch (status) {\n      case \"processing\":\n        return \"bg-blue-100\";\n      case \"completed\":\n        return \"bg-green-100\";\n      case \"failed\":\n        return \"bg-red-100\";\n      default:\n        return \"bg-gray-100\";\n    }\n  };"
    },
    {
      "name": "DropdownMenu",
      "type": "variable",
      "startLine": 7,
      "endLine": 8,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "dropdown-menu.jsx",
        "path": "src/components/ui/dropdown-menu.jsx"
      },
      "code": "const DropdownMenu = DropdownMenuPrimitive.Root\n"
    },
    {
      "name": "DropdownMenuTrigger",
      "type": "variable",
      "startLine": 9,
      "endLine": 10,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "dropdown-menu.jsx",
        "path": "src/components/ui/dropdown-menu.jsx"
      },
      "code": "const DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n"
    },
    {
      "name": "DropdownMenuGroup",
      "type": "variable",
      "startLine": 11,
      "endLine": 12,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "dropdown-menu.jsx",
        "path": "src/components/ui/dropdown-menu.jsx"
      },
      "code": "const DropdownMenuGroup = DropdownMenuPrimitive.Group\n"
    },
    {
      "name": "DropdownMenuPortal",
      "type": "variable",
      "startLine": 13,
      "endLine": 14,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "dropdown-menu.jsx",
        "path": "src/components/ui/dropdown-menu.jsx"
      },
      "code": "const DropdownMenuPortal = DropdownMenuPrimitive.Portal\n"
    },
    {
      "name": "DropdownMenuSub",
      "type": "variable",
      "startLine": 15,
      "endLine": 16,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "dropdown-menu.jsx",
        "path": "src/components/ui/dropdown-menu.jsx"
      },
      "code": "const DropdownMenuSub = DropdownMenuPrimitive.Sub\n"
    },
    {
      "name": "DropdownMenuRadioGroup",
      "type": "variable",
      "startLine": 17,
      "endLine": 18,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "dropdown-menu.jsx",
        "path": "src/components/ui/dropdown-menu.jsx"
      },
      "code": "const DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n"
    },
    {
      "name": "DropdownMenuSubTrigger",
      "type": "variable",
      "startLine": 19,
      "endLine": 19,
      "complexity": "low",
      "parameters": [
        {
          "name": "( className"
        },
        {
          "name": "inset"
        },
        {
          "name": "children"
        },
        {
          "name": "ref"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable",
        "react"
      ],
      "file": {
        "name": "dropdown-menu.jsx",
        "path": "src/components/ui/dropdown-menu.jsx"
      },
      "code": "const DropdownMenuSubTrigger = React.forwardRef(({ className, inset, children, ...props }, ref) => ("
    },
    {
      "name": "DropdownMenuSubContent",
      "type": "variable",
      "startLine": 35,
      "endLine": 35,
      "complexity": "low",
      "parameters": [
        {
          "name": "( className"
        },
        {
          "name": "ref"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable",
        "react"
      ],
      "file": {
        "name": "dropdown-menu.jsx",
        "path": "src/components/ui/dropdown-menu.jsx"
      },
      "code": "const DropdownMenuSubContent = React.forwardRef(({ className, ...props }, ref) => ("
    },
    {
      "name": "DropdownMenuContent",
      "type": "variable",
      "startLine": 47,
      "endLine": 47,
      "complexity": "low",
      "parameters": [
        {
          "name": "( className"
        },
        {
          "name": "sideOffset = 4"
        },
        {
          "name": "ref"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable",
        "react"
      ],
      "file": {
        "name": "dropdown-menu.jsx",
        "path": "src/components/ui/dropdown-menu.jsx"
      },
      "code": "const DropdownMenuContent = React.forwardRef(({ className, sideOffset = 4, ...props }, ref) => ("
    },
    {
      "name": "DropdownMenuItem",
      "type": "variable",
      "startLine": 62,
      "endLine": 62,
      "complexity": "low",
      "parameters": [
        {
          "name": "( className"
        },
        {
          "name": "inset"
        },
        {
          "name": "ref"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable",
        "react"
      ],
      "file": {
        "name": "dropdown-menu.jsx",
        "path": "src/components/ui/dropdown-menu.jsx"
      },
      "code": "const DropdownMenuItem = React.forwardRef(({ className, inset, ...props }, ref) => ("
    },
    {
      "name": "DropdownMenuCheckboxItem",
      "type": "variable",
      "startLine": 74,
      "endLine": 74,
      "complexity": "low",
      "parameters": [
        {
          "name": "( className"
        },
        {
          "name": "children"
        },
        {
          "name": "checked"
        },
        {
          "name": "ref"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable",
        "react"
      ],
      "file": {
        "name": "dropdown-menu.jsx",
        "path": "src/components/ui/dropdown-menu.jsx"
      },
      "code": "const DropdownMenuCheckboxItem = React.forwardRef(({ className, children, checked, ...props }, ref) => ("
    },
    {
      "name": "DropdownMenuRadioItem",
      "type": "variable",
      "startLine": 94,
      "endLine": 94,
      "complexity": "low",
      "parameters": [
        {
          "name": "( className"
        },
        {
          "name": "children"
        },
        {
          "name": "ref"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable",
        "react"
      ],
      "file": {
        "name": "dropdown-menu.jsx",
        "path": "src/components/ui/dropdown-menu.jsx"
      },
      "code": "const DropdownMenuRadioItem = React.forwardRef(({ className, children, ...props }, ref) => ("
    },
    {
      "name": "DropdownMenuLabel",
      "type": "variable",
      "startLine": 112,
      "endLine": 112,
      "complexity": "low",
      "parameters": [
        {
          "name": "( className"
        },
        {
          "name": "inset"
        },
        {
          "name": "ref"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable",
        "react"
      ],
      "file": {
        "name": "dropdown-menu.jsx",
        "path": "src/components/ui/dropdown-menu.jsx"
      },
      "code": "const DropdownMenuLabel = React.forwardRef(({ className, inset, ...props }, ref) => ("
    },
    {
      "name": "DropdownMenuSeparator",
      "type": "variable",
      "startLine": 120,
      "endLine": 120,
      "complexity": "low",
      "parameters": [
        {
          "name": "( className"
        },
        {
          "name": "ref"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable",
        "react"
      ],
      "file": {
        "name": "dropdown-menu.jsx",
        "path": "src/components/ui/dropdown-menu.jsx"
      },
      "code": "const DropdownMenuSeparator = React.forwardRef(({ className, ...props }, ref) => ("
    },
    {
      "name": "DropdownMenuShortcut",
      "type": "function",
      "startLine": 128,
      "endLine": 131,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "function"
      ],
      "file": {
        "name": "dropdown-menu.jsx",
        "path": "src/components/ui/dropdown-menu.jsx"
      },
      "code": "const DropdownMenuShortcut = ({\n  className,\n  ...props\n}) => {"
    },
    {
      "name": "DropdownMenuShortcut",
      "type": "variable",
      "startLine": 128,
      "endLine": 131,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "dropdown-menu.jsx",
        "path": "src/components/ui/dropdown-menu.jsx"
      },
      "code": "const DropdownMenuShortcut = ({\n  className,\n  ...props\n}) => {"
    },
    {
      "name": "Select",
      "type": "variable",
      "startLine": 9,
      "endLine": 10,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "select.jsx",
        "path": "src/components/ui/select.jsx"
      },
      "code": "const Select = SelectPrimitive.Root\n"
    },
    {
      "name": "SelectGroup",
      "type": "variable",
      "startLine": 11,
      "endLine": 12,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "select.jsx",
        "path": "src/components/ui/select.jsx"
      },
      "code": "const SelectGroup = SelectPrimitive.Group\n"
    },
    {
      "name": "SelectValue",
      "type": "variable",
      "startLine": 13,
      "endLine": 14,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "select.jsx",
        "path": "src/components/ui/select.jsx"
      },
      "code": "const SelectValue = SelectPrimitive.Value\n"
    },
    {
      "name": "SelectTrigger",
      "type": "variable",
      "startLine": 15,
      "endLine": 15,
      "complexity": "low",
      "parameters": [
        {
          "name": "( className"
        },
        {
          "name": "children"
        },
        {
          "name": "ref"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable",
        "react"
      ],
      "file": {
        "name": "select.jsx",
        "path": "src/components/ui/select.jsx"
      },
      "code": "const SelectTrigger = React.forwardRef(({ className, children, ...props }, ref) => ("
    },
    {
      "name": "SelectScrollUpButton",
      "type": "variable",
      "startLine": 31,
      "endLine": 31,
      "complexity": "low",
      "parameters": [
        {
          "name": "( className"
        },
        {
          "name": "ref"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable",
        "react"
      ],
      "file": {
        "name": "select.jsx",
        "path": "src/components/ui/select.jsx"
      },
      "code": "const SelectScrollUpButton = React.forwardRef(({ className, ...props }, ref) => ("
    },
    {
      "name": "SelectScrollDownButton",
      "type": "variable",
      "startLine": 41,
      "endLine": 41,
      "complexity": "low",
      "parameters": [
        {
          "name": "( className"
        },
        {
          "name": "ref"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable",
        "react"
      ],
      "file": {
        "name": "select.jsx",
        "path": "src/components/ui/select.jsx"
      },
      "code": "const SelectScrollDownButton = React.forwardRef(({ className, ...props }, ref) => ("
    },
    {
      "name": "SelectContent",
      "type": "variable",
      "startLine": 52,
      "endLine": 52,
      "complexity": "low",
      "parameters": [
        {
          "name": "( className"
        },
        {
          "name": "children"
        },
        {
          "name": "position = \"popper\""
        },
        {
          "name": "ref"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable",
        "react"
      ],
      "file": {
        "name": "select.jsx",
        "path": "src/components/ui/select.jsx"
      },
      "code": "const SelectContent = React.forwardRef(({ className, children, position = \"popper\", ...props }, ref) => ("
    },
    {
      "name": "SelectLabel",
      "type": "variable",
      "startLine": 76,
      "endLine": 76,
      "complexity": "low",
      "parameters": [
        {
          "name": "( className"
        },
        {
          "name": "ref"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable",
        "react"
      ],
      "file": {
        "name": "select.jsx",
        "path": "src/components/ui/select.jsx"
      },
      "code": "const SelectLabel = React.forwardRef(({ className, ...props }, ref) => ("
    },
    {
      "name": "SelectItem",
      "type": "variable",
      "startLine": 84,
      "endLine": 84,
      "complexity": "low",
      "parameters": [
        {
          "name": "( className"
        },
        {
          "name": "children"
        },
        {
          "name": "ref"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable",
        "react"
      ],
      "file": {
        "name": "select.jsx",
        "path": "src/components/ui/select.jsx"
      },
      "code": "const SelectItem = React.forwardRef(({ className, children, ...props }, ref) => ("
    },
    {
      "name": "SelectSeparator",
      "type": "variable",
      "startLine": 102,
      "endLine": 102,
      "complexity": "low",
      "parameters": [
        {
          "name": "( className"
        },
        {
          "name": "ref"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable",
        "react"
      ],
      "file": {
        "name": "select.jsx",
        "path": "src/components/ui/select.jsx"
      },
      "code": "const SelectSeparator = React.forwardRef(({ className, ...props }, ref) => ("
    },
    {
      "name": "RadioGroup",
      "type": "variable",
      "startLine": 7,
      "endLine": 7,
      "complexity": "low",
      "parameters": [
        {
          "name": "( className"
        },
        {
          "name": "ref"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable",
        "react"
      ],
      "file": {
        "name": "radio-group.jsx",
        "path": "src/components/ui/radio-group.jsx"
      },
      "code": "const RadioGroup = React.forwardRef(({ className, ...props }, ref) => {"
    },
    {
      "name": "RadioGroupItem",
      "type": "variable",
      "startLine": 12,
      "endLine": 12,
      "complexity": "low",
      "parameters": [
        {
          "name": "( className"
        },
        {
          "name": "ref"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable",
        "react"
      ],
      "file": {
        "name": "radio-group.jsx",
        "path": "src/components/ui/radio-group.jsx"
      },
      "code": "const RadioGroupItem = React.forwardRef(({ className, ...props }, ref) => {"
    },
    {
      "name": "Collapsible",
      "type": "variable",
      "startLine": 5,
      "endLine": 6,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "collapsible.jsx",
        "path": "src/components/ui/collapsible.jsx"
      },
      "code": "const Collapsible = CollapsiblePrimitive.Root\n"
    },
    {
      "name": "CollapsibleTrigger",
      "type": "variable",
      "startLine": 7,
      "endLine": 8,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "collapsible.jsx",
        "path": "src/components/ui/collapsible.jsx"
      },
      "code": "const CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n"
    },
    {
      "name": "CollapsibleContent",
      "type": "variable",
      "startLine": 9,
      "endLine": 10,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "collapsible.jsx",
        "path": "src/components/ui/collapsible.jsx"
      },
      "code": "const CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n"
    },
    {
      "name": "ToastProvider",
      "type": "variable",
      "startLine": 6,
      "endLine": 6,
      "complexity": "low",
      "parameters": [
        {
          "name": "ref"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable",
        "react"
      ],
      "file": {
        "name": "toast.jsx",
        "path": "src/components/ui/toast.jsx"
      },
      "code": "const ToastProvider = React.forwardRef(({ ...props }, ref) => ("
    },
    {
      "name": "ToastViewport",
      "type": "variable",
      "startLine": 15,
      "endLine": 15,
      "complexity": "low",
      "parameters": [
        {
          "name": "ref"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable",
        "react"
      ],
      "file": {
        "name": "toast.jsx",
        "path": "src/components/ui/toast.jsx"
      },
      "code": "const ToastViewport = React.forwardRef(({ ...props }, ref) => ("
    },
    {
      "name": "toastVariants",
      "type": "variable",
      "startLine": 24,
      "endLine": 26,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "toast.jsx",
        "path": "src/components/ui/toast.jsx"
      },
      "code": "const toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {"
    },
    {
      "name": "Toast",
      "type": "variable",
      "startLine": 40,
      "endLine": 40,
      "complexity": "low",
      "parameters": [
        {
          "name": "( className"
        },
        {
          "name": "variant"
        },
        {
          "name": "ref"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable",
        "react"
      ],
      "file": {
        "name": "toast.jsx",
        "path": "src/components/ui/toast.jsx"
      },
      "code": "const Toast = React.forwardRef(({ className, variant, ...props }, ref) => {"
    },
    {
      "name": "ToastAction",
      "type": "variable",
      "startLine": 51,
      "endLine": 51,
      "complexity": "low",
      "parameters": [
        {
          "name": "( className"
        },
        {
          "name": "ref"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable",
        "react"
      ],
      "file": {
        "name": "toast.jsx",
        "path": "src/components/ui/toast.jsx"
      },
      "code": "const ToastAction = React.forwardRef(({ className, ...props }, ref) => ("
    },
    {
      "name": "ToastClose",
      "type": "variable",
      "startLine": 63,
      "endLine": 63,
      "complexity": "low",
      "parameters": [
        {
          "name": "( className"
        },
        {
          "name": "ref"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable",
        "react"
      ],
      "file": {
        "name": "toast.jsx",
        "path": "src/components/ui/toast.jsx"
      },
      "code": "const ToastClose = React.forwardRef(({ className, ...props }, ref) => ("
    },
    {
      "name": "ToastTitle",
      "type": "variable",
      "startLine": 78,
      "endLine": 78,
      "complexity": "low",
      "parameters": [
        {
          "name": "( className"
        },
        {
          "name": "ref"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable",
        "react"
      ],
      "file": {
        "name": "toast.jsx",
        "path": "src/components/ui/toast.jsx"
      },
      "code": "const ToastTitle = React.forwardRef(({ className, ...props }, ref) => ("
    },
    {
      "name": "ToastDescription",
      "type": "variable",
      "startLine": 87,
      "endLine": 87,
      "complexity": "low",
      "parameters": [
        {
          "name": "( className"
        },
        {
          "name": "ref"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable",
        "react"
      ],
      "file": {
        "name": "toast.jsx",
        "path": "src/components/ui/toast.jsx"
      },
      "code": "const ToastDescription = React.forwardRef(({ className, ...props }, ref) => ("
    },
    {
      "name": "badgeVariants",
      "type": "variable",
      "startLine": 6,
      "endLine": 8,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "badge.jsx",
        "path": "src/components/ui/badge.jsx"
      },
      "code": "const badgeVariants = cva(\n  \"inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {"
    },
    {
      "name": "Badge",
      "type": "function",
      "startLine": 26,
      "endLine": 30,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "function"
      ],
      "file": {
        "name": "badge.jsx",
        "path": "src/components/ui/badge.jsx"
      },
      "code": "function Badge({\n  className,\n  variant,\n  ...props\n}) {"
    },
    {
      "name": "Badge",
      "type": "component",
      "startLine": 26,
      "endLine": 30,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "component"
      ],
      "file": {
        "name": "badge.jsx",
        "path": "src/components/ui/badge.jsx"
      },
      "code": "function Badge({\n  className,\n  variant,\n  ...props\n}) {"
    },
    {
      "name": "TooltipProvider",
      "type": "variable",
      "startLine": 8,
      "endLine": 9,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "tooltip.jsx",
        "path": "src/components/ui/tooltip.jsx"
      },
      "code": "const TooltipProvider = TooltipPrimitive.Provider\n"
    },
    {
      "name": "Tooltip",
      "type": "variable",
      "startLine": 10,
      "endLine": 11,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "tooltip.jsx",
        "path": "src/components/ui/tooltip.jsx"
      },
      "code": "const Tooltip = TooltipPrimitive.Root\n"
    },
    {
      "name": "TooltipTrigger",
      "type": "variable",
      "startLine": 12,
      "endLine": 13,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "tooltip.jsx",
        "path": "src/components/ui/tooltip.jsx"
      },
      "code": "const TooltipTrigger = TooltipPrimitive.Trigger\n"
    },
    {
      "name": "TooltipContent",
      "type": "variable",
      "startLine": 14,
      "endLine": 14,
      "complexity": "low",
      "parameters": [
        {
          "name": "( className"
        },
        {
          "name": "sideOffset = 4"
        },
        {
          "name": "ref"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable",
        "react"
      ],
      "file": {
        "name": "tooltip.jsx",
        "path": "src/components/ui/tooltip.jsx"
      },
      "code": "const TooltipContent = React.forwardRef(({ className, sideOffset = 4, ...props }, ref) => ("
    },
    {
      "name": "Skeleton",
      "type": "function",
      "startLine": 3,
      "endLine": 6,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "function"
      ],
      "file": {
        "name": "skeleton.jsx",
        "path": "src/components/ui/skeleton.jsx"
      },
      "code": "function Skeleton({\n  className,\n  ...props\n}) {"
    },
    {
      "name": "Skeleton",
      "type": "component",
      "startLine": 3,
      "endLine": 6,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "component"
      ],
      "file": {
        "name": "skeleton.jsx",
        "path": "src/components/ui/skeleton.jsx"
      },
      "code": "function Skeleton({\n  className,\n  ...props\n}) {"
    },
    {
      "name": "SIDEBAR_COOKIE_NAME",
      "type": "variable",
      "startLine": 20,
      "endLine": 20,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "sidebar.jsx",
        "path": "src/components/ui/sidebar.jsx"
      },
      "code": "const SIDEBAR_COOKIE_NAME = \"sidebar_state\""
    },
    {
      "name": "SIDEBAR_COOKIE_MAX_AGE",
      "type": "variable",
      "startLine": 21,
      "endLine": 21,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "sidebar.jsx",
        "path": "src/components/ui/sidebar.jsx"
      },
      "code": "const SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7"
    },
    {
      "name": "SIDEBAR_WIDTH",
      "type": "variable",
      "startLine": 22,
      "endLine": 22,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "sidebar.jsx",
        "path": "src/components/ui/sidebar.jsx"
      },
      "code": "const SIDEBAR_WIDTH = \"16rem\""
    },
    {
      "name": "SIDEBAR_WIDTH_MOBILE",
      "type": "variable",
      "startLine": 23,
      "endLine": 23,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "sidebar.jsx",
        "path": "src/components/ui/sidebar.jsx"
      },
      "code": "const SIDEBAR_WIDTH_MOBILE = \"18rem\""
    },
    {
      "name": "SIDEBAR_WIDTH_ICON",
      "type": "variable",
      "startLine": 24,
      "endLine": 24,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "sidebar.jsx",
        "path": "src/components/ui/sidebar.jsx"
      },
      "code": "const SIDEBAR_WIDTH_ICON = \"3rem\""
    },
    {
      "name": "SIDEBAR_KEYBOARD_SHORTCUT",
      "type": "variable",
      "startLine": 25,
      "endLine": 26,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "sidebar.jsx",
        "path": "src/components/ui/sidebar.jsx"
      },
      "code": "const SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n"
    },
    {
      "name": "SidebarContext",
      "type": "variable",
      "startLine": 27,
      "endLine": 28,
      "complexity": "low",
      "parameters": [
        {
          "name": "null"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable",
        "react"
      ],
      "file": {
        "name": "sidebar.jsx",
        "path": "src/components/ui/sidebar.jsx"
      },
      "code": "const SidebarContext = React.createContext(null)\n"
    },
    {
      "name": "useSidebar",
      "type": "hook",
      "startLine": 29,
      "endLine": 36,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "function",
        "react"
      ],
      "file": {
        "name": "sidebar.jsx",
        "path": "src/components/ui/sidebar.jsx"
      },
      "code": "function useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}"
    },
    {
      "name": "useSidebar",
      "type": "hook",
      "startLine": 29,
      "endLine": 36,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "hook",
        "react"
      ],
      "file": {
        "name": "sidebar.jsx",
        "path": "src/components/ui/sidebar.jsx"
      },
      "code": "function useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}"
    },
    {
      "name": "context",
      "type": "variable",
      "startLine": 30,
      "endLine": 37,
      "complexity": "low",
      "parameters": [
        {
          "name": "SidebarContext"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable",
        "react"
      ],
      "file": {
        "name": "sidebar.jsx",
        "path": "src/components/ui/sidebar.jsx"
      },
      "code": "  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n"
    },
    {
      "name": "SidebarProvider",
      "type": "variable",
      "startLine": 38,
      "endLine": 42,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable",
        "react"
      ],
      "file": {
        "name": "sidebar.jsx",
        "path": "src/components/ui/sidebar.jsx"
      },
      "code": "const SidebarProvider = React.forwardRef((\n  {\n    defaultOpen = true,\n    open: openProp,\n    onOpenChange: setOpenProp,"
    },
    {
      "name": "isMobile",
      "type": "variable",
      "startLine": 50,
      "endLine": 50,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "sidebar.jsx",
        "path": "src/components/ui/sidebar.jsx"
      },
      "code": "  const isMobile = useIsMobile()"
    },
    {
      "name": "open",
      "type": "variable",
      "startLine": 56,
      "endLine": 56,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "sidebar.jsx",
        "path": "src/components/ui/sidebar.jsx"
      },
      "code": "  const open = openProp ?? _open"
    },
    {
      "name": "setOpen",
      "type": "variable",
      "startLine": 57,
      "endLine": 67,
      "complexity": "low",
      "parameters": [
        {
          "name": "(value"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable",
        "react"
      ],
      "file": {
        "name": "sidebar.jsx",
        "path": "src/components/ui/sidebar.jsx"
      },
      "code": "  const setOpen = React.useCallback((value) => {\n    const openState = typeof value === \"function\" ? value(open) : value\n    if (setOpenProp) {\n      setOpenProp(openState)\n    } else {\n      _setOpen(openState)\n    }\n\n    // This sets the cookie to keep the sidebar state.\n    document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n  }, [setOpenProp, open])"
    },
    {
      "name": "openState",
      "type": "variable",
      "startLine": 58,
      "endLine": 61,
      "complexity": "low",
      "parameters": [
        {
          "name": "open"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "sidebar.jsx",
        "path": "src/components/ui/sidebar.jsx"
      },
      "code": "    const openState = typeof value === \"function\" ? value(open) : value\n    if (setOpenProp) {\n      setOpenProp(openState)\n    } else {"
    },
    {
      "name": "toggleSidebar",
      "type": "variable",
      "startLine": 70,
      "endLine": 74,
      "complexity": "low",
      "parameters": [
        {
          "name": "("
        }
      ],
      "dependencies": [],
      "tags": [
        "variable",
        "react"
      ],
      "file": {
        "name": "sidebar.jsx",
        "path": "src/components/ui/sidebar.jsx"
      },
      "code": "  const toggleSidebar = React.useCallback(() => {\n    return isMobile\n      ? setOpenMobile((open) => !open)\n      : setOpen((open) => !open);\n  }, [isMobile, setOpen, setOpenMobile])"
    },
    {
      "name": "handleKeyDown",
      "type": "function",
      "startLine": 78,
      "endLine": 86,
      "complexity": "low",
      "parameters": [
        {
          "name": "event"
        }
      ],
      "dependencies": [],
      "tags": [
        "function"
      ],
      "file": {
        "name": "sidebar.jsx",
        "path": "src/components/ui/sidebar.jsx"
      },
      "code": "    const handleKeyDown = (event) => {\n      if (\n        event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n        (event.metaKey || event.ctrlKey)\n      ) {\n        event.preventDefault()\n        toggleSidebar()\n      }\n    }"
    },
    {
      "name": "handleKeyDown",
      "type": "variable",
      "startLine": 78,
      "endLine": 86,
      "complexity": "low",
      "parameters": [
        {
          "name": "event"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "sidebar.jsx",
        "path": "src/components/ui/sidebar.jsx"
      },
      "code": "    const handleKeyDown = (event) => {\n      if (\n        event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n        (event.metaKey || event.ctrlKey)\n      ) {\n        event.preventDefault()\n        toggleSidebar()\n      }\n    }"
    },
    {
      "name": "state",
      "type": "variable",
      "startLine": 94,
      "endLine": 95,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "sidebar.jsx",
        "path": "src/components/ui/sidebar.jsx"
      },
      "code": "  const state = open ? \"expanded\" : \"collapsed\"\n"
    },
    {
      "name": "contextValue",
      "type": "variable",
      "startLine": 96,
      "endLine": 104,
      "complexity": "low",
      "parameters": [
        {
          "name": "("
        }
      ],
      "dependencies": [],
      "tags": [
        "variable",
        "react"
      ],
      "file": {
        "name": "sidebar.jsx",
        "path": "src/components/ui/sidebar.jsx"
      },
      "code": "  const contextValue = React.useMemo(() => ({\n    state,\n    open,\n    setOpen,\n    isMobile,\n    openMobile,\n    setOpenMobile,\n    toggleSidebar,\n  }), [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar])"
    },
    {
      "name": "Sidebar",
      "type": "variable",
      "startLine": 131,
      "endLine": 133,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable",
        "react"
      ],
      "file": {
        "name": "sidebar.jsx",
        "path": "src/components/ui/sidebar.jsx"
      },
      "code": "const Sidebar = React.forwardRef((\n  {\n    side = \"left\","
    },
    {
      "name": "SidebarTrigger",
      "type": "variable",
      "startLine": 219,
      "endLine": 219,
      "complexity": "low",
      "parameters": [
        {
          "name": "( className"
        },
        {
          "name": "onClick"
        },
        {
          "name": "ref"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable",
        "react"
      ],
      "file": {
        "name": "sidebar.jsx",
        "path": "src/components/ui/sidebar.jsx"
      },
      "code": "const SidebarTrigger = React.forwardRef(({ className, onClick, ...props }, ref) => {"
    },
    {
      "name": "SidebarRail",
      "type": "variable",
      "startLine": 241,
      "endLine": 241,
      "complexity": "low",
      "parameters": [
        {
          "name": "( className"
        },
        {
          "name": "ref"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable",
        "react"
      ],
      "file": {
        "name": "sidebar.jsx",
        "path": "src/components/ui/sidebar.jsx"
      },
      "code": "const SidebarRail = React.forwardRef(({ className, ...props }, ref) => {"
    },
    {
      "name": "SidebarInset",
      "type": "variable",
      "startLine": 266,
      "endLine": 266,
      "complexity": "low",
      "parameters": [
        {
          "name": "( className"
        },
        {
          "name": "ref"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable",
        "react"
      ],
      "file": {
        "name": "sidebar.jsx",
        "path": "src/components/ui/sidebar.jsx"
      },
      "code": "const SidebarInset = React.forwardRef(({ className, ...props }, ref) => {"
    },
    {
      "name": "SidebarInput",
      "type": "variable",
      "startLine": 280,
      "endLine": 280,
      "complexity": "low",
      "parameters": [
        {
          "name": "( className"
        },
        {
          "name": "ref"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable",
        "react"
      ],
      "file": {
        "name": "sidebar.jsx",
        "path": "src/components/ui/sidebar.jsx"
      },
      "code": "const SidebarInput = React.forwardRef(({ className, ...props }, ref) => {"
    },
    {
      "name": "SidebarHeader",
      "type": "variable",
      "startLine": 294,
      "endLine": 294,
      "complexity": "low",
      "parameters": [
        {
          "name": "( className"
        },
        {
          "name": "ref"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable",
        "react"
      ],
      "file": {
        "name": "sidebar.jsx",
        "path": "src/components/ui/sidebar.jsx"
      },
      "code": "const SidebarHeader = React.forwardRef(({ className, ...props }, ref) => {"
    },
    {
      "name": "SidebarFooter",
      "type": "variable",
      "startLine": 305,
      "endLine": 305,
      "complexity": "low",
      "parameters": [
        {
          "name": "( className"
        },
        {
          "name": "ref"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable",
        "react"
      ],
      "file": {
        "name": "sidebar.jsx",
        "path": "src/components/ui/sidebar.jsx"
      },
      "code": "const SidebarFooter = React.forwardRef(({ className, ...props }, ref) => {"
    },
    {
      "name": "SidebarSeparator",
      "type": "variable",
      "startLine": 316,
      "endLine": 316,
      "complexity": "low",
      "parameters": [
        {
          "name": "( className"
        },
        {
          "name": "ref"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable",
        "react"
      ],
      "file": {
        "name": "sidebar.jsx",
        "path": "src/components/ui/sidebar.jsx"
      },
      "code": "const SidebarSeparator = React.forwardRef(({ className, ...props }, ref) => {"
    },
    {
      "name": "SidebarContent",
      "type": "variable",
      "startLine": 327,
      "endLine": 327,
      "complexity": "low",
      "parameters": [
        {
          "name": "( className"
        },
        {
          "name": "ref"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable",
        "react"
      ],
      "file": {
        "name": "sidebar.jsx",
        "path": "src/components/ui/sidebar.jsx"
      },
      "code": "const SidebarContent = React.forwardRef(({ className, ...props }, ref) => {"
    },
    {
      "name": "SidebarGroup",
      "type": "variable",
      "startLine": 341,
      "endLine": 341,
      "complexity": "low",
      "parameters": [
        {
          "name": "( className"
        },
        {
          "name": "ref"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable",
        "react"
      ],
      "file": {
        "name": "sidebar.jsx",
        "path": "src/components/ui/sidebar.jsx"
      },
      "code": "const SidebarGroup = React.forwardRef(({ className, ...props }, ref) => {"
    },
    {
      "name": "SidebarGroupLabel",
      "type": "variable",
      "startLine": 352,
      "endLine": 352,
      "complexity": "low",
      "parameters": [
        {
          "name": "( className"
        },
        {
          "name": "asChild = false"
        },
        {
          "name": "ref"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable",
        "react"
      ],
      "file": {
        "name": "sidebar.jsx",
        "path": "src/components/ui/sidebar.jsx"
      },
      "code": "const SidebarGroupLabel = React.forwardRef(({ className, asChild = false, ...props }, ref) => {"
    },
    {
      "name": "Comp",
      "type": "component",
      "startLine": 353,
      "endLine": 358,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "sidebar.jsx",
        "path": "src/components/ui/sidebar.jsx"
      },
      "code": "  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    (<Comp\n      ref={ref}\n      data-sidebar=\"group-label\""
    },
    {
      "name": "SidebarGroupAction",
      "type": "variable",
      "startLine": 369,
      "endLine": 369,
      "complexity": "low",
      "parameters": [
        {
          "name": "( className"
        },
        {
          "name": "asChild = false"
        },
        {
          "name": "ref"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable",
        "react"
      ],
      "file": {
        "name": "sidebar.jsx",
        "path": "src/components/ui/sidebar.jsx"
      },
      "code": "const SidebarGroupAction = React.forwardRef(({ className, asChild = false, ...props }, ref) => {"
    },
    {
      "name": "Comp",
      "type": "component",
      "startLine": 370,
      "endLine": 375,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "sidebar.jsx",
        "path": "src/components/ui/sidebar.jsx"
      },
      "code": "  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    (<Comp\n      ref={ref}\n      data-sidebar=\"group-action\""
    },
    {
      "name": "SidebarGroupContent",
      "type": "variable",
      "startLine": 388,
      "endLine": 388,
      "complexity": "low",
      "parameters": [
        {
          "name": "( className"
        },
        {
          "name": "ref"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable",
        "react"
      ],
      "file": {
        "name": "sidebar.jsx",
        "path": "src/components/ui/sidebar.jsx"
      },
      "code": "const SidebarGroupContent = React.forwardRef(({ className, ...props }, ref) => ("
    },
    {
      "name": "SidebarMenu",
      "type": "variable",
      "startLine": 397,
      "endLine": 397,
      "complexity": "low",
      "parameters": [
        {
          "name": "( className"
        },
        {
          "name": "ref"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable",
        "react"
      ],
      "file": {
        "name": "sidebar.jsx",
        "path": "src/components/ui/sidebar.jsx"
      },
      "code": "const SidebarMenu = React.forwardRef(({ className, ...props }, ref) => ("
    },
    {
      "name": "SidebarMenuItem",
      "type": "variable",
      "startLine": 406,
      "endLine": 406,
      "complexity": "low",
      "parameters": [
        {
          "name": "( className"
        },
        {
          "name": "ref"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable",
        "react"
      ],
      "file": {
        "name": "sidebar.jsx",
        "path": "src/components/ui/sidebar.jsx"
      },
      "code": "const SidebarMenuItem = React.forwardRef(({ className, ...props }, ref) => ("
    },
    {
      "name": "sidebarMenuButtonVariants",
      "type": "variable",
      "startLine": 415,
      "endLine": 417,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "sidebar.jsx",
        "path": "src/components/ui/sidebar.jsx"
      },
      "code": "const sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {"
    },
    {
      "name": "SidebarMenuButton",
      "type": "variable",
      "startLine": 437,
      "endLine": 440,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable",
        "react"
      ],
      "file": {
        "name": "sidebar.jsx",
        "path": "src/components/ui/sidebar.jsx"
      },
      "code": "const SidebarMenuButton = React.forwardRef((\n  {\n    asChild = false,\n    isActive = false,"
    },
    {
      "name": "Comp",
      "type": "variable",
      "startLine": 449,
      "endLine": 449,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "sidebar.jsx",
        "path": "src/components/ui/sidebar.jsx"
      },
      "code": "  const Comp = asChild ? Slot : \"button\""
    },
    {
      "name": "button",
      "type": "function",
      "startLine": 452,
      "endLine": 454,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "function"
      ],
      "file": {
        "name": "sidebar.jsx",
        "path": "src/components/ui/sidebar.jsx"
      },
      "code": "  const button = (\n    <Comp\n      ref={ref}"
    },
    {
      "name": "button",
      "type": "variable",
      "startLine": 452,
      "endLine": 457,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "sidebar.jsx",
        "path": "src/components/ui/sidebar.jsx"
      },
      "code": "  const button = (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-button\"\n      data-size={size}\n      data-active={isActive}"
    },
    {
      "name": "SidebarMenuAction",
      "type": "variable",
      "startLine": 485,
      "endLine": 485,
      "complexity": "low",
      "parameters": [
        {
          "name": "( className"
        },
        {
          "name": "asChild = false"
        },
        {
          "name": "showOnHover = false"
        },
        {
          "name": "ref"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable",
        "react"
      ],
      "file": {
        "name": "sidebar.jsx",
        "path": "src/components/ui/sidebar.jsx"
      },
      "code": "const SidebarMenuAction = React.forwardRef(({ className, asChild = false, showOnHover = false, ...props }, ref) => {"
    },
    {
      "name": "Comp",
      "type": "component",
      "startLine": 486,
      "endLine": 491,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "sidebar.jsx",
        "path": "src/components/ui/sidebar.jsx"
      },
      "code": "  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    (<Comp\n      ref={ref}\n      data-sidebar=\"menu-action\""
    },
    {
      "name": "SidebarMenuBadge",
      "type": "variable",
      "startLine": 509,
      "endLine": 509,
      "complexity": "low",
      "parameters": [
        {
          "name": "( className"
        },
        {
          "name": "ref"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable",
        "react"
      ],
      "file": {
        "name": "sidebar.jsx",
        "path": "src/components/ui/sidebar.jsx"
      },
      "code": "const SidebarMenuBadge = React.forwardRef(({ className, ...props }, ref) => ("
    },
    {
      "name": "SidebarMenuSkeleton",
      "type": "variable",
      "startLine": 526,
      "endLine": 526,
      "complexity": "low",
      "parameters": [
        {
          "name": "( className"
        },
        {
          "name": "showIcon = false"
        },
        {
          "name": "ref"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable",
        "react"
      ],
      "file": {
        "name": "sidebar.jsx",
        "path": "src/components/ui/sidebar.jsx"
      },
      "code": "const SidebarMenuSkeleton = React.forwardRef(({ className, showIcon = false, ...props }, ref) => {"
    },
    {
      "name": "width",
      "type": "variable",
      "startLine": 528,
      "endLine": 530,
      "complexity": "low",
      "parameters": [
        {
          "name": "("
        }
      ],
      "dependencies": [],
      "tags": [
        "variable",
        "react"
      ],
      "file": {
        "name": "sidebar.jsx",
        "path": "src/components/ui/sidebar.jsx"
      },
      "code": "  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`;\n  }, [])"
    },
    {
      "name": "SidebarMenuSub",
      "type": "variable",
      "startLine": 554,
      "endLine": 554,
      "complexity": "low",
      "parameters": [
        {
          "name": "( className"
        },
        {
          "name": "ref"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable",
        "react"
      ],
      "file": {
        "name": "sidebar.jsx",
        "path": "src/components/ui/sidebar.jsx"
      },
      "code": "const SidebarMenuSub = React.forwardRef(({ className, ...props }, ref) => ("
    },
    {
      "name": "SidebarMenuSubItem",
      "type": "variable",
      "startLine": 567,
      "endLine": 567,
      "complexity": "low",
      "parameters": [
        {
          "name": "ref"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable",
        "react"
      ],
      "file": {
        "name": "sidebar.jsx",
        "path": "src/components/ui/sidebar.jsx"
      },
      "code": "const SidebarMenuSubItem = React.forwardRef(({ ...props }, ref) => <li ref={ref} {...props} />)"
    },
    {
      "name": "SidebarMenuSubButton",
      "type": "variable",
      "startLine": 570,
      "endLine": 571,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable",
        "react"
      ],
      "file": {
        "name": "sidebar.jsx",
        "path": "src/components/ui/sidebar.jsx"
      },
      "code": "const SidebarMenuSubButton = React.forwardRef(\n  ({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {"
    },
    {
      "name": "Comp",
      "type": "component",
      "startLine": 572,
      "endLine": 579,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "sidebar.jsx",
        "path": "src/components/ui/sidebar.jsx"
      },
      "code": "    const Comp = asChild ? Slot : \"a\"\n\n    return (\n      (<Comp\n        ref={ref}\n        data-sidebar=\"menu-sub-button\"\n        data-size={size}\n        data-active={isActive}"
    },
    {
      "name": "CarouselContext",
      "type": "variable",
      "startLine": 8,
      "endLine": 9,
      "complexity": "low",
      "parameters": [
        {
          "name": "null"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable",
        "react"
      ],
      "file": {
        "name": "carousel.jsx",
        "path": "src/components/ui/carousel.jsx"
      },
      "code": "const CarouselContext = React.createContext(null)\n"
    },
    {
      "name": "useCarousel",
      "type": "hook",
      "startLine": 10,
      "endLine": 18,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "function",
        "react"
      ],
      "file": {
        "name": "carousel.jsx",
        "path": "src/components/ui/carousel.jsx"
      },
      "code": "function useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}"
    },
    {
      "name": "useCarousel",
      "type": "hook",
      "startLine": 10,
      "endLine": 18,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "hook",
        "react"
      ],
      "file": {
        "name": "carousel.jsx",
        "path": "src/components/ui/carousel.jsx"
      },
      "code": "function useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}"
    },
    {
      "name": "context",
      "type": "variable",
      "startLine": 11,
      "endLine": 19,
      "complexity": "low",
      "parameters": [
        {
          "name": "CarouselContext"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable",
        "react"
      ],
      "file": {
        "name": "carousel.jsx",
        "path": "src/components/ui/carousel.jsx"
      },
      "code": "  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n"
    },
    {
      "name": "Carousel",
      "type": "variable",
      "startLine": 20,
      "endLine": 25,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable",
        "react"
      ],
      "file": {
        "name": "carousel.jsx",
        "path": "src/components/ui/carousel.jsx"
      },
      "code": "const Carousel = React.forwardRef((\n  {\n    orientation = \"horizontal\",\n    opts,\n    setApi,\n    plugins,"
    },
    {
      "name": "onSelect",
      "type": "variable",
      "startLine": 39,
      "endLine": 46,
      "complexity": "low",
      "parameters": [
        {
          "name": "(api"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable",
        "react"
      ],
      "file": {
        "name": "carousel.jsx",
        "path": "src/components/ui/carousel.jsx"
      },
      "code": "  const onSelect = React.useCallback((api) => {\n    if (!api) {\n      return\n    }\n\n    setCanScrollPrev(api.canScrollPrev())\n    setCanScrollNext(api.canScrollNext())\n  }, [])"
    },
    {
      "name": "scrollPrev",
      "type": "variable",
      "startLine": 48,
      "endLine": 50,
      "complexity": "low",
      "parameters": [
        {
          "name": "("
        }
      ],
      "dependencies": [],
      "tags": [
        "variable",
        "react"
      ],
      "file": {
        "name": "carousel.jsx",
        "path": "src/components/ui/carousel.jsx"
      },
      "code": "  const scrollPrev = React.useCallback(() => {\n    api?.scrollPrev()\n  }, [api])"
    },
    {
      "name": "scrollNext",
      "type": "variable",
      "startLine": 52,
      "endLine": 54,
      "complexity": "low",
      "parameters": [
        {
          "name": "("
        }
      ],
      "dependencies": [],
      "tags": [
        "variable",
        "react"
      ],
      "file": {
        "name": "carousel.jsx",
        "path": "src/components/ui/carousel.jsx"
      },
      "code": "  const scrollNext = React.useCallback(() => {\n    api?.scrollNext()\n  }, [api])"
    },
    {
      "name": "handleKeyDown",
      "type": "variable",
      "startLine": 56,
      "endLine": 64,
      "complexity": "low",
      "parameters": [
        {
          "name": "(event"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable",
        "react"
      ],
      "file": {
        "name": "carousel.jsx",
        "path": "src/components/ui/carousel.jsx"
      },
      "code": "  const handleKeyDown = React.useCallback((event) => {\n    if (event.key === \"ArrowLeft\") {\n      event.preventDefault()\n      scrollPrev()\n    } else if (event.key === \"ArrowRight\") {\n      event.preventDefault()\n      scrollNext()\n    }\n  }, [scrollPrev, scrollNext])"
    },
    {
      "name": "CarouselContent",
      "type": "variable",
      "startLine": 115,
      "endLine": 115,
      "complexity": "low",
      "parameters": [
        {
          "name": "( className"
        },
        {
          "name": "ref"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable",
        "react"
      ],
      "file": {
        "name": "carousel.jsx",
        "path": "src/components/ui/carousel.jsx"
      },
      "code": "const CarouselContent = React.forwardRef(({ className, ...props }, ref) => {"
    },
    {
      "name": "CarouselItem",
      "type": "variable",
      "startLine": 133,
      "endLine": 133,
      "complexity": "low",
      "parameters": [
        {
          "name": "( className"
        },
        {
          "name": "ref"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable",
        "react"
      ],
      "file": {
        "name": "carousel.jsx",
        "path": "src/components/ui/carousel.jsx"
      },
      "code": "const CarouselItem = React.forwardRef(({ className, ...props }, ref) => {"
    },
    {
      "name": "CarouselPrevious",
      "type": "variable",
      "startLine": 151,
      "endLine": 151,
      "complexity": "low",
      "parameters": [
        {
          "name": "( className"
        },
        {
          "name": "variant = \"outline\""
        },
        {
          "name": "size = \"icon\""
        },
        {
          "name": "ref"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable",
        "react"
      ],
      "file": {
        "name": "carousel.jsx",
        "path": "src/components/ui/carousel.jsx"
      },
      "code": "const CarouselPrevious = React.forwardRef(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {"
    },
    {
      "name": "CarouselNext",
      "type": "variable",
      "startLine": 172,
      "endLine": 172,
      "complexity": "low",
      "parameters": [
        {
          "name": "( className"
        },
        {
          "name": "variant = \"outline\""
        },
        {
          "name": "size = \"icon\""
        },
        {
          "name": "ref"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable",
        "react"
      ],
      "file": {
        "name": "carousel.jsx",
        "path": "src/components/ui/carousel.jsx"
      },
      "code": "const CarouselNext = React.forwardRef(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {"
    },
    {
      "name": "Avatar",
      "type": "variable",
      "startLine": 8,
      "endLine": 8,
      "complexity": "low",
      "parameters": [
        {
          "name": "( className"
        },
        {
          "name": "ref"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable",
        "react"
      ],
      "file": {
        "name": "avatar.jsx",
        "path": "src/components/ui/avatar.jsx"
      },
      "code": "const Avatar = React.forwardRef(({ className, ...props }, ref) => ("
    },
    {
      "name": "AvatarImage",
      "type": "variable",
      "startLine": 16,
      "endLine": 16,
      "complexity": "low",
      "parameters": [
        {
          "name": "( className"
        },
        {
          "name": "ref"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable",
        "react"
      ],
      "file": {
        "name": "avatar.jsx",
        "path": "src/components/ui/avatar.jsx"
      },
      "code": "const AvatarImage = React.forwardRef(({ className, ...props }, ref) => ("
    },
    {
      "name": "AvatarFallback",
      "type": "variable",
      "startLine": 24,
      "endLine": 24,
      "complexity": "low",
      "parameters": [
        {
          "name": "( className"
        },
        {
          "name": "ref"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable",
        "react"
      ],
      "file": {
        "name": "avatar.jsx",
        "path": "src/components/ui/avatar.jsx"
      },
      "code": "const AvatarFallback = React.forwardRef(({ className, ...props }, ref) => ("
    },
    {
      "name": "Sheet",
      "type": "variable",
      "startLine": 9,
      "endLine": 10,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "sheet.jsx",
        "path": "src/components/ui/sheet.jsx"
      },
      "code": "const Sheet = SheetPrimitive.Root\n"
    },
    {
      "name": "SheetTrigger",
      "type": "variable",
      "startLine": 11,
      "endLine": 12,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "sheet.jsx",
        "path": "src/components/ui/sheet.jsx"
      },
      "code": "const SheetTrigger = SheetPrimitive.Trigger\n"
    },
    {
      "name": "SheetClose",
      "type": "variable",
      "startLine": 13,
      "endLine": 14,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "sheet.jsx",
        "path": "src/components/ui/sheet.jsx"
      },
      "code": "const SheetClose = SheetPrimitive.Close\n"
    },
    {
      "name": "SheetPortal",
      "type": "variable",
      "startLine": 15,
      "endLine": 16,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "sheet.jsx",
        "path": "src/components/ui/sheet.jsx"
      },
      "code": "const SheetPortal = SheetPrimitive.Portal\n"
    },
    {
      "name": "SheetOverlay",
      "type": "variable",
      "startLine": 17,
      "endLine": 17,
      "complexity": "low",
      "parameters": [
        {
          "name": "( className"
        },
        {
          "name": "ref"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable",
        "react"
      ],
      "file": {
        "name": "sheet.jsx",
        "path": "src/components/ui/sheet.jsx"
      },
      "code": "const SheetOverlay = React.forwardRef(({ className, ...props }, ref) => ("
    },
    {
      "name": "sheetVariants",
      "type": "variable",
      "startLine": 28,
      "endLine": 30,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "sheet.jsx",
        "path": "src/components/ui/sheet.jsx"
      },
      "code": "const sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=closed]:duration-300 data-[state=open]:duration-500 data-[state=open]:animate-in data-[state=closed]:animate-out\",\n  {"
    },
    {
      "name": "SheetContent",
      "type": "variable",
      "startLine": 47,
      "endLine": 47,
      "complexity": "low",
      "parameters": [
        {
          "name": "( side = \"right\""
        },
        {
          "name": "className"
        },
        {
          "name": "children"
        },
        {
          "name": "ref"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable",
        "react"
      ],
      "file": {
        "name": "sheet.jsx",
        "path": "src/components/ui/sheet.jsx"
      },
      "code": "const SheetContent = React.forwardRef(({ side = \"right\", className, children, ...props }, ref) => ("
    },
    {
      "name": "SheetHeader",
      "type": "function",
      "startLine": 62,
      "endLine": 65,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "function"
      ],
      "file": {
        "name": "sheet.jsx",
        "path": "src/components/ui/sheet.jsx"
      },
      "code": "const SheetHeader = ({\n  className,\n  ...props\n}) => ("
    },
    {
      "name": "SheetHeader",
      "type": "variable",
      "startLine": 62,
      "endLine": 65,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "sheet.jsx",
        "path": "src/components/ui/sheet.jsx"
      },
      "code": "const SheetHeader = ({\n  className,\n  ...props\n}) => ("
    },
    {
      "name": "SheetFooter",
      "type": "function",
      "startLine": 72,
      "endLine": 75,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "function"
      ],
      "file": {
        "name": "sheet.jsx",
        "path": "src/components/ui/sheet.jsx"
      },
      "code": "const SheetFooter = ({\n  className,\n  ...props\n}) => ("
    },
    {
      "name": "SheetFooter",
      "type": "variable",
      "startLine": 72,
      "endLine": 75,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "sheet.jsx",
        "path": "src/components/ui/sheet.jsx"
      },
      "code": "const SheetFooter = ({\n  className,\n  ...props\n}) => ("
    },
    {
      "name": "SheetTitle",
      "type": "variable",
      "startLine": 82,
      "endLine": 82,
      "complexity": "low",
      "parameters": [
        {
          "name": "( className"
        },
        {
          "name": "ref"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable",
        "react"
      ],
      "file": {
        "name": "sheet.jsx",
        "path": "src/components/ui/sheet.jsx"
      },
      "code": "const SheetTitle = React.forwardRef(({ className, ...props }, ref) => ("
    },
    {
      "name": "SheetDescription",
      "type": "variable",
      "startLine": 90,
      "endLine": 90,
      "complexity": "low",
      "parameters": [
        {
          "name": "( className"
        },
        {
          "name": "ref"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable",
        "react"
      ],
      "file": {
        "name": "sheet.jsx",
        "path": "src/components/ui/sheet.jsx"
      },
      "code": "const SheetDescription = React.forwardRef(({ className, ...props }, ref) => ("
    },
    {
      "name": "Toaster",
      "type": "function",
      "startLine": 5,
      "endLine": 7,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "function"
      ],
      "file": {
        "name": "sonner.jsx",
        "path": "src/components/ui/sonner.jsx"
      },
      "code": "const Toaster = ({\n  ...props\n}) => {"
    },
    {
      "name": "Toaster",
      "type": "variable",
      "startLine": 5,
      "endLine": 7,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "sonner.jsx",
        "path": "src/components/ui/sonner.jsx"
      },
      "code": "const Toaster = ({\n  ...props\n}) => {"
    },
    {
      "name": "ToggleGroupContext",
      "type": "variable",
      "startLine": 8,
      "endLine": 11,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable",
        "react"
      ],
      "file": {
        "name": "toggle-group.jsx",
        "path": "src/components/ui/toggle-group.jsx"
      },
      "code": "const ToggleGroupContext = React.createContext({\n  size: \"default\",\n  variant: \"default\",\n})"
    },
    {
      "name": "ToggleGroup",
      "type": "variable",
      "startLine": 13,
      "endLine": 13,
      "complexity": "low",
      "parameters": [
        {
          "name": "( className"
        },
        {
          "name": "variant"
        },
        {
          "name": "size"
        },
        {
          "name": "children"
        },
        {
          "name": "ref"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable",
        "react"
      ],
      "file": {
        "name": "toggle-group.jsx",
        "path": "src/components/ui/toggle-group.jsx"
      },
      "code": "const ToggleGroup = React.forwardRef(({ className, variant, size, children, ...props }, ref) => ("
    },
    {
      "name": "ToggleGroupItem",
      "type": "variable",
      "startLine": 26,
      "endLine": 26,
      "complexity": "low",
      "parameters": [
        {
          "name": "( className"
        },
        {
          "name": "children"
        },
        {
          "name": "variant"
        },
        {
          "name": "size"
        },
        {
          "name": "ref"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable",
        "react"
      ],
      "file": {
        "name": "toggle-group.jsx",
        "path": "src/components/ui/toggle-group.jsx"
      },
      "code": "const ToggleGroupItem = React.forwardRef(({ className, children, variant, size, ...props }, ref) => {"
    },
    {
      "name": "context",
      "type": "variable",
      "startLine": 27,
      "endLine": 31,
      "complexity": "low",
      "parameters": [
        {
          "name": "ToggleGroupContext"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable",
        "react"
      ],
      "file": {
        "name": "toggle-group.jsx",
        "path": "src/components/ui/toggle-group.jsx"
      },
      "code": "  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    (<ToggleGroupPrimitive.Item\n      ref={ref}"
    },
    {
      "name": "Textarea",
      "type": "variable",
      "startLine": 5,
      "endLine": 5,
      "complexity": "low",
      "parameters": [
        {
          "name": "( className"
        },
        {
          "name": "ref"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable",
        "react"
      ],
      "file": {
        "name": "textarea.jsx",
        "path": "src/components/ui/textarea.jsx"
      },
      "code": "const Textarea = React.forwardRef(({ className, ...props }, ref) => {"
    },
    {
      "name": "Toaster",
      "type": "component",
      "startLine": 11,
      "endLine": 33,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "function",
        "exported"
      ],
      "file": {
        "name": "toaster.jsx",
        "path": "src/components/ui/toaster.jsx"
      },
      "code": "export function Toaster() {\n  const { toasts } = useToast();\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        );\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  );\n} "
    },
    {
      "name": "Toaster",
      "type": "component",
      "startLine": 11,
      "endLine": 33,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "component",
        "exported"
      ],
      "file": {
        "name": "toaster.jsx",
        "path": "src/components/ui/toaster.jsx"
      },
      "code": "export function Toaster() {\n  const { toasts } = useToast();\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        );\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  );\n} "
    },
    {
      "name": "ContextMenu",
      "type": "variable",
      "startLine": 7,
      "endLine": 8,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "context-menu.jsx",
        "path": "src/components/ui/context-menu.jsx"
      },
      "code": "const ContextMenu = ContextMenuPrimitive.Root\n"
    },
    {
      "name": "ContextMenuTrigger",
      "type": "variable",
      "startLine": 9,
      "endLine": 10,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "context-menu.jsx",
        "path": "src/components/ui/context-menu.jsx"
      },
      "code": "const ContextMenuTrigger = ContextMenuPrimitive.Trigger\n"
    },
    {
      "name": "ContextMenuGroup",
      "type": "variable",
      "startLine": 11,
      "endLine": 12,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "context-menu.jsx",
        "path": "src/components/ui/context-menu.jsx"
      },
      "code": "const ContextMenuGroup = ContextMenuPrimitive.Group\n"
    },
    {
      "name": "ContextMenuPortal",
      "type": "variable",
      "startLine": 13,
      "endLine": 14,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "context-menu.jsx",
        "path": "src/components/ui/context-menu.jsx"
      },
      "code": "const ContextMenuPortal = ContextMenuPrimitive.Portal\n"
    },
    {
      "name": "ContextMenuSub",
      "type": "variable",
      "startLine": 15,
      "endLine": 16,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "context-menu.jsx",
        "path": "src/components/ui/context-menu.jsx"
      },
      "code": "const ContextMenuSub = ContextMenuPrimitive.Sub\n"
    },
    {
      "name": "ContextMenuRadioGroup",
      "type": "variable",
      "startLine": 17,
      "endLine": 18,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "context-menu.jsx",
        "path": "src/components/ui/context-menu.jsx"
      },
      "code": "const ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n"
    },
    {
      "name": "ContextMenuSubTrigger",
      "type": "variable",
      "startLine": 19,
      "endLine": 19,
      "complexity": "low",
      "parameters": [
        {
          "name": "( className"
        },
        {
          "name": "inset"
        },
        {
          "name": "children"
        },
        {
          "name": "ref"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable",
        "react"
      ],
      "file": {
        "name": "context-menu.jsx",
        "path": "src/components/ui/context-menu.jsx"
      },
      "code": "const ContextMenuSubTrigger = React.forwardRef(({ className, inset, children, ...props }, ref) => ("
    },
    {
      "name": "ContextMenuSubContent",
      "type": "variable",
      "startLine": 34,
      "endLine": 34,
      "complexity": "low",
      "parameters": [
        {
          "name": "( className"
        },
        {
          "name": "ref"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable",
        "react"
      ],
      "file": {
        "name": "context-menu.jsx",
        "path": "src/components/ui/context-menu.jsx"
      },
      "code": "const ContextMenuSubContent = React.forwardRef(({ className, ...props }, ref) => ("
    },
    {
      "name": "ContextMenuContent",
      "type": "variable",
      "startLine": 45,
      "endLine": 45,
      "complexity": "low",
      "parameters": [
        {
          "name": "( className"
        },
        {
          "name": "ref"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable",
        "react"
      ],
      "file": {
        "name": "context-menu.jsx",
        "path": "src/components/ui/context-menu.jsx"
      },
      "code": "const ContextMenuContent = React.forwardRef(({ className, ...props }, ref) => ("
    },
    {
      "name": "ContextMenuItem",
      "type": "variable",
      "startLine": 58,
      "endLine": 58,
      "complexity": "low",
      "parameters": [
        {
          "name": "( className"
        },
        {
          "name": "inset"
        },
        {
          "name": "ref"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable",
        "react"
      ],
      "file": {
        "name": "context-menu.jsx",
        "path": "src/components/ui/context-menu.jsx"
      },
      "code": "const ContextMenuItem = React.forwardRef(({ className, inset, ...props }, ref) => ("
    },
    {
      "name": "ContextMenuCheckboxItem",
      "type": "variable",
      "startLine": 70,
      "endLine": 70,
      "complexity": "low",
      "parameters": [
        {
          "name": "( className"
        },
        {
          "name": "children"
        },
        {
          "name": "checked"
        },
        {
          "name": "ref"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable",
        "react"
      ],
      "file": {
        "name": "context-menu.jsx",
        "path": "src/components/ui/context-menu.jsx"
      },
      "code": "const ContextMenuCheckboxItem = React.forwardRef(({ className, children, checked, ...props }, ref) => ("
    },
    {
      "name": "ContextMenuRadioItem",
      "type": "variable",
      "startLine": 90,
      "endLine": 90,
      "complexity": "low",
      "parameters": [
        {
          "name": "( className"
        },
        {
          "name": "children"
        },
        {
          "name": "ref"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable",
        "react"
      ],
      "file": {
        "name": "context-menu.jsx",
        "path": "src/components/ui/context-menu.jsx"
      },
      "code": "const ContextMenuRadioItem = React.forwardRef(({ className, children, ...props }, ref) => ("
    },
    {
      "name": "ContextMenuLabel",
      "type": "variable",
      "startLine": 108,
      "endLine": 108,
      "complexity": "low",
      "parameters": [
        {
          "name": "( className"
        },
        {
          "name": "inset"
        },
        {
          "name": "ref"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable",
        "react"
      ],
      "file": {
        "name": "context-menu.jsx",
        "path": "src/components/ui/context-menu.jsx"
      },
      "code": "const ContextMenuLabel = React.forwardRef(({ className, inset, ...props }, ref) => ("
    },
    {
      "name": "ContextMenuSeparator",
      "type": "variable",
      "startLine": 120,
      "endLine": 120,
      "complexity": "low",
      "parameters": [
        {
          "name": "( className"
        },
        {
          "name": "ref"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable",
        "react"
      ],
      "file": {
        "name": "context-menu.jsx",
        "path": "src/components/ui/context-menu.jsx"
      },
      "code": "const ContextMenuSeparator = React.forwardRef(({ className, ...props }, ref) => ("
    },
    {
      "name": "ContextMenuShortcut",
      "type": "function",
      "startLine": 128,
      "endLine": 131,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "function"
      ],
      "file": {
        "name": "context-menu.jsx",
        "path": "src/components/ui/context-menu.jsx"
      },
      "code": "const ContextMenuShortcut = ({\n  className,\n  ...props\n}) => {"
    },
    {
      "name": "ContextMenuShortcut",
      "type": "variable",
      "startLine": 128,
      "endLine": 131,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "context-menu.jsx",
        "path": "src/components/ui/context-menu.jsx"
      },
      "code": "const ContextMenuShortcut = ({\n  className,\n  ...props\n}) => {"
    },
    {
      "name": "Drawer",
      "type": "function",
      "startLine": 8,
      "endLine": 11,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "function"
      ],
      "file": {
        "name": "drawer.jsx",
        "path": "src/components/ui/drawer.jsx"
      },
      "code": "const Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}) => ("
    },
    {
      "name": "Drawer",
      "type": "variable",
      "startLine": 8,
      "endLine": 11,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "drawer.jsx",
        "path": "src/components/ui/drawer.jsx"
      },
      "code": "const Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}) => ("
    },
    {
      "name": "DrawerTrigger",
      "type": "variable",
      "startLine": 16,
      "endLine": 17,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "drawer.jsx",
        "path": "src/components/ui/drawer.jsx"
      },
      "code": "const DrawerTrigger = DrawerPrimitive.Trigger\n"
    },
    {
      "name": "DrawerPortal",
      "type": "variable",
      "startLine": 18,
      "endLine": 19,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "drawer.jsx",
        "path": "src/components/ui/drawer.jsx"
      },
      "code": "const DrawerPortal = DrawerPrimitive.Portal\n"
    },
    {
      "name": "DrawerClose",
      "type": "variable",
      "startLine": 20,
      "endLine": 21,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "drawer.jsx",
        "path": "src/components/ui/drawer.jsx"
      },
      "code": "const DrawerClose = DrawerPrimitive.Close\n"
    },
    {
      "name": "DrawerOverlay",
      "type": "variable",
      "startLine": 22,
      "endLine": 22,
      "complexity": "low",
      "parameters": [
        {
          "name": "( className"
        },
        {
          "name": "ref"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable",
        "react"
      ],
      "file": {
        "name": "drawer.jsx",
        "path": "src/components/ui/drawer.jsx"
      },
      "code": "const DrawerOverlay = React.forwardRef(({ className, ...props }, ref) => ("
    },
    {
      "name": "DrawerContent",
      "type": "variable",
      "startLine": 30,
      "endLine": 30,
      "complexity": "low",
      "parameters": [
        {
          "name": "( className"
        },
        {
          "name": "children"
        },
        {
          "name": "ref"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable",
        "react"
      ],
      "file": {
        "name": "drawer.jsx",
        "path": "src/components/ui/drawer.jsx"
      },
      "code": "const DrawerContent = React.forwardRef(({ className, children, ...props }, ref) => ("
    },
    {
      "name": "DrawerHeader",
      "type": "function",
      "startLine": 47,
      "endLine": 50,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "function"
      ],
      "file": {
        "name": "drawer.jsx",
        "path": "src/components/ui/drawer.jsx"
      },
      "code": "const DrawerHeader = ({\n  className,\n  ...props\n}) => ("
    },
    {
      "name": "DrawerHeader",
      "type": "variable",
      "startLine": 47,
      "endLine": 50,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "drawer.jsx",
        "path": "src/components/ui/drawer.jsx"
      },
      "code": "const DrawerHeader = ({\n  className,\n  ...props\n}) => ("
    },
    {
      "name": "DrawerFooter",
      "type": "function",
      "startLine": 57,
      "endLine": 60,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "function"
      ],
      "file": {
        "name": "drawer.jsx",
        "path": "src/components/ui/drawer.jsx"
      },
      "code": "const DrawerFooter = ({\n  className,\n  ...props\n}) => ("
    },
    {
      "name": "DrawerFooter",
      "type": "variable",
      "startLine": 57,
      "endLine": 60,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "drawer.jsx",
        "path": "src/components/ui/drawer.jsx"
      },
      "code": "const DrawerFooter = ({\n  className,\n  ...props\n}) => ("
    },
    {
      "name": "DrawerTitle",
      "type": "variable",
      "startLine": 65,
      "endLine": 65,
      "complexity": "low",
      "parameters": [
        {
          "name": "( className"
        },
        {
          "name": "ref"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable",
        "react"
      ],
      "file": {
        "name": "drawer.jsx",
        "path": "src/components/ui/drawer.jsx"
      },
      "code": "const DrawerTitle = React.forwardRef(({ className, ...props }, ref) => ("
    },
    {
      "name": "DrawerDescription",
      "type": "variable",
      "startLine": 73,
      "endLine": 73,
      "complexity": "low",
      "parameters": [
        {
          "name": "( className"
        },
        {
          "name": "ref"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable",
        "react"
      ],
      "file": {
        "name": "drawer.jsx",
        "path": "src/components/ui/drawer.jsx"
      },
      "code": "const DrawerDescription = React.forwardRef(({ className, ...props }, ref) => ("
    },
    {
      "name": "AlertDialog",
      "type": "variable",
      "startLine": 7,
      "endLine": 8,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "alert-dialog.jsx",
        "path": "src/components/ui/alert-dialog.jsx"
      },
      "code": "const AlertDialog = AlertDialogPrimitive.Root\n"
    },
    {
      "name": "AlertDialogTrigger",
      "type": "variable",
      "startLine": 9,
      "endLine": 10,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "alert-dialog.jsx",
        "path": "src/components/ui/alert-dialog.jsx"
      },
      "code": "const AlertDialogTrigger = AlertDialogPrimitive.Trigger\n"
    },
    {
      "name": "AlertDialogPortal",
      "type": "variable",
      "startLine": 11,
      "endLine": 12,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "alert-dialog.jsx",
        "path": "src/components/ui/alert-dialog.jsx"
      },
      "code": "const AlertDialogPortal = AlertDialogPrimitive.Portal\n"
    },
    {
      "name": "AlertDialogOverlay",
      "type": "variable",
      "startLine": 13,
      "endLine": 13,
      "complexity": "low",
      "parameters": [
        {
          "name": "( className"
        },
        {
          "name": "ref"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable",
        "react"
      ],
      "file": {
        "name": "alert-dialog.jsx",
        "path": "src/components/ui/alert-dialog.jsx"
      },
      "code": "const AlertDialogOverlay = React.forwardRef(({ className, ...props }, ref) => ("
    },
    {
      "name": "AlertDialogContent",
      "type": "variable",
      "startLine": 24,
      "endLine": 24,
      "complexity": "low",
      "parameters": [
        {
          "name": "( className"
        },
        {
          "name": "ref"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable",
        "react"
      ],
      "file": {
        "name": "alert-dialog.jsx",
        "path": "src/components/ui/alert-dialog.jsx"
      },
      "code": "const AlertDialogContent = React.forwardRef(({ className, ...props }, ref) => ("
    },
    {
      "name": "AlertDialogHeader",
      "type": "function",
      "startLine": 38,
      "endLine": 41,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "function"
      ],
      "file": {
        "name": "alert-dialog.jsx",
        "path": "src/components/ui/alert-dialog.jsx"
      },
      "code": "const AlertDialogHeader = ({\n  className,\n  ...props\n}) => ("
    },
    {
      "name": "AlertDialogHeader",
      "type": "variable",
      "startLine": 38,
      "endLine": 41,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "alert-dialog.jsx",
        "path": "src/components/ui/alert-dialog.jsx"
      },
      "code": "const AlertDialogHeader = ({\n  className,\n  ...props\n}) => ("
    },
    {
      "name": "AlertDialogFooter",
      "type": "function",
      "startLine": 48,
      "endLine": 51,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "function"
      ],
      "file": {
        "name": "alert-dialog.jsx",
        "path": "src/components/ui/alert-dialog.jsx"
      },
      "code": "const AlertDialogFooter = ({\n  className,\n  ...props\n}) => ("
    },
    {
      "name": "AlertDialogFooter",
      "type": "variable",
      "startLine": 48,
      "endLine": 51,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "alert-dialog.jsx",
        "path": "src/components/ui/alert-dialog.jsx"
      },
      "code": "const AlertDialogFooter = ({\n  className,\n  ...props\n}) => ("
    },
    {
      "name": "AlertDialogTitle",
      "type": "variable",
      "startLine": 58,
      "endLine": 58,
      "complexity": "low",
      "parameters": [
        {
          "name": "( className"
        },
        {
          "name": "ref"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable",
        "react"
      ],
      "file": {
        "name": "alert-dialog.jsx",
        "path": "src/components/ui/alert-dialog.jsx"
      },
      "code": "const AlertDialogTitle = React.forwardRef(({ className, ...props }, ref) => ("
    },
    {
      "name": "AlertDialogDescription",
      "type": "variable",
      "startLine": 63,
      "endLine": 63,
      "complexity": "low",
      "parameters": [
        {
          "name": "( className"
        },
        {
          "name": "ref"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable",
        "react"
      ],
      "file": {
        "name": "alert-dialog.jsx",
        "path": "src/components/ui/alert-dialog.jsx"
      },
      "code": "const AlertDialogDescription = React.forwardRef(({ className, ...props }, ref) => ("
    },
    {
      "name": "AlertDialogAction",
      "type": "variable",
      "startLine": 72,
      "endLine": 72,
      "complexity": "low",
      "parameters": [
        {
          "name": "( className"
        },
        {
          "name": "ref"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable",
        "react"
      ],
      "file": {
        "name": "alert-dialog.jsx",
        "path": "src/components/ui/alert-dialog.jsx"
      },
      "code": "const AlertDialogAction = React.forwardRef(({ className, ...props }, ref) => ("
    },
    {
      "name": "AlertDialogCancel",
      "type": "variable",
      "startLine": 77,
      "endLine": 77,
      "complexity": "low",
      "parameters": [
        {
          "name": "( className"
        },
        {
          "name": "ref"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable",
        "react"
      ],
      "file": {
        "name": "alert-dialog.jsx",
        "path": "src/components/ui/alert-dialog.jsx"
      },
      "code": "const AlertDialogCancel = React.forwardRef(({ className, ...props }, ref) => ("
    },
    {
      "name": "Command",
      "type": "variable",
      "startLine": 8,
      "endLine": 8,
      "complexity": "low",
      "parameters": [
        {
          "name": "( className"
        },
        {
          "name": "ref"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable",
        "react"
      ],
      "file": {
        "name": "command.jsx",
        "path": "src/components/ui/command.jsx"
      },
      "code": "const Command = React.forwardRef(({ className, ...props }, ref) => ("
    },
    {
      "name": "CommandDialog",
      "type": "function",
      "startLine": 19,
      "endLine": 22,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "function"
      ],
      "file": {
        "name": "command.jsx",
        "path": "src/components/ui/command.jsx"
      },
      "code": "const CommandDialog = ({\n  children,\n  ...props\n}) => {"
    },
    {
      "name": "CommandDialog",
      "type": "variable",
      "startLine": 19,
      "endLine": 22,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "command.jsx",
        "path": "src/components/ui/command.jsx"
      },
      "code": "const CommandDialog = ({\n  children,\n  ...props\n}) => {"
    },
    {
      "name": "CommandInput",
      "type": "variable",
      "startLine": 35,
      "endLine": 35,
      "complexity": "low",
      "parameters": [
        {
          "name": "( className"
        },
        {
          "name": "ref"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable",
        "react"
      ],
      "file": {
        "name": "command.jsx",
        "path": "src/components/ui/command.jsx"
      },
      "code": "const CommandInput = React.forwardRef(({ className, ...props }, ref) => ("
    },
    {
      "name": "CommandList",
      "type": "variable",
      "startLine": 50,
      "endLine": 50,
      "complexity": "low",
      "parameters": [
        {
          "name": "( className"
        },
        {
          "name": "ref"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable",
        "react"
      ],
      "file": {
        "name": "command.jsx",
        "path": "src/components/ui/command.jsx"
      },
      "code": "const CommandList = React.forwardRef(({ className, ...props }, ref) => ("
    },
    {
      "name": "CommandEmpty",
      "type": "variable",
      "startLine": 59,
      "endLine": 64,
      "complexity": "low",
      "parameters": [
        {
          "name": "(props"
        },
        {
          "name": "ref"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable",
        "react"
      ],
      "file": {
        "name": "command.jsx",
        "path": "src/components/ui/command.jsx"
      },
      "code": "const CommandEmpty = React.forwardRef((props, ref) => (\n  <CommandPrimitive.Empty ref={ref} className=\"py-6 text-center text-sm\" {...props} />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n"
    },
    {
      "name": "CommandGroup",
      "type": "variable",
      "startLine": 65,
      "endLine": 65,
      "complexity": "low",
      "parameters": [
        {
          "name": "( className"
        },
        {
          "name": "ref"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable",
        "react"
      ],
      "file": {
        "name": "command.jsx",
        "path": "src/components/ui/command.jsx"
      },
      "code": "const CommandGroup = React.forwardRef(({ className, ...props }, ref) => ("
    },
    {
      "name": "CommandSeparator",
      "type": "variable",
      "startLine": 77,
      "endLine": 77,
      "complexity": "low",
      "parameters": [
        {
          "name": "( className"
        },
        {
          "name": "ref"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable",
        "react"
      ],
      "file": {
        "name": "command.jsx",
        "path": "src/components/ui/command.jsx"
      },
      "code": "const CommandSeparator = React.forwardRef(({ className, ...props }, ref) => ("
    },
    {
      "name": "CommandItem",
      "type": "variable",
      "startLine": 82,
      "endLine": 82,
      "complexity": "low",
      "parameters": [
        {
          "name": "( className"
        },
        {
          "name": "ref"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable",
        "react"
      ],
      "file": {
        "name": "command.jsx",
        "path": "src/components/ui/command.jsx"
      },
      "code": "const CommandItem = React.forwardRef(({ className, ...props }, ref) => ("
    },
    {
      "name": "CommandShortcut",
      "type": "function",
      "startLine": 94,
      "endLine": 97,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "function"
      ],
      "file": {
        "name": "command.jsx",
        "path": "src/components/ui/command.jsx"
      },
      "code": "const CommandShortcut = ({\n  className,\n  ...props\n}) => {"
    },
    {
      "name": "CommandShortcut",
      "type": "variable",
      "startLine": 94,
      "endLine": 97,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "command.jsx",
        "path": "src/components/ui/command.jsx"
      },
      "code": "const CommandShortcut = ({\n  className,\n  ...props\n}) => {"
    },
    {
      "name": "labelVariants",
      "type": "variable",
      "startLine": 7,
      "endLine": 10,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "label.jsx",
        "path": "src/components/ui/label.jsx"
      },
      "code": "const labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n"
    },
    {
      "name": "Label",
      "type": "variable",
      "startLine": 11,
      "endLine": 11,
      "complexity": "low",
      "parameters": [
        {
          "name": "( className"
        },
        {
          "name": "ref"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable",
        "react"
      ],
      "file": {
        "name": "label.jsx",
        "path": "src/components/ui/label.jsx"
      },
      "code": "const Label = React.forwardRef(({ className, ...props }, ref) => ("
    },
    {
      "name": "Breadcrumb",
      "type": "variable",
      "startLine": 7,
      "endLine": 11,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable",
        "react"
      ],
      "file": {
        "name": "breadcrumb.jsx",
        "path": "src/components/ui/breadcrumb.jsx"
      },
      "code": "const Breadcrumb = React.forwardRef(\n  ({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />\n)\nBreadcrumb.displayName = \"Breadcrumb\"\n"
    },
    {
      "name": "BreadcrumbList",
      "type": "variable",
      "startLine": 12,
      "endLine": 12,
      "complexity": "low",
      "parameters": [
        {
          "name": "( className"
        },
        {
          "name": "ref"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable",
        "react"
      ],
      "file": {
        "name": "breadcrumb.jsx",
        "path": "src/components/ui/breadcrumb.jsx"
      },
      "code": "const BreadcrumbList = React.forwardRef(({ className, ...props }, ref) => ("
    },
    {
      "name": "BreadcrumbItem",
      "type": "variable",
      "startLine": 23,
      "endLine": 23,
      "complexity": "low",
      "parameters": [
        {
          "name": "( className"
        },
        {
          "name": "ref"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable",
        "react"
      ],
      "file": {
        "name": "breadcrumb.jsx",
        "path": "src/components/ui/breadcrumb.jsx"
      },
      "code": "const BreadcrumbItem = React.forwardRef(({ className, ...props }, ref) => ("
    },
    {
      "name": "BreadcrumbLink",
      "type": "variable",
      "startLine": 31,
      "endLine": 31,
      "complexity": "low",
      "parameters": [
        {
          "name": "( asChild"
        },
        {
          "name": "className"
        },
        {
          "name": "ref"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable",
        "react"
      ],
      "file": {
        "name": "breadcrumb.jsx",
        "path": "src/components/ui/breadcrumb.jsx"
      },
      "code": "const BreadcrumbLink = React.forwardRef(({ asChild, className, ...props }, ref) => {"
    },
    {
      "name": "Comp",
      "type": "component",
      "startLine": 32,
      "endLine": 36,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "breadcrumb.jsx",
        "path": "src/components/ui/breadcrumb.jsx"
      },
      "code": "  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    (<Comp\n      ref={ref}"
    },
    {
      "name": "BreadcrumbPage",
      "type": "variable",
      "startLine": 43,
      "endLine": 43,
      "complexity": "low",
      "parameters": [
        {
          "name": "( className"
        },
        {
          "name": "ref"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable",
        "react"
      ],
      "file": {
        "name": "breadcrumb.jsx",
        "path": "src/components/ui/breadcrumb.jsx"
      },
      "code": "const BreadcrumbPage = React.forwardRef(({ className, ...props }, ref) => ("
    },
    {
      "name": "BreadcrumbSeparator",
      "type": "function",
      "startLine": 54,
      "endLine": 58,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "function"
      ],
      "file": {
        "name": "breadcrumb.jsx",
        "path": "src/components/ui/breadcrumb.jsx"
      },
      "code": "const BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}) => ("
    },
    {
      "name": "BreadcrumbSeparator",
      "type": "variable",
      "startLine": 54,
      "endLine": 58,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "breadcrumb.jsx",
        "path": "src/components/ui/breadcrumb.jsx"
      },
      "code": "const BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}) => ("
    },
    {
      "name": "BreadcrumbEllipsis",
      "type": "function",
      "startLine": 69,
      "endLine": 72,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "function"
      ],
      "file": {
        "name": "breadcrumb.jsx",
        "path": "src/components/ui/breadcrumb.jsx"
      },
      "code": "const BreadcrumbEllipsis = ({\n  className,\n  ...props\n}) => ("
    },
    {
      "name": "BreadcrumbEllipsis",
      "type": "variable",
      "startLine": 69,
      "endLine": 72,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "breadcrumb.jsx",
        "path": "src/components/ui/breadcrumb.jsx"
      },
      "code": "const BreadcrumbEllipsis = ({\n  className,\n  ...props\n}) => ("
    },
    {
      "name": "Progress",
      "type": "variable",
      "startLine": 8,
      "endLine": 8,
      "complexity": "low",
      "parameters": [
        {
          "name": "( className"
        },
        {
          "name": "value"
        },
        {
          "name": "ref"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable",
        "react"
      ],
      "file": {
        "name": "progress.jsx",
        "path": "src/components/ui/progress.jsx"
      },
      "code": "const Progress = React.forwardRef(({ className, value, ...props }, ref) => ("
    },
    {
      "name": "Calendar",
      "type": "function",
      "startLine": 8,
      "endLine": 13,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "function"
      ],
      "file": {
        "name": "calendar.jsx",
        "path": "src/components/ui/calendar.jsx"
      },
      "code": "function Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}) {"
    },
    {
      "name": "Calendar",
      "type": "component",
      "startLine": 8,
      "endLine": 13,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "component"
      ],
      "file": {
        "name": "calendar.jsx",
        "path": "src/components/ui/calendar.jsx"
      },
      "code": "function Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}) {"
    },
    {
      "name": "Form",
      "type": "variable",
      "startLine": 9,
      "endLine": 10,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "form.jsx",
        "path": "src/components/ui/form.jsx"
      },
      "code": "const Form = FormProvider\n"
    },
    {
      "name": "FormFieldContext",
      "type": "variable",
      "startLine": 11,
      "endLine": 11,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable",
        "react"
      ],
      "file": {
        "name": "form.jsx",
        "path": "src/components/ui/form.jsx"
      },
      "code": "const FormFieldContext = React.createContext({})"
    },
    {
      "name": "FormField",
      "type": "function",
      "startLine": 13,
      "endLine": 16,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "function"
      ],
      "file": {
        "name": "form.jsx",
        "path": "src/components/ui/form.jsx"
      },
      "code": "const FormField = (\n  {\n    ...props\n  }"
    },
    {
      "name": "FormField",
      "type": "variable",
      "startLine": 13,
      "endLine": 16,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "form.jsx",
        "path": "src/components/ui/form.jsx"
      },
      "code": "const FormField = (\n  {\n    ...props\n  }"
    },
    {
      "name": "useFormField",
      "type": "hook",
      "startLine": 25,
      "endLine": 46,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "function",
        "react"
      ],
      "file": {
        "name": "form.jsx",
        "path": "src/components/ui/form.jsx"
      },
      "code": "const useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}"
    },
    {
      "name": "useFormField",
      "type": "hook",
      "startLine": 25,
      "endLine": 46,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "hook",
        "react"
      ],
      "file": {
        "name": "form.jsx",
        "path": "src/components/ui/form.jsx"
      },
      "code": "const useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}"
    },
    {
      "name": "useFormField",
      "type": "hook",
      "startLine": 25,
      "endLine": 46,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable",
        "react"
      ],
      "file": {
        "name": "form.jsx",
        "path": "src/components/ui/form.jsx"
      },
      "code": "const useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}"
    },
    {
      "name": "fieldContext",
      "type": "variable",
      "startLine": 26,
      "endLine": 26,
      "complexity": "low",
      "parameters": [
        {
          "name": "FormFieldContext"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable",
        "react"
      ],
      "file": {
        "name": "form.jsx",
        "path": "src/components/ui/form.jsx"
      },
      "code": "  const fieldContext = React.useContext(FormFieldContext)"
    },
    {
      "name": "itemContext",
      "type": "variable",
      "startLine": 27,
      "endLine": 27,
      "complexity": "low",
      "parameters": [
        {
          "name": "FormItemContext"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable",
        "react"
      ],
      "file": {
        "name": "form.jsx",
        "path": "src/components/ui/form.jsx"
      },
      "code": "  const itemContext = React.useContext(FormItemContext)"
    },
    {
      "name": "fieldState",
      "type": "variable",
      "startLine": 30,
      "endLine": 35,
      "complexity": "low",
      "parameters": [
        {
          "name": "fieldContext.name"
        },
        {
          "name": "formState"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "form.jsx",
        "path": "src/components/ui/form.jsx"
      },
      "code": "  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n"
    },
    {
      "name": "FormItemContext",
      "type": "variable",
      "startLine": 48,
      "endLine": 48,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable",
        "react"
      ],
      "file": {
        "name": "form.jsx",
        "path": "src/components/ui/form.jsx"
      },
      "code": "const FormItemContext = React.createContext({})"
    },
    {
      "name": "FormItem",
      "type": "variable",
      "startLine": 50,
      "endLine": 50,
      "complexity": "low",
      "parameters": [
        {
          "name": "( className"
        },
        {
          "name": "ref"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable",
        "react"
      ],
      "file": {
        "name": "form.jsx",
        "path": "src/components/ui/form.jsx"
      },
      "code": "const FormItem = React.forwardRef(({ className, ...props }, ref) => {"
    },
    {
      "name": "id",
      "type": "variable",
      "startLine": 51,
      "endLine": 60,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable",
        "react"
      ],
      "file": {
        "name": "form.jsx",
        "path": "src/components/ui/form.jsx"
      },
      "code": "  const id = React.useId()\n\n  return (\n    (<FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>)\n  );\n})\nFormItem.displayName = \"FormItem\"\n"
    },
    {
      "name": "FormLabel",
      "type": "variable",
      "startLine": 61,
      "endLine": 61,
      "complexity": "low",
      "parameters": [
        {
          "name": "( className"
        },
        {
          "name": "ref"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable",
        "react"
      ],
      "file": {
        "name": "form.jsx",
        "path": "src/components/ui/form.jsx"
      },
      "code": "const FormLabel = React.forwardRef(({ className, ...props }, ref) => {"
    },
    {
      "name": "FormControl",
      "type": "variable",
      "startLine": 74,
      "endLine": 74,
      "complexity": "low",
      "parameters": [
        {
          "name": "ref"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable",
        "react"
      ],
      "file": {
        "name": "form.jsx",
        "path": "src/components/ui/form.jsx"
      },
      "code": "const FormControl = React.forwardRef(({ ...props }, ref) => {"
    },
    {
      "name": "FormDescription",
      "type": "variable",
      "startLine": 92,
      "endLine": 92,
      "complexity": "low",
      "parameters": [
        {
          "name": "( className"
        },
        {
          "name": "ref"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable",
        "react"
      ],
      "file": {
        "name": "form.jsx",
        "path": "src/components/ui/form.jsx"
      },
      "code": "const FormDescription = React.forwardRef(({ className, ...props }, ref) => {"
    },
    {
      "name": "FormMessage",
      "type": "variable",
      "startLine": 105,
      "endLine": 105,
      "complexity": "low",
      "parameters": [
        {
          "name": "( className"
        },
        {
          "name": "children"
        },
        {
          "name": "ref"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable",
        "react"
      ],
      "file": {
        "name": "form.jsx",
        "path": "src/components/ui/form.jsx"
      },
      "code": "const FormMessage = React.forwardRef(({ className, children, ...props }, ref) => {"
    },
    {
      "name": "body",
      "type": "variable",
      "startLine": 107,
      "endLine": 116,
      "complexity": "low",
      "parameters": [
        {
          "name": "error?.message"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "form.jsx",
        "path": "src/components/ui/form.jsx"
      },
      "code": "  const body = error ? String(error?.message) : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    (<p\n      ref={ref}\n      id={formMessageId}"
    },
    {
      "name": "Accordion",
      "type": "variable",
      "startLine": 7,
      "endLine": 8,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "accordion.jsx",
        "path": "src/components/ui/accordion.jsx"
      },
      "code": "const Accordion = AccordionPrimitive.Root\n"
    },
    {
      "name": "AccordionItem",
      "type": "variable",
      "startLine": 9,
      "endLine": 9,
      "complexity": "low",
      "parameters": [
        {
          "name": "( className"
        },
        {
          "name": "ref"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable",
        "react"
      ],
      "file": {
        "name": "accordion.jsx",
        "path": "src/components/ui/accordion.jsx"
      },
      "code": "const AccordionItem = React.forwardRef(({ className, ...props }, ref) => ("
    },
    {
      "name": "AccordionTrigger",
      "type": "variable",
      "startLine": 14,
      "endLine": 14,
      "complexity": "low",
      "parameters": [
        {
          "name": "( className"
        },
        {
          "name": "children"
        },
        {
          "name": "ref"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable",
        "react"
      ],
      "file": {
        "name": "accordion.jsx",
        "path": "src/components/ui/accordion.jsx"
      },
      "code": "const AccordionTrigger = React.forwardRef(({ className, children, ...props }, ref) => ("
    },
    {
      "name": "AccordionContent",
      "type": "variable",
      "startLine": 31,
      "endLine": 31,
      "complexity": "low",
      "parameters": [
        {
          "name": "( className"
        },
        {
          "name": "children"
        },
        {
          "name": "ref"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable",
        "react"
      ],
      "file": {
        "name": "accordion.jsx",
        "path": "src/components/ui/accordion.jsx"
      },
      "code": "const AccordionContent = React.forwardRef(({ className, children, ...props }, ref) => ("
    },
    {
      "name": "Slider",
      "type": "variable",
      "startLine": 6,
      "endLine": 6,
      "complexity": "low",
      "parameters": [
        {
          "name": "( className"
        },
        {
          "name": "ref"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable",
        "react"
      ],
      "file": {
        "name": "slider.jsx",
        "path": "src/components/ui/slider.jsx"
      },
      "code": "const Slider = React.forwardRef(({ className, ...props }, ref) => ("
    },
    {
      "name": "NavigationMenu",
      "type": "variable",
      "startLine": 8,
      "endLine": 8,
      "complexity": "low",
      "parameters": [
        {
          "name": "( className"
        },
        {
          "name": "children"
        },
        {
          "name": "ref"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable",
        "react"
      ],
      "file": {
        "name": "navigation-menu.jsx",
        "path": "src/components/ui/navigation-menu.jsx"
      },
      "code": "const NavigationMenu = React.forwardRef(({ className, children, ...props }, ref) => ("
    },
    {
      "name": "NavigationMenuList",
      "type": "variable",
      "startLine": 22,
      "endLine": 22,
      "complexity": "low",
      "parameters": [
        {
          "name": "( className"
        },
        {
          "name": "ref"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable",
        "react"
      ],
      "file": {
        "name": "navigation-menu.jsx",
        "path": "src/components/ui/navigation-menu.jsx"
      },
      "code": "const NavigationMenuList = React.forwardRef(({ className, ...props }, ref) => ("
    },
    {
      "name": "NavigationMenuItem",
      "type": "variable",
      "startLine": 33,
      "endLine": 34,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "navigation-menu.jsx",
        "path": "src/components/ui/navigation-menu.jsx"
      },
      "code": "const NavigationMenuItem = NavigationMenuPrimitive.Item\n"
    },
    {
      "name": "navigationMenuTriggerStyle",
      "type": "variable",
      "startLine": 35,
      "endLine": 38,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "navigation-menu.jsx",
        "path": "src/components/ui/navigation-menu.jsx"
      },
      "code": "const navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-9 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[active]:bg-accent/50 data-[state=open]:bg-accent/50\"\n)\n"
    },
    {
      "name": "NavigationMenuTrigger",
      "type": "variable",
      "startLine": 39,
      "endLine": 39,
      "complexity": "low",
      "parameters": [
        {
          "name": "( className"
        },
        {
          "name": "children"
        },
        {
          "name": "ref"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable",
        "react"
      ],
      "file": {
        "name": "navigation-menu.jsx",
        "path": "src/components/ui/navigation-menu.jsx"
      },
      "code": "const NavigationMenuTrigger = React.forwardRef(({ className, children, ...props }, ref) => ("
    },
    {
      "name": "NavigationMenuContent",
      "type": "variable",
      "startLine": 52,
      "endLine": 52,
      "complexity": "low",
      "parameters": [
        {
          "name": "( className"
        },
        {
          "name": "ref"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable",
        "react"
      ],
      "file": {
        "name": "navigation-menu.jsx",
        "path": "src/components/ui/navigation-menu.jsx"
      },
      "code": "const NavigationMenuContent = React.forwardRef(({ className, ...props }, ref) => ("
    },
    {
      "name": "NavigationMenuLink",
      "type": "variable",
      "startLine": 63,
      "endLine": 64,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "navigation-menu.jsx",
        "path": "src/components/ui/navigation-menu.jsx"
      },
      "code": "const NavigationMenuLink = NavigationMenuPrimitive.Link\n"
    },
    {
      "name": "NavigationMenuViewport",
      "type": "variable",
      "startLine": 65,
      "endLine": 65,
      "complexity": "low",
      "parameters": [
        {
          "name": "( className"
        },
        {
          "name": "ref"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable",
        "react"
      ],
      "file": {
        "name": "navigation-menu.jsx",
        "path": "src/components/ui/navigation-menu.jsx"
      },
      "code": "const NavigationMenuViewport = React.forwardRef(({ className, ...props }, ref) => ("
    },
    {
      "name": "NavigationMenuIndicator",
      "type": "variable",
      "startLine": 79,
      "endLine": 79,
      "complexity": "low",
      "parameters": [
        {
          "name": "( className"
        },
        {
          "name": "ref"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable",
        "react"
      ],
      "file": {
        "name": "navigation-menu.jsx",
        "path": "src/components/ui/navigation-menu.jsx"
      },
      "code": "const NavigationMenuIndicator = React.forwardRef(({ className, ...props }, ref) => ("
    },
    {
      "name": "Dialog",
      "type": "variable",
      "startLine": 9,
      "endLine": 10,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "dialog.jsx",
        "path": "src/components/ui/dialog.jsx"
      },
      "code": "const Dialog = DialogPrimitive.Root\n"
    },
    {
      "name": "DialogTrigger",
      "type": "variable",
      "startLine": 11,
      "endLine": 12,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "dialog.jsx",
        "path": "src/components/ui/dialog.jsx"
      },
      "code": "const DialogTrigger = DialogPrimitive.Trigger\n"
    },
    {
      "name": "DialogPortal",
      "type": "variable",
      "startLine": 13,
      "endLine": 14,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "dialog.jsx",
        "path": "src/components/ui/dialog.jsx"
      },
      "code": "const DialogPortal = DialogPrimitive.Portal\n"
    },
    {
      "name": "DialogClose",
      "type": "variable",
      "startLine": 15,
      "endLine": 16,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "dialog.jsx",
        "path": "src/components/ui/dialog.jsx"
      },
      "code": "const DialogClose = DialogPrimitive.Close\n"
    },
    {
      "name": "DialogOverlay",
      "type": "variable",
      "startLine": 17,
      "endLine": 17,
      "complexity": "low",
      "parameters": [
        {
          "name": "( className"
        },
        {
          "name": "ref"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable",
        "react"
      ],
      "file": {
        "name": "dialog.jsx",
        "path": "src/components/ui/dialog.jsx"
      },
      "code": "const DialogOverlay = React.forwardRef(({ className, ...props }, ref) => ("
    },
    {
      "name": "DialogContent",
      "type": "variable",
      "startLine": 28,
      "endLine": 28,
      "complexity": "low",
      "parameters": [
        {
          "name": "( className"
        },
        {
          "name": "children"
        },
        {
          "name": "ref"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable",
        "react"
      ],
      "file": {
        "name": "dialog.jsx",
        "path": "src/components/ui/dialog.jsx"
      },
      "code": "const DialogContent = React.forwardRef(({ className, children, ...props }, ref) => ("
    },
    {
      "name": "DialogHeader",
      "type": "function",
      "startLine": 49,
      "endLine": 52,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "function"
      ],
      "file": {
        "name": "dialog.jsx",
        "path": "src/components/ui/dialog.jsx"
      },
      "code": "const DialogHeader = ({\n  className,\n  ...props\n}) => ("
    },
    {
      "name": "DialogHeader",
      "type": "variable",
      "startLine": 49,
      "endLine": 52,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "dialog.jsx",
        "path": "src/components/ui/dialog.jsx"
      },
      "code": "const DialogHeader = ({\n  className,\n  ...props\n}) => ("
    },
    {
      "name": "DialogFooter",
      "type": "function",
      "startLine": 59,
      "endLine": 62,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "function"
      ],
      "file": {
        "name": "dialog.jsx",
        "path": "src/components/ui/dialog.jsx"
      },
      "code": "const DialogFooter = ({\n  className,\n  ...props\n}) => ("
    },
    {
      "name": "DialogFooter",
      "type": "variable",
      "startLine": 59,
      "endLine": 62,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "dialog.jsx",
        "path": "src/components/ui/dialog.jsx"
      },
      "code": "const DialogFooter = ({\n  className,\n  ...props\n}) => ("
    },
    {
      "name": "DialogTitle",
      "type": "variable",
      "startLine": 69,
      "endLine": 69,
      "complexity": "low",
      "parameters": [
        {
          "name": "( className"
        },
        {
          "name": "ref"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable",
        "react"
      ],
      "file": {
        "name": "dialog.jsx",
        "path": "src/components/ui/dialog.jsx"
      },
      "code": "const DialogTitle = React.forwardRef(({ className, ...props }, ref) => ("
    },
    {
      "name": "DialogDescription",
      "type": "variable",
      "startLine": 77,
      "endLine": 77,
      "complexity": "low",
      "parameters": [
        {
          "name": "( className"
        },
        {
          "name": "ref"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable",
        "react"
      ],
      "file": {
        "name": "dialog.jsx",
        "path": "src/components/ui/dialog.jsx"
      },
      "code": "const DialogDescription = React.forwardRef(({ className, ...props }, ref) => ("
    },
    {
      "name": "HoverCard",
      "type": "variable",
      "startLine": 8,
      "endLine": 9,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "hover-card.jsx",
        "path": "src/components/ui/hover-card.jsx"
      },
      "code": "const HoverCard = HoverCardPrimitive.Root\n"
    },
    {
      "name": "HoverCardTrigger",
      "type": "variable",
      "startLine": 10,
      "endLine": 11,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "hover-card.jsx",
        "path": "src/components/ui/hover-card.jsx"
      },
      "code": "const HoverCardTrigger = HoverCardPrimitive.Trigger\n"
    },
    {
      "name": "HoverCardContent",
      "type": "variable",
      "startLine": 12,
      "endLine": 12,
      "complexity": "low",
      "parameters": [
        {
          "name": "( className"
        },
        {
          "name": "align = \"center\""
        },
        {
          "name": "sideOffset = 4"
        },
        {
          "name": "ref"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable",
        "react"
      ],
      "file": {
        "name": "hover-card.jsx",
        "path": "src/components/ui/hover-card.jsx"
      },
      "code": "const HoverCardContent = React.forwardRef(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => ("
    },
    {
      "name": "MenubarMenu",
      "type": "function",
      "startLine": 9,
      "endLine": 11,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "function"
      ],
      "file": {
        "name": "menubar.jsx",
        "path": "src/components/ui/menubar.jsx"
      },
      "code": "function MenubarMenu({\n  ...props\n}) {"
    },
    {
      "name": "MenubarMenu",
      "type": "component",
      "startLine": 9,
      "endLine": 11,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "component"
      ],
      "file": {
        "name": "menubar.jsx",
        "path": "src/components/ui/menubar.jsx"
      },
      "code": "function MenubarMenu({\n  ...props\n}) {"
    },
    {
      "name": "MenubarGroup",
      "type": "function",
      "startLine": 15,
      "endLine": 17,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "function"
      ],
      "file": {
        "name": "menubar.jsx",
        "path": "src/components/ui/menubar.jsx"
      },
      "code": "function MenubarGroup({\n  ...props\n}) {"
    },
    {
      "name": "MenubarGroup",
      "type": "component",
      "startLine": 15,
      "endLine": 17,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "component"
      ],
      "file": {
        "name": "menubar.jsx",
        "path": "src/components/ui/menubar.jsx"
      },
      "code": "function MenubarGroup({\n  ...props\n}) {"
    },
    {
      "name": "MenubarPortal",
      "type": "function",
      "startLine": 21,
      "endLine": 23,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "function"
      ],
      "file": {
        "name": "menubar.jsx",
        "path": "src/components/ui/menubar.jsx"
      },
      "code": "function MenubarPortal({\n  ...props\n}) {"
    },
    {
      "name": "MenubarPortal",
      "type": "component",
      "startLine": 21,
      "endLine": 23,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "component"
      ],
      "file": {
        "name": "menubar.jsx",
        "path": "src/components/ui/menubar.jsx"
      },
      "code": "function MenubarPortal({\n  ...props\n}) {"
    },
    {
      "name": "MenubarRadioGroup",
      "type": "function",
      "startLine": 27,
      "endLine": 29,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "function"
      ],
      "file": {
        "name": "menubar.jsx",
        "path": "src/components/ui/menubar.jsx"
      },
      "code": "function MenubarRadioGroup({\n  ...props\n}) {"
    },
    {
      "name": "MenubarRadioGroup",
      "type": "component",
      "startLine": 27,
      "endLine": 29,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "component"
      ],
      "file": {
        "name": "menubar.jsx",
        "path": "src/components/ui/menubar.jsx"
      },
      "code": "function MenubarRadioGroup({\n  ...props\n}) {"
    },
    {
      "name": "MenubarSub",
      "type": "function",
      "startLine": 33,
      "endLine": 35,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "function"
      ],
      "file": {
        "name": "menubar.jsx",
        "path": "src/components/ui/menubar.jsx"
      },
      "code": "function MenubarSub({\n  ...props\n}) {"
    },
    {
      "name": "MenubarSub",
      "type": "component",
      "startLine": 33,
      "endLine": 35,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "component"
      ],
      "file": {
        "name": "menubar.jsx",
        "path": "src/components/ui/menubar.jsx"
      },
      "code": "function MenubarSub({\n  ...props\n}) {"
    },
    {
      "name": "Menubar",
      "type": "variable",
      "startLine": 39,
      "endLine": 39,
      "complexity": "low",
      "parameters": [
        {
          "name": "( className"
        },
        {
          "name": "ref"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable",
        "react"
      ],
      "file": {
        "name": "menubar.jsx",
        "path": "src/components/ui/menubar.jsx"
      },
      "code": "const Menubar = React.forwardRef(({ className, ...props }, ref) => ("
    },
    {
      "name": "MenubarTrigger",
      "type": "variable",
      "startLine": 50,
      "endLine": 50,
      "complexity": "low",
      "parameters": [
        {
          "name": "( className"
        },
        {
          "name": "ref"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable",
        "react"
      ],
      "file": {
        "name": "menubar.jsx",
        "path": "src/components/ui/menubar.jsx"
      },
      "code": "const MenubarTrigger = React.forwardRef(({ className, ...props }, ref) => ("
    },
    {
      "name": "MenubarSubTrigger",
      "type": "variable",
      "startLine": 61,
      "endLine": 61,
      "complexity": "low",
      "parameters": [
        {
          "name": "( className"
        },
        {
          "name": "inset"
        },
        {
          "name": "children"
        },
        {
          "name": "ref"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable",
        "react"
      ],
      "file": {
        "name": "menubar.jsx",
        "path": "src/components/ui/menubar.jsx"
      },
      "code": "const MenubarSubTrigger = React.forwardRef(({ className, inset, children, ...props }, ref) => ("
    },
    {
      "name": "MenubarSubContent",
      "type": "variable",
      "startLine": 76,
      "endLine": 76,
      "complexity": "low",
      "parameters": [
        {
          "name": "( className"
        },
        {
          "name": "ref"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable",
        "react"
      ],
      "file": {
        "name": "menubar.jsx",
        "path": "src/components/ui/menubar.jsx"
      },
      "code": "const MenubarSubContent = React.forwardRef(({ className, ...props }, ref) => ("
    },
    {
      "name": "MenubarContent",
      "type": "variable",
      "startLine": 87,
      "endLine": 88,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable",
        "react"
      ],
      "file": {
        "name": "menubar.jsx",
        "path": "src/components/ui/menubar.jsx"
      },
      "code": "const MenubarContent = React.forwardRef((\n  { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },"
    },
    {
      "name": "MenubarItem",
      "type": "variable",
      "startLine": 106,
      "endLine": 106,
      "complexity": "low",
      "parameters": [
        {
          "name": "( className"
        },
        {
          "name": "inset"
        },
        {
          "name": "ref"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable",
        "react"
      ],
      "file": {
        "name": "menubar.jsx",
        "path": "src/components/ui/menubar.jsx"
      },
      "code": "const MenubarItem = React.forwardRef(({ className, inset, ...props }, ref) => ("
    },
    {
      "name": "MenubarCheckboxItem",
      "type": "variable",
      "startLine": 118,
      "endLine": 118,
      "complexity": "low",
      "parameters": [
        {
          "name": "( className"
        },
        {
          "name": "children"
        },
        {
          "name": "checked"
        },
        {
          "name": "ref"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable",
        "react"
      ],
      "file": {
        "name": "menubar.jsx",
        "path": "src/components/ui/menubar.jsx"
      },
      "code": "const MenubarCheckboxItem = React.forwardRef(({ className, children, checked, ...props }, ref) => ("
    },
    {
      "name": "MenubarRadioItem",
      "type": "variable",
      "startLine": 137,
      "endLine": 137,
      "complexity": "low",
      "parameters": [
        {
          "name": "( className"
        },
        {
          "name": "children"
        },
        {
          "name": "ref"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable",
        "react"
      ],
      "file": {
        "name": "menubar.jsx",
        "path": "src/components/ui/menubar.jsx"
      },
      "code": "const MenubarRadioItem = React.forwardRef(({ className, children, ...props }, ref) => ("
    },
    {
      "name": "MenubarLabel",
      "type": "variable",
      "startLine": 155,
      "endLine": 155,
      "complexity": "low",
      "parameters": [
        {
          "name": "( className"
        },
        {
          "name": "inset"
        },
        {
          "name": "ref"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable",
        "react"
      ],
      "file": {
        "name": "menubar.jsx",
        "path": "src/components/ui/menubar.jsx"
      },
      "code": "const MenubarLabel = React.forwardRef(({ className, inset, ...props }, ref) => ("
    },
    {
      "name": "MenubarSeparator",
      "type": "variable",
      "startLine": 163,
      "endLine": 163,
      "complexity": "low",
      "parameters": [
        {
          "name": "( className"
        },
        {
          "name": "ref"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable",
        "react"
      ],
      "file": {
        "name": "menubar.jsx",
        "path": "src/components/ui/menubar.jsx"
      },
      "code": "const MenubarSeparator = React.forwardRef(({ className, ...props }, ref) => ("
    },
    {
      "name": "MenubarShortcut",
      "type": "function",
      "startLine": 171,
      "endLine": 174,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "function"
      ],
      "file": {
        "name": "menubar.jsx",
        "path": "src/components/ui/menubar.jsx"
      },
      "code": "const MenubarShortcut = ({\n  className,\n  ...props\n}) => {"
    },
    {
      "name": "MenubarShortcut",
      "type": "variable",
      "startLine": 171,
      "endLine": 174,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "menubar.jsx",
        "path": "src/components/ui/menubar.jsx"
      },
      "code": "const MenubarShortcut = ({\n  className,\n  ...props\n}) => {"
    },
    {
      "name": "toggleVariants",
      "type": "variable",
      "startLine": 7,
      "endLine": 9,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "toggle.jsx",
        "path": "src/components/ui/toggle.jsx"
      },
      "code": "const toggleVariants = cva(\n  \"inline-flex items-center justify-center gap-2 rounded-md text-sm font-medium transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {"
    },
    {
      "name": "Toggle",
      "type": "variable",
      "startLine": 29,
      "endLine": 29,
      "complexity": "low",
      "parameters": [
        {
          "name": "( className"
        },
        {
          "name": "variant"
        },
        {
          "name": "size"
        },
        {
          "name": "ref"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable",
        "react"
      ],
      "file": {
        "name": "toggle.jsx",
        "path": "src/components/ui/toggle.jsx"
      },
      "code": "const Toggle = React.forwardRef(({ className, variant, size, ...props }, ref) => ("
    },
    {
      "name": "Card",
      "type": "variable",
      "startLine": 5,
      "endLine": 5,
      "complexity": "low",
      "parameters": [
        {
          "name": "( className"
        },
        {
          "name": "ref"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable",
        "react"
      ],
      "file": {
        "name": "card.jsx",
        "path": "src/components/ui/card.jsx"
      },
      "code": "const Card = React.forwardRef(({ className, ...props }, ref) => ("
    },
    {
      "name": "CardHeader",
      "type": "variable",
      "startLine": 13,
      "endLine": 13,
      "complexity": "low",
      "parameters": [
        {
          "name": "( className"
        },
        {
          "name": "ref"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable",
        "react"
      ],
      "file": {
        "name": "card.jsx",
        "path": "src/components/ui/card.jsx"
      },
      "code": "const CardHeader = React.forwardRef(({ className, ...props }, ref) => ("
    },
    {
      "name": "CardTitle",
      "type": "variable",
      "startLine": 21,
      "endLine": 21,
      "complexity": "low",
      "parameters": [
        {
          "name": "( className"
        },
        {
          "name": "ref"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable",
        "react"
      ],
      "file": {
        "name": "card.jsx",
        "path": "src/components/ui/card.jsx"
      },
      "code": "const CardTitle = React.forwardRef(({ className, ...props }, ref) => ("
    },
    {
      "name": "CardDescription",
      "type": "variable",
      "startLine": 29,
      "endLine": 29,
      "complexity": "low",
      "parameters": [
        {
          "name": "( className"
        },
        {
          "name": "ref"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable",
        "react"
      ],
      "file": {
        "name": "card.jsx",
        "path": "src/components/ui/card.jsx"
      },
      "code": "const CardDescription = React.forwardRef(({ className, ...props }, ref) => ("
    },
    {
      "name": "CardContent",
      "type": "variable",
      "startLine": 37,
      "endLine": 37,
      "complexity": "low",
      "parameters": [
        {
          "name": "( className"
        },
        {
          "name": "ref"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable",
        "react"
      ],
      "file": {
        "name": "card.jsx",
        "path": "src/components/ui/card.jsx"
      },
      "code": "const CardContent = React.forwardRef(({ className, ...props }, ref) => ("
    },
    {
      "name": "CardFooter",
      "type": "variable",
      "startLine": 42,
      "endLine": 42,
      "complexity": "low",
      "parameters": [
        {
          "name": "( className"
        },
        {
          "name": "ref"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable",
        "react"
      ],
      "file": {
        "name": "card.jsx",
        "path": "src/components/ui/card.jsx"
      },
      "code": "const CardFooter = React.forwardRef(({ className, ...props }, ref) => ("
    },
    {
      "name": "Checkbox",
      "type": "variable",
      "startLine": 7,
      "endLine": 7,
      "complexity": "low",
      "parameters": [
        {
          "name": "( className"
        },
        {
          "name": "ref"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable",
        "react"
      ],
      "file": {
        "name": "checkbox.jsx",
        "path": "src/components/ui/checkbox.jsx"
      },
      "code": "const Checkbox = React.forwardRef(({ className, ...props }, ref) => ("
    },
    {
      "name": "Tabs",
      "type": "variable",
      "startLine": 6,
      "endLine": 7,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "tabs.jsx",
        "path": "src/components/ui/tabs.jsx"
      },
      "code": "const Tabs = TabsPrimitive.Root\n"
    },
    {
      "name": "TabsList",
      "type": "variable",
      "startLine": 8,
      "endLine": 8,
      "complexity": "low",
      "parameters": [
        {
          "name": "( className"
        },
        {
          "name": "ref"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable",
        "react"
      ],
      "file": {
        "name": "tabs.jsx",
        "path": "src/components/ui/tabs.jsx"
      },
      "code": "const TabsList = React.forwardRef(({ className, ...props }, ref) => ("
    },
    {
      "name": "TabsTrigger",
      "type": "variable",
      "startLine": 19,
      "endLine": 19,
      "complexity": "low",
      "parameters": [
        {
          "name": "( className"
        },
        {
          "name": "ref"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable",
        "react"
      ],
      "file": {
        "name": "tabs.jsx",
        "path": "src/components/ui/tabs.jsx"
      },
      "code": "const TabsTrigger = React.forwardRef(({ className, ...props }, ref) => ("
    },
    {
      "name": "TabsContent",
      "type": "variable",
      "startLine": 30,
      "endLine": 30,
      "complexity": "low",
      "parameters": [
        {
          "name": "( className"
        },
        {
          "name": "ref"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable",
        "react"
      ],
      "file": {
        "name": "tabs.jsx",
        "path": "src/components/ui/tabs.jsx"
      },
      "code": "const TabsContent = React.forwardRef(({ className, ...props }, ref) => ("
    },
    {
      "name": "Pagination",
      "type": "function",
      "startLine": 7,
      "endLine": 10,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "function"
      ],
      "file": {
        "name": "pagination.jsx",
        "path": "src/components/ui/pagination.jsx"
      },
      "code": "const Pagination = ({\n  className,\n  ...props\n}) => ("
    },
    {
      "name": "Pagination",
      "type": "variable",
      "startLine": 7,
      "endLine": 10,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "pagination.jsx",
        "path": "src/components/ui/pagination.jsx"
      },
      "code": "const Pagination = ({\n  className,\n  ...props\n}) => ("
    },
    {
      "name": "PaginationContent",
      "type": "variable",
      "startLine": 19,
      "endLine": 19,
      "complexity": "low",
      "parameters": [
        {
          "name": "( className"
        },
        {
          "name": "ref"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable",
        "react"
      ],
      "file": {
        "name": "pagination.jsx",
        "path": "src/components/ui/pagination.jsx"
      },
      "code": "const PaginationContent = React.forwardRef(({ className, ...props }, ref) => ("
    },
    {
      "name": "PaginationItem",
      "type": "variable",
      "startLine": 27,
      "endLine": 27,
      "complexity": "low",
      "parameters": [
        {
          "name": "( className"
        },
        {
          "name": "ref"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable",
        "react"
      ],
      "file": {
        "name": "pagination.jsx",
        "path": "src/components/ui/pagination.jsx"
      },
      "code": "const PaginationItem = React.forwardRef(({ className, ...props }, ref) => ("
    },
    {
      "name": "PaginationLink",
      "type": "function",
      "startLine": 32,
      "endLine": 37,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "function"
      ],
      "file": {
        "name": "pagination.jsx",
        "path": "src/components/ui/pagination.jsx"
      },
      "code": "const PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}) => ("
    },
    {
      "name": "PaginationLink",
      "type": "variable",
      "startLine": 32,
      "endLine": 37,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "pagination.jsx",
        "path": "src/components/ui/pagination.jsx"
      },
      "code": "const PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}) => ("
    },
    {
      "name": "PaginationPrevious",
      "type": "function",
      "startLine": 48,
      "endLine": 51,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "function"
      ],
      "file": {
        "name": "pagination.jsx",
        "path": "src/components/ui/pagination.jsx"
      },
      "code": "const PaginationPrevious = ({\n  className,\n  ...props\n}) => ("
    },
    {
      "name": "PaginationPrevious",
      "type": "variable",
      "startLine": 48,
      "endLine": 51,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "pagination.jsx",
        "path": "src/components/ui/pagination.jsx"
      },
      "code": "const PaginationPrevious = ({\n  className,\n  ...props\n}) => ("
    },
    {
      "name": "PaginationNext",
      "type": "function",
      "startLine": 63,
      "endLine": 66,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "function"
      ],
      "file": {
        "name": "pagination.jsx",
        "path": "src/components/ui/pagination.jsx"
      },
      "code": "const PaginationNext = ({\n  className,\n  ...props\n}) => ("
    },
    {
      "name": "PaginationNext",
      "type": "variable",
      "startLine": 63,
      "endLine": 66,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "pagination.jsx",
        "path": "src/components/ui/pagination.jsx"
      },
      "code": "const PaginationNext = ({\n  className,\n  ...props\n}) => ("
    },
    {
      "name": "PaginationEllipsis",
      "type": "function",
      "startLine": 78,
      "endLine": 81,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "function"
      ],
      "file": {
        "name": "pagination.jsx",
        "path": "src/components/ui/pagination.jsx"
      },
      "code": "const PaginationEllipsis = ({\n  className,\n  ...props\n}) => ("
    },
    {
      "name": "PaginationEllipsis",
      "type": "variable",
      "startLine": 78,
      "endLine": 81,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "pagination.jsx",
        "path": "src/components/ui/pagination.jsx"
      },
      "code": "const PaginationEllipsis = ({\n  className,\n  ...props\n}) => ("
    },
    {
      "name": "TOAST_LIMIT",
      "type": "variable",
      "startLine": 4,
      "endLine": 4,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "use-toast.jsx",
        "path": "src/components/ui/use-toast.jsx"
      },
      "code": "const TOAST_LIMIT = 20;"
    },
    {
      "name": "TOAST_REMOVE_DELAY",
      "type": "variable",
      "startLine": 5,
      "endLine": 5,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "use-toast.jsx",
        "path": "src/components/ui/use-toast.jsx"
      },
      "code": "const TOAST_REMOVE_DELAY = 1000000;"
    },
    {
      "name": "actionTypes",
      "type": "variable",
      "startLine": 7,
      "endLine": 12,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "use-toast.jsx",
        "path": "src/components/ui/use-toast.jsx"
      },
      "code": "const actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n};"
    },
    {
      "name": "count",
      "type": "variable",
      "startLine": 14,
      "endLine": 14,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "use-toast.jsx",
        "path": "src/components/ui/use-toast.jsx"
      },
      "code": "let count = 0;"
    },
    {
      "name": "genId",
      "type": "function",
      "startLine": 16,
      "endLine": 19,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "function"
      ],
      "file": {
        "name": "use-toast.jsx",
        "path": "src/components/ui/use-toast.jsx"
      },
      "code": "function genId() {\n  count = (count + 1) % Number.MAX_VALUE;\n  return count.toString();\n}"
    },
    {
      "name": "toastTimeouts",
      "type": "variable",
      "startLine": 21,
      "endLine": 21,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "use-toast.jsx",
        "path": "src/components/ui/use-toast.jsx"
      },
      "code": "const toastTimeouts = new Map();"
    },
    {
      "name": "addToRemoveQueue",
      "type": "function",
      "startLine": 23,
      "endLine": 37,
      "complexity": "low",
      "parameters": [
        {
          "name": "toastId"
        }
      ],
      "dependencies": [],
      "tags": [
        "function"
      ],
      "file": {
        "name": "use-toast.jsx",
        "path": "src/components/ui/use-toast.jsx"
      },
      "code": "const addToRemoveQueue = (toastId) => {\n  if (toastTimeouts.has(toastId)) {\n    return;\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId);\n    dispatch({\n      type: actionTypes.REMOVE_TOAST,\n      toastId,\n    });\n  }, TOAST_REMOVE_DELAY);\n\n  toastTimeouts.set(toastId, timeout);\n};"
    },
    {
      "name": "addToRemoveQueue",
      "type": "variable",
      "startLine": 23,
      "endLine": 37,
      "complexity": "low",
      "parameters": [
        {
          "name": "toastId"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "use-toast.jsx",
        "path": "src/components/ui/use-toast.jsx"
      },
      "code": "const addToRemoveQueue = (toastId) => {\n  if (toastTimeouts.has(toastId)) {\n    return;\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId);\n    dispatch({\n      type: actionTypes.REMOVE_TOAST,\n      toastId,\n    });\n  }, TOAST_REMOVE_DELAY);\n\n  toastTimeouts.set(toastId, timeout);\n};"
    },
    {
      "name": "timeout",
      "type": "variable",
      "startLine": 28,
      "endLine": 34,
      "complexity": "low",
      "parameters": [
        {
          "name": "("
        }
      ],
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "use-toast.jsx",
        "path": "src/components/ui/use-toast.jsx"
      },
      "code": "  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId);\n    dispatch({\n      type: actionTypes.REMOVE_TOAST,\n      toastId,\n    });\n  }, TOAST_REMOVE_DELAY);"
    },
    {
      "name": "clearFromRemoveQueue",
      "type": "function",
      "startLine": 39,
      "endLine": 45,
      "complexity": "low",
      "parameters": [
        {
          "name": "toastId"
        }
      ],
      "dependencies": [],
      "tags": [
        "function"
      ],
      "file": {
        "name": "use-toast.jsx",
        "path": "src/components/ui/use-toast.jsx"
      },
      "code": "const clearFromRemoveQueue = (toastId) => {\n  const timeout = toastTimeouts.get(toastId);\n  if (timeout) {\n    clearTimeout(timeout);\n    toastTimeouts.delete(toastId);\n  }\n};"
    },
    {
      "name": "clearFromRemoveQueue",
      "type": "variable",
      "startLine": 39,
      "endLine": 45,
      "complexity": "low",
      "parameters": [
        {
          "name": "toastId"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "use-toast.jsx",
        "path": "src/components/ui/use-toast.jsx"
      },
      "code": "const clearFromRemoveQueue = (toastId) => {\n  const timeout = toastTimeouts.get(toastId);\n  if (timeout) {\n    clearTimeout(timeout);\n    toastTimeouts.delete(toastId);\n  }\n};"
    },
    {
      "name": "timeout",
      "type": "variable",
      "startLine": 40,
      "endLine": 40,
      "complexity": "low",
      "parameters": [
        {
          "name": "toastId"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "use-toast.jsx",
        "path": "src/components/ui/use-toast.jsx"
      },
      "code": "  const timeout = toastTimeouts.get(toastId);"
    },
    {
      "name": "reducer",
      "type": "function",
      "startLine": 47,
      "endLine": 100,
      "complexity": "medium",
      "parameters": [
        {
          "name": "state"
        },
        {
          "name": "action"
        }
      ],
      "dependencies": [],
      "tags": [
        "function",
        "exported"
      ],
      "file": {
        "name": "use-toast.jsx",
        "path": "src/components/ui/use-toast.jsx"
      },
      "code": "export const reducer = (state, action) => {\n  switch (action.type) {\n    case actionTypes.ADD_TOAST:\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      };\n\n    case actionTypes.UPDATE_TOAST:\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      };\n\n    case actionTypes.DISMISS_TOAST: {\n      const { toastId } = action;\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId);\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id);\n        });\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      };\n    }\n    case actionTypes.REMOVE_TOAST:\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        };\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      };\n  }\n};"
    },
    {
      "name": "reducer",
      "type": "variable",
      "startLine": 47,
      "endLine": 100,
      "complexity": "medium",
      "parameters": [
        {
          "name": "state"
        },
        {
          "name": "action"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable",
        "exported"
      ],
      "file": {
        "name": "use-toast.jsx",
        "path": "src/components/ui/use-toast.jsx"
      },
      "code": "export const reducer = (state, action) => {\n  switch (action.type) {\n    case actionTypes.ADD_TOAST:\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      };\n\n    case actionTypes.UPDATE_TOAST:\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      };\n\n    case actionTypes.DISMISS_TOAST: {\n      const { toastId } = action;\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId);\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id);\n        });\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      };\n    }\n    case actionTypes.REMOVE_TOAST:\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        };\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      };\n  }\n};"
    },
    {
      "name": "listeners",
      "type": "variable",
      "startLine": 102,
      "endLine": 102,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "use-toast.jsx",
        "path": "src/components/ui/use-toast.jsx"
      },
      "code": "const listeners = [];"
    },
    {
      "name": "memoryState",
      "type": "variable",
      "startLine": 104,
      "endLine": 104,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "use-toast.jsx",
        "path": "src/components/ui/use-toast.jsx"
      },
      "code": "let memoryState = { toasts: [] };"
    },
    {
      "name": "dispatch",
      "type": "function",
      "startLine": 106,
      "endLine": 111,
      "complexity": "low",
      "parameters": [
        {
          "name": "action"
        }
      ],
      "dependencies": [],
      "tags": [
        "function"
      ],
      "file": {
        "name": "use-toast.jsx",
        "path": "src/components/ui/use-toast.jsx"
      },
      "code": "function dispatch(action) {\n  memoryState = reducer(memoryState, action);\n  listeners.forEach((listener) => {\n    listener(memoryState);\n  });\n}"
    },
    {
      "name": "toast",
      "type": "function",
      "startLine": 113,
      "endLine": 113,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "function"
      ],
      "file": {
        "name": "use-toast.jsx",
        "path": "src/components/ui/use-toast.jsx"
      },
      "code": "function toast({ ...props }) {"
    },
    {
      "name": "id",
      "type": "variable",
      "startLine": 114,
      "endLine": 114,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "use-toast.jsx",
        "path": "src/components/ui/use-toast.jsx"
      },
      "code": "  const id = genId();"
    },
    {
      "name": "update",
      "type": "function",
      "startLine": 116,
      "endLine": 121,
      "complexity": "low",
      "parameters": [
        {
          "name": "props"
        }
      ],
      "dependencies": [],
      "tags": [
        "function"
      ],
      "file": {
        "name": "use-toast.jsx",
        "path": "src/components/ui/use-toast.jsx"
      },
      "code": "  const update = (props) =>\n    dispatch({\n      type: actionTypes.UPDATE_TOAST,\n      toast: { ...props, id },\n    });\n"
    },
    {
      "name": "update",
      "type": "variable",
      "startLine": 116,
      "endLine": 121,
      "complexity": "low",
      "parameters": [
        {
          "name": "props"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "use-toast.jsx",
        "path": "src/components/ui/use-toast.jsx"
      },
      "code": "  const update = (props) =>\n    dispatch({\n      type: actionTypes.UPDATE_TOAST,\n      toast: { ...props, id },\n    });\n"
    },
    {
      "name": "dismiss",
      "type": "function",
      "startLine": 122,
      "endLine": 123,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "function"
      ],
      "file": {
        "name": "use-toast.jsx",
        "path": "src/components/ui/use-toast.jsx"
      },
      "code": "  const dismiss = () =>\n    dispatch({ type: actionTypes.DISMISS_TOAST, toastId: id });"
    },
    {
      "name": "dismiss",
      "type": "variable",
      "startLine": 122,
      "endLine": 123,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "use-toast.jsx",
        "path": "src/components/ui/use-toast.jsx"
      },
      "code": "  const dismiss = () =>\n    dispatch({ type: actionTypes.DISMISS_TOAST, toastId: id });"
    },
    {
      "name": "useToast",
      "type": "hook",
      "startLine": 144,
      "endLine": 162,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "function",
        "react"
      ],
      "file": {
        "name": "use-toast.jsx",
        "path": "src/components/ui/use-toast.jsx"
      },
      "code": "function useToast() {\n  const [state, setState] = useState(memoryState);\n\n  useEffect(() => {\n    listeners.push(setState);\n    return () => {\n      const index = listeners.indexOf(setState);\n      if (index > -1) {\n        listeners.splice(index, 1);\n      }\n    };\n  }, [state]);\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId) => dispatch({ type: actionTypes.DISMISS_TOAST, toastId }),\n  };\n}"
    },
    {
      "name": "useToast",
      "type": "hook",
      "startLine": 144,
      "endLine": 162,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "hook",
        "react"
      ],
      "file": {
        "name": "use-toast.jsx",
        "path": "src/components/ui/use-toast.jsx"
      },
      "code": "function useToast() {\n  const [state, setState] = useState(memoryState);\n\n  useEffect(() => {\n    listeners.push(setState);\n    return () => {\n      const index = listeners.indexOf(setState);\n      if (index > -1) {\n        listeners.splice(index, 1);\n      }\n    };\n  }, [state]);\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId) => dispatch({ type: actionTypes.DISMISS_TOAST, toastId }),\n  };\n}"
    },
    {
      "name": "index",
      "type": "variable",
      "startLine": 150,
      "endLine": 150,
      "complexity": "low",
      "parameters": [
        {
          "name": "setState"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "use-toast.jsx",
        "path": "src/components/ui/use-toast.jsx"
      },
      "code": "      const index = listeners.indexOf(setState);"
    },
    {
      "name": "InputOTP",
      "type": "variable",
      "startLine": 7,
      "endLine": 7,
      "complexity": "low",
      "parameters": [
        {
          "name": "( className"
        },
        {
          "name": "containerClassName"
        },
        {
          "name": "ref"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable",
        "react"
      ],
      "file": {
        "name": "input-otp.jsx",
        "path": "src/components/ui/input-otp.jsx"
      },
      "code": "const InputOTP = React.forwardRef(({ className, containerClassName, ...props }, ref) => ("
    },
    {
      "name": "InputOTPGroup",
      "type": "variable",
      "startLine": 16,
      "endLine": 16,
      "complexity": "low",
      "parameters": [
        {
          "name": "( className"
        },
        {
          "name": "ref"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable",
        "react"
      ],
      "file": {
        "name": "input-otp.jsx",
        "path": "src/components/ui/input-otp.jsx"
      },
      "code": "const InputOTPGroup = React.forwardRef(({ className, ...props }, ref) => ("
    },
    {
      "name": "InputOTPSlot",
      "type": "variable",
      "startLine": 21,
      "endLine": 21,
      "complexity": "low",
      "parameters": [
        {
          "name": "( index"
        },
        {
          "name": "className"
        },
        {
          "name": "ref"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable",
        "react"
      ],
      "file": {
        "name": "input-otp.jsx",
        "path": "src/components/ui/input-otp.jsx"
      },
      "code": "const InputOTPSlot = React.forwardRef(({ index, className, ...props }, ref) => {"
    },
    {
      "name": "inputOTPContext",
      "type": "variable",
      "startLine": 22,
      "endLine": 22,
      "complexity": "low",
      "parameters": [
        {
          "name": "OTPInputContext"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable",
        "react"
      ],
      "file": {
        "name": "input-otp.jsx",
        "path": "src/components/ui/input-otp.jsx"
      },
      "code": "  const inputOTPContext = React.useContext(OTPInputContext)"
    },
    {
      "name": "InputOTPSeparator",
      "type": "variable",
      "startLine": 46,
      "endLine": 46,
      "complexity": "low",
      "parameters": [
        {
          "name": "ref"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable",
        "react"
      ],
      "file": {
        "name": "input-otp.jsx",
        "path": "src/components/ui/input-otp.jsx"
      },
      "code": "const InputOTPSeparator = React.forwardRef(({ ...props }, ref) => ("
    },
    {
      "name": "Input",
      "type": "variable",
      "startLine": 5,
      "endLine": 5,
      "complexity": "low",
      "parameters": [
        {
          "name": "( className"
        },
        {
          "name": "type"
        },
        {
          "name": "ref"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable",
        "react"
      ],
      "file": {
        "name": "input.jsx",
        "path": "src/components/ui/input.jsx"
      },
      "code": "const Input = React.forwardRef(({ className, type, ...props }, ref) => {"
    },
    {
      "name": "THEMES",
      "type": "variable",
      "startLine": 8,
      "endLine": 11,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "chart.jsx",
        "path": "src/components/ui/chart.jsx"
      },
      "code": "const THEMES = {\n  light: \"\",\n  dark: \".dark\"\n}"
    },
    {
      "name": "ChartContext",
      "type": "variable",
      "startLine": 13,
      "endLine": 14,
      "complexity": "low",
      "parameters": [
        {
          "name": "null"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable",
        "react"
      ],
      "file": {
        "name": "chart.jsx",
        "path": "src/components/ui/chart.jsx"
      },
      "code": "const ChartContext = React.createContext(null)\n"
    },
    {
      "name": "useChart",
      "type": "hook",
      "startLine": 15,
      "endLine": 23,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "function",
        "react"
      ],
      "file": {
        "name": "chart.jsx",
        "path": "src/components/ui/chart.jsx"
      },
      "code": "function useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}"
    },
    {
      "name": "useChart",
      "type": "hook",
      "startLine": 15,
      "endLine": 23,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "hook",
        "react"
      ],
      "file": {
        "name": "chart.jsx",
        "path": "src/components/ui/chart.jsx"
      },
      "code": "function useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}"
    },
    {
      "name": "context",
      "type": "variable",
      "startLine": 16,
      "endLine": 24,
      "complexity": "low",
      "parameters": [
        {
          "name": "ChartContext"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable",
        "react"
      ],
      "file": {
        "name": "chart.jsx",
        "path": "src/components/ui/chart.jsx"
      },
      "code": "  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n"
    },
    {
      "name": "ChartContainer",
      "type": "variable",
      "startLine": 25,
      "endLine": 25,
      "complexity": "low",
      "parameters": [
        {
          "name": "( id"
        },
        {
          "name": "className"
        },
        {
          "name": "children"
        },
        {
          "name": "config"
        },
        {
          "name": "ref"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable",
        "react"
      ],
      "file": {
        "name": "chart.jsx",
        "path": "src/components/ui/chart.jsx"
      },
      "code": "const ChartContainer = React.forwardRef(({ id, className, children, config, ...props }, ref) => {"
    },
    {
      "name": "uniqueId",
      "type": "variable",
      "startLine": 26,
      "endLine": 26,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable",
        "react"
      ],
      "file": {
        "name": "chart.jsx",
        "path": "src/components/ui/chart.jsx"
      },
      "code": "  const uniqueId = React.useId()"
    },
    {
      "name": "chartId",
      "type": "variable",
      "startLine": 27,
      "endLine": 27,
      "complexity": "low",
      "parameters": [
        {
          "name": "/",
          "type": "/g"
        },
        {
          "name": "\"\""
        }
      ],
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "chart.jsx",
        "path": "src/components/ui/chart.jsx"
      },
      "code": "  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`"
    },
    {
      "name": "ChartStyle",
      "type": "function",
      "startLine": 49,
      "endLine": 52,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "function"
      ],
      "file": {
        "name": "chart.jsx",
        "path": "src/components/ui/chart.jsx"
      },
      "code": "const ChartStyle = ({\n  id,\n  config\n}) => {"
    },
    {
      "name": "ChartStyle",
      "type": "variable",
      "startLine": 49,
      "endLine": 52,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "chart.jsx",
        "path": "src/components/ui/chart.jsx"
      },
      "code": "const ChartStyle = ({\n  id,\n  config\n}) => {"
    },
    {
      "name": "colorConfig",
      "type": "variable",
      "startLine": 53,
      "endLine": 57,
      "complexity": "low",
      "parameters": [
        {
          "name": "config"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "chart.jsx",
        "path": "src/components/ui/chart.jsx"
      },
      "code": "  const colorConfig = Object.entries(config).filter(([, config]) => config.theme || config.color)\n\n  if (!colorConfig.length) {\n    return null\n  }"
    },
    {
      "name": "color",
      "type": "variable",
      "startLine": 67,
      "endLine": 70,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "chart.jsx",
        "path": "src/components/ui/chart.jsx"
      },
      "code": "const color =\n  itemConfig.theme?.[theme] ||\n  itemConfig.color\nreturn color ? `  --color-${key}: ${color};` : null"
    },
    {
      "name": "ChartTooltip",
      "type": "variable",
      "startLine": 80,
      "endLine": 81,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "chart.jsx",
        "path": "src/components/ui/chart.jsx"
      },
      "code": "const ChartTooltip = RechartsPrimitive.Tooltip\n"
    },
    {
      "name": "ChartTooltipContent",
      "type": "variable",
      "startLine": 82,
      "endLine": 85,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable",
        "react"
      ],
      "file": {
        "name": "chart.jsx",
        "path": "src/components/ui/chart.jsx"
      },
      "code": "const ChartTooltipContent = React.forwardRef((\n  {\n    active,\n    payload,"
    },
    {
      "name": "tooltipLabel",
      "type": "variable",
      "startLine": 102,
      "endLine": 128,
      "complexity": "low",
      "parameters": [
        {
          "name": "("
        }
      ],
      "dependencies": [],
      "tags": [
        "variable",
        "react"
      ],
      "file": {
        "name": "chart.jsx",
        "path": "src/components/ui/chart.jsx"
      },
      "code": "  const tooltipLabel = React.useMemo(() => {\n    if (hideLabel || !payload?.length) {\n      return null\n    }\n\n    const [item] = payload\n    const key = `${labelKey || item.dataKey || item.name || \"value\"}`\n    const itemConfig = getPayloadConfigFromPayload(config, item, key)\n    const value =\n      !labelKey && typeof label === \"string\"\n        ? config[label]?.label || label\n        : itemConfig?.label\n\n    if (labelFormatter) {\n      return (\n        (<div className={cn(\"font-medium\", labelClassName)}>\n          {labelFormatter(value, payload)}\n        </div>)\n      );\n    }\n\n    if (!value) {\n      return null\n    }\n\n    return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>;\n  }, ["
    },
    {
      "name": "key",
      "type": "variable",
      "startLine": 108,
      "endLine": 108,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "chart.jsx",
        "path": "src/components/ui/chart.jsx"
      },
      "code": "    const key = `${labelKey || item.dataKey || item.name || \"value\"}`"
    },
    {
      "name": "itemConfig",
      "type": "variable",
      "startLine": 109,
      "endLine": 109,
      "complexity": "low",
      "parameters": [
        {
          "name": "config"
        },
        {
          "name": "item"
        },
        {
          "name": "key"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "chart.jsx",
        "path": "src/components/ui/chart.jsx"
      },
      "code": "    const itemConfig = getPayloadConfigFromPayload(config, item, key)"
    },
    {
      "name": "value",
      "type": "variable",
      "startLine": 110,
      "endLine": 121,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "chart.jsx",
        "path": "src/components/ui/chart.jsx"
      },
      "code": "    const value =\n      !labelKey && typeof label === \"string\"\n        ? config[label]?.label || label\n        : itemConfig?.label\n\n    if (labelFormatter) {\n      return (\n        (<div className={cn(\"font-medium\", labelClassName)}>\n          {labelFormatter(value, payload)}\n        </div>)\n      );\n    }"
    },
    {
      "name": "nestLabel",
      "type": "variable",
      "startLine": 142,
      "endLine": 146,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "chart.jsx",
        "path": "src/components/ui/chart.jsx"
      },
      "code": "  const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n  return (\n    (<div\n      ref={ref}"
    },
    {
      "name": "key",
      "type": "variable",
      "startLine": 154,
      "endLine": 154,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "chart.jsx",
        "path": "src/components/ui/chart.jsx"
      },
      "code": "          const key = `${nameKey || item.name || item.dataKey || \"value\"}`"
    },
    {
      "name": "itemConfig",
      "type": "variable",
      "startLine": 155,
      "endLine": 155,
      "complexity": "low",
      "parameters": [
        {
          "name": "config"
        },
        {
          "name": "item"
        },
        {
          "name": "key"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "chart.jsx",
        "path": "src/components/ui/chart.jsx"
      },
      "code": "          const itemConfig = getPayloadConfigFromPayload(config, item, key)"
    },
    {
      "name": "indicatorColor",
      "type": "variable",
      "startLine": 156,
      "endLine": 160,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "chart.jsx",
        "path": "src/components/ui/chart.jsx"
      },
      "code": "          const indicatorColor = color || item.payload.fill || item.color\n\n          return (\n            (<div\n              key={item.dataKey}"
    },
    {
      "name": "ChartLegend",
      "type": "variable",
      "startLine": 217,
      "endLine": 218,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "chart.jsx",
        "path": "src/components/ui/chart.jsx"
      },
      "code": "const ChartLegend = RechartsPrimitive.Legend\n"
    },
    {
      "name": "ChartLegendContent",
      "type": "variable",
      "startLine": 219,
      "endLine": 222,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable",
        "react"
      ],
      "file": {
        "name": "chart.jsx",
        "path": "src/components/ui/chart.jsx"
      },
      "code": "const ChartLegendContent = React.forwardRef((\n  { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n  ref\n) => {"
    },
    {
      "name": "key",
      "type": "variable",
      "startLine": 238,
      "endLine": 238,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "chart.jsx",
        "path": "src/components/ui/chart.jsx"
      },
      "code": "        const key = `${nameKey || item.dataKey || \"value\"}`"
    },
    {
      "name": "itemConfig",
      "type": "variable",
      "startLine": 239,
      "endLine": 243,
      "complexity": "low",
      "parameters": [
        {
          "name": "config"
        },
        {
          "name": "item"
        },
        {
          "name": "key"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "chart.jsx",
        "path": "src/components/ui/chart.jsx"
      },
      "code": "        const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n        return (\n          (<div\n            key={item.value}"
    },
    {
      "name": "getPayloadConfigFromPayload",
      "type": "function",
      "startLine": 266,
      "endLine": 300,
      "complexity": "medium",
      "dependencies": [],
      "tags": [
        "function"
      ],
      "file": {
        "name": "chart.jsx",
        "path": "src/components/ui/chart.jsx"
      },
      "code": "function getPayloadConfigFromPayload(\n  config,\n  payload,\n  key\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey = key\n\n  if (\n    key in payload &&\n    typeof payload[key] === \"string\"\n  ) {\n    configLabelKey = payload[key]\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[key]\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key];\n}"
    },
    {
      "name": "payloadPayload",
      "type": "variable",
      "startLine": 275,
      "endLine": 281,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "chart.jsx",
        "path": "src/components/ui/chart.jsx"
      },
      "code": "  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n"
    },
    {
      "name": "configLabelKey",
      "type": "variable",
      "startLine": 282,
      "endLine": 289,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "chart.jsx",
        "path": "src/components/ui/chart.jsx"
      },
      "code": "  let configLabelKey = key\n\n  if (\n    key in payload &&\n    typeof payload[key] === \"string\"\n  ) {\n    configLabelKey = payload[key]\n  } else if ("
    },
    {
      "name": "Separator",
      "type": "variable",
      "startLine": 6,
      "endLine": 13,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable",
        "react"
      ],
      "file": {
        "name": "separator.jsx",
        "path": "src/components/ui/separator.jsx"
      },
      "code": "const Separator = React.forwardRef((\n  { className, orientation = \"horizontal\", decorative = true, ...props },\n  ref\n) => (\n  <SeparatorPrimitive.Root\n    ref={ref}\n    decorative={decorative}\n    orientation={orientation}"
    },
    {
      "name": "Popover",
      "type": "variable",
      "startLine": 6,
      "endLine": 7,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "popover.jsx",
        "path": "src/components/ui/popover.jsx"
      },
      "code": "const Popover = PopoverPrimitive.Root\n"
    },
    {
      "name": "PopoverTrigger",
      "type": "variable",
      "startLine": 8,
      "endLine": 9,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "popover.jsx",
        "path": "src/components/ui/popover.jsx"
      },
      "code": "const PopoverTrigger = PopoverPrimitive.Trigger\n"
    },
    {
      "name": "PopoverAnchor",
      "type": "variable",
      "startLine": 10,
      "endLine": 11,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "popover.jsx",
        "path": "src/components/ui/popover.jsx"
      },
      "code": "const PopoverAnchor = PopoverPrimitive.Anchor\n"
    },
    {
      "name": "PopoverContent",
      "type": "variable",
      "startLine": 12,
      "endLine": 12,
      "complexity": "low",
      "parameters": [
        {
          "name": "( className"
        },
        {
          "name": "align = \"center\""
        },
        {
          "name": "sideOffset = 4"
        },
        {
          "name": "ref"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable",
        "react"
      ],
      "file": {
        "name": "popover.jsx",
        "path": "src/components/ui/popover.jsx"
      },
      "code": "const PopoverContent = React.forwardRef(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => ("
    },
    {
      "name": "ScrollArea",
      "type": "variable",
      "startLine": 6,
      "endLine": 6,
      "complexity": "low",
      "parameters": [
        {
          "name": "( className"
        },
        {
          "name": "children"
        },
        {
          "name": "ref"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable",
        "react"
      ],
      "file": {
        "name": "scroll-area.jsx",
        "path": "src/components/ui/scroll-area.jsx"
      },
      "code": "const ScrollArea = React.forwardRef(({ className, children, ...props }, ref) => ("
    },
    {
      "name": "ScrollBar",
      "type": "variable",
      "startLine": 20,
      "endLine": 20,
      "complexity": "low",
      "parameters": [
        {
          "name": "( className"
        },
        {
          "name": "orientation = \"vertical\""
        },
        {
          "name": "ref"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable",
        "react"
      ],
      "file": {
        "name": "scroll-area.jsx",
        "path": "src/components/ui/scroll-area.jsx"
      },
      "code": "const ScrollBar = React.forwardRef(({ className, orientation = \"vertical\", ...props }, ref) => ("
    },
    {
      "name": "Table",
      "type": "variable",
      "startLine": 5,
      "endLine": 5,
      "complexity": "low",
      "parameters": [
        {
          "name": "( className"
        },
        {
          "name": "ref"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable",
        "react"
      ],
      "file": {
        "name": "table.jsx",
        "path": "src/components/ui/table.jsx"
      },
      "code": "const Table = React.forwardRef(({ className, ...props }, ref) => ("
    },
    {
      "name": "TableHeader",
      "type": "variable",
      "startLine": 15,
      "endLine": 15,
      "complexity": "low",
      "parameters": [
        {
          "name": "( className"
        },
        {
          "name": "ref"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable",
        "react"
      ],
      "file": {
        "name": "table.jsx",
        "path": "src/components/ui/table.jsx"
      },
      "code": "const TableHeader = React.forwardRef(({ className, ...props }, ref) => ("
    },
    {
      "name": "TableBody",
      "type": "variable",
      "startLine": 20,
      "endLine": 20,
      "complexity": "low",
      "parameters": [
        {
          "name": "( className"
        },
        {
          "name": "ref"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable",
        "react"
      ],
      "file": {
        "name": "table.jsx",
        "path": "src/components/ui/table.jsx"
      },
      "code": "const TableBody = React.forwardRef(({ className, ...props }, ref) => ("
    },
    {
      "name": "TableFooter",
      "type": "variable",
      "startLine": 28,
      "endLine": 28,
      "complexity": "low",
      "parameters": [
        {
          "name": "( className"
        },
        {
          "name": "ref"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable",
        "react"
      ],
      "file": {
        "name": "table.jsx",
        "path": "src/components/ui/table.jsx"
      },
      "code": "const TableFooter = React.forwardRef(({ className, ...props }, ref) => ("
    },
    {
      "name": "TableRow",
      "type": "variable",
      "startLine": 36,
      "endLine": 36,
      "complexity": "low",
      "parameters": [
        {
          "name": "( className"
        },
        {
          "name": "ref"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable",
        "react"
      ],
      "file": {
        "name": "table.jsx",
        "path": "src/components/ui/table.jsx"
      },
      "code": "const TableRow = React.forwardRef(({ className, ...props }, ref) => ("
    },
    {
      "name": "TableHead",
      "type": "variable",
      "startLine": 47,
      "endLine": 47,
      "complexity": "low",
      "parameters": [
        {
          "name": "( className"
        },
        {
          "name": "ref"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable",
        "react"
      ],
      "file": {
        "name": "table.jsx",
        "path": "src/components/ui/table.jsx"
      },
      "code": "const TableHead = React.forwardRef(({ className, ...props }, ref) => ("
    },
    {
      "name": "TableCell",
      "type": "variable",
      "startLine": 58,
      "endLine": 58,
      "complexity": "low",
      "parameters": [
        {
          "name": "( className"
        },
        {
          "name": "ref"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable",
        "react"
      ],
      "file": {
        "name": "table.jsx",
        "path": "src/components/ui/table.jsx"
      },
      "code": "const TableCell = React.forwardRef(({ className, ...props }, ref) => ("
    },
    {
      "name": "TableCaption",
      "type": "variable",
      "startLine": 69,
      "endLine": 69,
      "complexity": "low",
      "parameters": [
        {
          "name": "( className"
        },
        {
          "name": "ref"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable",
        "react"
      ],
      "file": {
        "name": "table.jsx",
        "path": "src/components/ui/table.jsx"
      },
      "code": "const TableCaption = React.forwardRef(({ className, ...props }, ref) => ("
    },
    {
      "name": "AspectRatio",
      "type": "variable",
      "startLine": 3,
      "endLine": 4,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "aspect-ratio.jsx",
        "path": "src/components/ui/aspect-ratio.jsx"
      },
      "code": "const AspectRatio = AspectRatioPrimitive.Root\n"
    },
    {
      "name": "Switch",
      "type": "variable",
      "startLine": 6,
      "endLine": 6,
      "complexity": "low",
      "parameters": [
        {
          "name": "( className"
        },
        {
          "name": "ref"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable",
        "react"
      ],
      "file": {
        "name": "switch.jsx",
        "path": "src/components/ui/switch.jsx"
      },
      "code": "const Switch = React.forwardRef(({ className, ...props }, ref) => ("
    },
    {
      "name": "ResizablePanelGroup",
      "type": "function",
      "startLine": 8,
      "endLine": 11,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "function"
      ],
      "file": {
        "name": "resizable.jsx",
        "path": "src/components/ui/resizable.jsx"
      },
      "code": "const ResizablePanelGroup = ({\n  className,\n  ...props\n}) => ("
    },
    {
      "name": "ResizablePanelGroup",
      "type": "variable",
      "startLine": 8,
      "endLine": 11,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "resizable.jsx",
        "path": "src/components/ui/resizable.jsx"
      },
      "code": "const ResizablePanelGroup = ({\n  className,\n  ...props\n}) => ("
    },
    {
      "name": "ResizablePanel",
      "type": "variable",
      "startLine": 20,
      "endLine": 21,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "resizable.jsx",
        "path": "src/components/ui/resizable.jsx"
      },
      "code": "const ResizablePanel = ResizablePrimitive.Panel\n"
    },
    {
      "name": "ResizableHandle",
      "type": "function",
      "startLine": 22,
      "endLine": 26,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "function"
      ],
      "file": {
        "name": "resizable.jsx",
        "path": "src/components/ui/resizable.jsx"
      },
      "code": "const ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}) => ("
    },
    {
      "name": "ResizableHandle",
      "type": "variable",
      "startLine": 22,
      "endLine": 26,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "resizable.jsx",
        "path": "src/components/ui/resizable.jsx"
      },
      "code": "const ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}) => ("
    },
    {
      "name": "buttonVariants",
      "type": "variable",
      "startLine": 7,
      "endLine": 9,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "button.jsx",
        "path": "src/components/ui/button.jsx"
      },
      "code": "const buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {"
    },
    {
      "name": "Button",
      "type": "variable",
      "startLine": 37,
      "endLine": 37,
      "complexity": "low",
      "parameters": [
        {
          "name": "( className"
        },
        {
          "name": "variant"
        },
        {
          "name": "size"
        },
        {
          "name": "asChild = false"
        },
        {
          "name": "ref"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable",
        "react"
      ],
      "file": {
        "name": "button.jsx",
        "path": "src/components/ui/button.jsx"
      },
      "code": "const Button = React.forwardRef(({ className, variant, size, asChild = false, ...props }, ref) => {"
    },
    {
      "name": "Comp",
      "type": "component",
      "startLine": 38,
      "endLine": 40,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "button.jsx",
        "path": "src/components/ui/button.jsx"
      },
      "code": "  const Comp = asChild ? Slot : \"button\"\n  return (\n    (<Comp"
    },
    {
      "name": "alertVariants",
      "type": "variable",
      "startLine": 6,
      "endLine": 8,
      "complexity": "low",
      "dependencies": [],
      "tags": [
        "variable"
      ],
      "file": {
        "name": "alert.jsx",
        "path": "src/components/ui/alert.jsx"
      },
      "code": "const alertVariants = cva(\n  \"relative w-full rounded-lg border px-4 py-3 text-sm [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground [&>svg~*]:pl-7\",\n  {"
    },
    {
      "name": "Alert",
      "type": "variable",
      "startLine": 22,
      "endLine": 22,
      "complexity": "low",
      "parameters": [
        {
          "name": "( className"
        },
        {
          "name": "variant"
        },
        {
          "name": "ref"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable",
        "react"
      ],
      "file": {
        "name": "alert.jsx",
        "path": "src/components/ui/alert.jsx"
      },
      "code": "const Alert = React.forwardRef(({ className, variant, ...props }, ref) => ("
    },
    {
      "name": "AlertTitle",
      "type": "variable",
      "startLine": 31,
      "endLine": 31,
      "complexity": "low",
      "parameters": [
        {
          "name": "( className"
        },
        {
          "name": "ref"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable",
        "react"
      ],
      "file": {
        "name": "alert.jsx",
        "path": "src/components/ui/alert.jsx"
      },
      "code": "const AlertTitle = React.forwardRef(({ className, ...props }, ref) => ("
    },
    {
      "name": "AlertDescription",
      "type": "variable",
      "startLine": 39,
      "endLine": 39,
      "complexity": "low",
      "parameters": [
        {
          "name": "( className"
        },
        {
          "name": "ref"
        }
      ],
      "dependencies": [],
      "tags": [
        "variable",
        "react"
      ],
      "file": {
        "name": "alert.jsx",
        "path": "src/components/ui/alert.jsx"
      },
      "code": "const AlertDescription = React.forwardRef(({ className, ...props }, ref) => ("
    }
  ],
  "exportedAt": "2025-09-14T15:02:35.573Z"
}